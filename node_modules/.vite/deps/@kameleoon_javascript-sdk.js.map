{
  "version": 3,
  "sources": ["../../ts-res/lib/main.ts", "../../ts-res/lib/index.ts", "../../@kameleoon/javascript-sdk-core/src/types.ts", "../../@kameleoon/javascript-sdk-core/src/cacheManager/cacheManager.ts", "../../@kameleoon/javascript-sdk-core/dist/cacheManager/types.js", "../../@kameleoon/javascript-sdk-core/dist/cacheManager/index.js", "../../@kameleoon/javascript-sdk-core/src/campaignConfiguration/types.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonError/types.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonError/constants.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonError/helpers.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonError/kameleoonError.ts", "../../@kameleoon/javascript-sdk-core/dist/kameleoonError/index.js", "../../@kameleoon/javascript-sdk-core/src/constants.ts", "../../@kameleoon/javascript-sdk-core/src/utilities/constants.ts", "../../@kameleoon/javascript-sdk-core/src/utilities/utilities.ts", "../../@kameleoon/javascript-sdk-core/dist/utilities/index.js", "../../@kameleoon/javascript-sdk-core/src/requester/constants.ts", "../../@kameleoon/javascript-sdk-core/src/requester/requester.ts", "../../@kameleoon/javascript-sdk-core/src/requester/types.ts", "../../@kameleoon/javascript-sdk-core/dist/requester/index.js", "../../@kameleoon/javascript-sdk-core/src/kameleoonData/types.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonData/customData.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonData/conversion.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonData/device.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonData/browser.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonData/pageView.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonData/userAgent.ts", "../../@kameleoon/javascript-sdk-core/dist/kameleoonData/index.js", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/deviceCondition.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/types.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/browserCondition.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/conversionCondition.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/customDataCondition.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/exclusiveExperimentCondition.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/pageTitleCondition.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/pageUrlCondition.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/sdkLanguageCondition.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/targetExperimentCondition.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/visitorCodeCondition.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/conditions/conditionFactory.ts", "../../@kameleoon/javascript-sdk-core/dist/targeting/conditions/types.js", "../../@kameleoon/javascript-sdk-core/dist/targeting/conditions/index.js", "../../@kameleoon/javascript-sdk-core/src/targeting/targetingNode.ts", "../../@kameleoon/javascript-sdk-core/src/targeting/targetingTree.ts", "../../@kameleoon/javascript-sdk-core/dist/targeting/index.js", "../../@kameleoon/javascript-sdk-core/dist/eventSource/types.js", "../../@kameleoon/javascript-sdk-core/src/eventSource/constants.ts", "../../@kameleoon/javascript-sdk-core/src/eventSource/externalEventSource.ts", "../../@kameleoon/javascript-sdk-core/dist/eventSource/index.js", "../../@kameleoon/javascript-sdk-core/src/campaignConfiguration/constants.ts", "../../@kameleoon/javascript-sdk-core/src/campaignConfiguration/campaignConfiguration.ts", "../../@kameleoon/javascript-sdk-core/dist/campaignConfiguration/index.js", "../../@kameleoon/javascript-sdk-core/src/clientSettings/clientSettings.ts", "../../@kameleoon/javascript-sdk-core/dist/clientSettings/types.js", "../../@kameleoon/javascript-sdk-core/dist/clientSettings/index.js", "../../@kameleoon/javascript-sdk-core/src/storage/constants.ts", "../../@kameleoon/javascript-sdk-core/src/storage/externalStorage.ts", "../../@kameleoon/javascript-sdk-core/dist/storage/types.js", "../../@kameleoon/javascript-sdk-core/dist/storage/index.js", "browser-external:crypto", "../../crypto-js/core.js", "../../crypto-js/sha256.js", "../../@kameleoon/javascript-sdk-core/src/hasher/hasher.ts", "../../@kameleoon/javascript-sdk-core/src/hasher/index.ts", "../../@kameleoon/javascript-sdk-core/src/variationConfiguration/variationConfiguration.ts", "../../@kameleoon/javascript-sdk-core/dist/variationConfiguration/types.js", "../../@kameleoon/javascript-sdk-core/dist/variationConfiguration/index.js", "../../@kameleoon/javascript-sdk-core/src/kameleoonClient.ts", "../../@kameleoon/javascript-sdk-core/src/kameleoonUtils.ts", "../../@kameleoon/javascript-sdk-core/dist/index.js", "../../@kameleoon/javascript-sdk/src/kameleoonUtils.ts", "../../@kameleoon/javascript-sdk/src/storage.ts", "../../@kameleoon/javascript-sdk/src/constants.ts", "../../@kameleoon/javascript-sdk/src/requester.ts", "../../@kameleoon/javascript-sdk/src/eventSource.ts", "../../@kameleoon/javascript-sdk/src/kameleoonClient.ts", "../../@kameleoon/javascript-sdk/src/index.ts"],
  "sourcesContent": [null, null, "import { IncomingMessage, ServerResponse } from 'http';\nimport { JSONType } from './campaignConfiguration/types';\nimport { SdkLanguageType } from './constants';\nimport { IExternalEventSourceConstructor } from './eventSource';\nimport { IExternalStorageConstructor } from './storage';\nimport {\n  IExternalRequestDispatcher,\n  GetClientConfigurationResultType,\n} from './requester';\n\n/**\n * @param {number} updateInterval - update interval in _minutes_ for sdk configuration, minimum value is 1 minute\n * @defaultvalue 60\n *\n * @param {Environment} environment - feature flag environment\n * @defaultvalue Environment.Production\n *\n * @param {number | undefined} targetingDataCleanupInterval - interval in _minutes_ for cleaning up targeting data, minimum value is 1 minute\n * Note: if not specified, default value will be used\n * @defaultvalue\n * - JavaScript SDK: `undefined` (no cleanup)\n * - React/React Native SDK: `undefined` (no cleanup)\n * - NodeJS SDK: `30`\n * */\nexport type SDKConfigurationType = {\n  updateInterval?: number;\n  environment?: Environment;\n  targetingDataCleanupInterval?: number;\n};\n\n/**\n * @param {string} siteCode - client's siteCode defined on Kameleoon platform\n * @param {Partial<SDKConfigurationType>} configuration - client's configuration\n * @param {InternalSDKConfigurationType} internalConfiguration - internal configuration for sdk core to be initialized with certain parameters to certain type of JavaScript SDK\n * */\nexport type SDKCoreParameters = {\n  siteCode: string;\n  configuration?: Partial<SDKConfigurationType>;\n  internalConfiguration: InternalSDKConfigurationType;\n};\n\n/**\n * @param {SdkLanguageType} type - type of the SDK\n * @param {string} version - version of the package\n * */\nexport type ExternalPackageInfoType = {\n  type: SdkLanguageType;\n  version: string;\n};\n\n/**\n * @param {IExternalStorage | undefined} externalStorage - external file system storage implemented outside client initialization\n * @param {IExternalEventSourceConstructor | undefined} externalEventSource - constructor for building external event source implementation\n * @param {ExternalPackageInfoType} externalPackageInfo - external package info, used to get package version and name\n * @param {GetClientConfigurationResultType} externalClientConfiguration - external fetched client configuration\n * @param {IExternalRequestDispatcher} externalRequestDispatcher - external request dispatcher, used to track data or get data\n * @param {number} targetingDataCleanupInterval - interval in *minutes* for cleaning up targeting data, minimum value is 1 minute\n * */\nexport type InternalSDKConfigurationType = {\n  externalStorage: IExternalStorageConstructor;\n  externalEventSource: IExternalEventSourceConstructor;\n  externalPackageInfo: ExternalPackageInfoType;\n  externalRequestDispatcher: IExternalRequestDispatcher;\n  externalClientConfiguration?: GetClientConfigurationResultType;\n};\n\n/**\n * @readonly\n * @enum {string} an Enum containing all possible variants of environment, passed as an argument to KameleoonClient `configuration`s `environment` field\n * */\nexport enum Environment {\n  Production = 'production',\n  Staging = 'staging',\n  Development = 'development',\n}\n\n/**\n * @readonly\n * @enum {string} an Enum containing all possible variants of feature variable types\n * */\nexport enum VariableType {\n  BOOLEAN = 'BOOLEAN',\n  NUMBER = 'NUMBER',\n  STRING = 'STRING',\n  JSON = 'JSON',\n}\n\nexport type BooleanVariableType = {\n  type: VariableType.BOOLEAN;\n  value: boolean;\n};\nexport type NumberVariableType = { type: VariableType.NUMBER; value: number };\nexport type StringVariableType = { type: VariableType.STRING; value: string };\nexport type JSONVariableType = { type: VariableType.JSON; value: JSONType };\n\n/**\n * @type FeatureVariableResultType - tuple of possible feature variable result types, each possible variation is an object containing `type` and `value` fields, `type` can be checked against `FeatureVariableType` enum, if the `type` is `FeatureVariableType.BOOLEAN` then the `value` type will be `boolean` and so on.\n * */\nexport type FeatureVariableResultType =\n  | BooleanVariableType\n  | NumberVariableType\n  | StringVariableType\n  | JSONVariableType;\n\n/**\n * @readonly\n * @enum {number} a helper Enum for getting milliseconds for a second, a minute and an hour.\n * */\nexport enum Milliseconds {\n  Second = 1000,\n  Minute = 60 * Milliseconds.Second,\n  Hour = 60 * Milliseconds.Minute,\n}\n\n/**\n * @param {string} visitorCode - unique visitor identifier, shouldn't exceed 255 characters\n * @param {number} goalId - an id of a goal to track\n * @param {number | undefined} revenue - an optional parameter for revenue, default value is `0`\n * */\nexport type TrackConversionParamsType = {\n  visitorCode: string;\n  goalId: number;\n  revenue?: number;\n};\n\nexport type ExperimentType = {\n  id: number;\n  name: string;\n};\n\nexport type FeatureFlagType = {\n  id: number;\n  key: string;\n};\n\n/**\n * @param {string} visitorCode - unique visitor identifier, shouldn't exceed 255 characters\n * @param {string} featureKey - key of the feature flag to look for, can be found on Kameleoon Platform\n * @param {string} variableKey - key of the variable to be found for a feature flag with provided `featureKey`, can be found on Kameleoon Platform\n * */\nexport type GetFeatureFlagVariableParamsType = {\n  visitorCode: string;\n  featureKey: string;\n  variableKey: string;\n};\n\n/**\n * @param {string} domain - domain which cookie belongs to\n * @param {string} visitorCode - unique visitor identifier, shouldn't exceed 255 characters\n * */\nexport type GetResultCookieParametersType = {\n  domain: string;\n  visitorCode: string;\n};\n\n/**\n * @param {Request} request - request object to get the cookie from\n * @param {Response} response - response object to write the updated cookie to\n * @param {string} domain - domain which cookie belongs to\n * @param {string | undefined} defaultVisitorCode - visitor code to be used in case there is no visitor code in cookies *Note*: if not passed visitor code will be randomly generated\n * */\nexport type ServerGetVisitorCodeParametersType = {\n  request: IncomingMessage;\n  response: ServerResponse;\n  domain: string;\n  defaultVisitorCode?: string;\n};\n\n/**\n * @param {string} domain - domain which cookie belongs to\n * @param {string | undefined} defaultVisitorCode - visitor code to be used in case there is no visitor code in cookies *Note*: if not passed visitor code will be randomly generated\n * */\nexport type ClientGetVisitorCodeParametersType = {\n  domain: string;\n  defaultVisitorCode?: string;\n};\n\n/**\n * @param {string | undefined} defaultVisitorCode - visitor code to be used in case there is no visitor code in cookies *Note*: if not passed visitor code will be randomly generated\n * */\nexport type MobileGetVisitorCodeParametersType = {\n  defaultVisitorCode?: string;\n};\n\nexport type TrackingCacheItemType = {\n  [experimentId: number]: { variationId: number; expirationTime: number };\n};\n", "import { Milliseconds } from 'src/types';\nimport { AddParametersType, CacheItemType } from './types';\n\ninterface ICacheManager<T> {\n  /**\n   * Add item to cache\n   * @param {AddParametersType<T>} parameters - parameters for adding new item cache\n   * @returns {void}\n   */\n  add({ key, data, lifetime }: AddParametersType<T>): void;\n  /**\n   * Get item that is not expired from cache\n   * @param {string} key - key of item\n   * @returns {T} an item that is not expired\n   */\n  getAliveItem(key: string): T | null;\n}\n\n/**\n * @class\n * CacheManager - a class for managing cache\n */\nexport class CacheManager<T> implements ICacheManager<T> {\n  private cacheMap = new Map<string, CacheItemType<T>>();\n  private intervalId: NodeJS.Timeout | null = null;\n  private cleanupTimeout: number;\n\n  /**\n   * @param {number} cleanupTimeout - timeout for cleaning cache in seconds\n   * generic type `T` is a type of data that will be stored in cache\n   * @example\n   * ```typescript\n   * const cacheManager = new CacheManager<number>(60);\n   * ```\n   */\n  constructor(cleanupTimeout: number) {\n    this.cleanupTimeout = cleanupTimeout * Milliseconds.Second;\n  }\n\n  public add({ key, data, lifetime }: AddParametersType<T>): void {\n    if (this.intervalId === null) {\n      this.activate();\n    }\n\n    const expirationTime = lifetime * Milliseconds.Second;\n\n    const cacheItem: CacheItemType<T> = {\n      data,\n      expirationTime: Date.now() + expirationTime,\n    };\n\n    this.cacheMap.set(key, cacheItem);\n  }\n\n  public getAliveItem(key: string): T | null {\n    const cacheItem = this.cacheMap.get(key);\n\n    if (cacheItem && cacheItem.expirationTime >= Date.now()) {\n      return cacheItem.data;\n    }\n\n    cacheItem && this.cacheMap.delete(key);\n\n    return null;\n  }\n\n  private activate(): void {\n    this.intervalId = setInterval(() => {\n      const now = Date.now();\n\n      for (const [key, item] of this.cacheMap) {\n        if (item.expirationTime < now) {\n          this.cacheMap.delete(key);\n        }\n      }\n\n      if (!this.cacheMap.size) {\n        this.cleanupInterval();\n      }\n    }, this.cleanupTimeout);\n  }\n\n  private cleanupInterval(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});\n//# sourceMappingURL=types.js.map", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"AddParametersType\",{enumerable:!0,get:function get(){return _types.AddParametersType}}),Object.defineProperty(exports,\"CacheManager\",{enumerable:!0,get:function get(){return _cacheManager.CacheManager}});var _cacheManager=require(\"./cacheManager\"),_types=require(\"./types\");\n//# sourceMappingURL=index.js.map", "import { ClientSettingsType } from 'src/clientSettings';\nimport { IExternalEventSourceConstructor } from 'src/eventSource';\nimport { KameleoonData, KameleoonDataType } from 'src/kameleoonData';\nimport { Requester, GetClientConfigurationResultType } from 'src/requester';\nimport { ClientDataType, ExternalStorage, IStorage } from 'src/storage';\nimport { OfflineTracking } from 'src/storage/types';\nimport { SegmentType, TargetingDataType } from 'src/targeting';\nimport { VariableType } from 'src/types';\n\nexport type UpdateClientConfigurationParameters = {\n  timeStamp?: number;\n  useCache?: boolean;\n};\n\nexport type ScheduleType = {\n  dateStart: string;\n  dateEnd: string;\n};\n\nexport enum UpdateType {\n  Polling,\n  RealTime,\n  Idle,\n}\n\nexport type JSONValue =\n  | string\n  | number\n  | boolean\n  | { [x: string]: JSONValue }\n  | JSONValue[];\n\nexport type JSONType = Record<string | number | symbol, JSONValue> | null;\n\nexport enum ExperimentType {\n  CLASSIC = 'CLASSIC',\n  SERVER_SIDE = 'SERVER_SIDE',\n  DEVELOPER = 'DEVELOPER',\n  MVT = 'MVT',\n  HYBRID = 'HYBRID',\n}\n\nexport enum RuleType {\n  PROGRESSIVE_DELIVERY = 'PROGRESSIVE_DELIVERY',\n  TARGETED_DELIVERY = 'TARGETED_DELIVERY',\n  EXPERIMENTATION = 'EXPERIMENTATION',\n}\n\nexport enum FeatureFlagSdkLanguageType {\n  ANDROID = 'ANDROID',\n  SWIFT = 'SWIFT',\n  JAVA = 'JAVA',\n  CSHARP = 'CSHARP',\n  NODEJS = 'NODEJS',\n  PHP = 'PHP',\n  RUBY = 'RUBY',\n  GO = 'GO',\n  FLUTTER = 'FLUTTER',\n  REACTJS = 'REACTJS',\n}\n\nexport enum FeatureStatus {\n  ACTIVATED = 'ACTIVATED',\n  DEACTIVATED = 'DEACTIVATED',\n  SCHEDULED = 'SCHEDULED',\n}\n\nexport enum CustomDataScope {\n  Visit = 'VISIT',\n  Visitor = 'VISITOR',\n  Page = 'Page',\n}\n\nexport type ExperimentItemType = {\n  id: string;\n  name: string;\n  type: ExperimentType;\n  siteId: string;\n  siteCode: string;\n  status: ExperimentStatus;\n  siteEnabled: boolean;\n  variations: ExperimentVariationType[];\n  deviations: DeviationType[];\n  respoolTime: RespoolTimeType[];\n  segment: SegmentType | null;\n};\n\nexport type ExperimentVariationType = {\n  id: string;\n  customJson: string;\n};\n\nexport type DeviationType = {\n  variationId: string;\n  value: number;\n};\n\nexport type RespoolTimeType = {\n  variationId: string;\n  value: number;\n};\n\nexport enum ExperimentStatus {\n  DRAFT = 'DRAFT',\n  ACTIVE = 'ACTIVE',\n  PAUSED = 'PAUSED',\n  SCHEDULED = 'SCHEDULED',\n  STOPPED = 'STOPPED',\n  USED_AS_PERSONALIZATION = 'USED_AS_PERSONALIZATION',\n  DEVIATED = 'DEVIATED',\n}\n\nexport type FeatureFlagType = {\n  id: number;\n  featureKey: string;\n  variations: FeatureVariationType[];\n  defaultVariationKey: string;\n  rules: RuleItemType[];\n};\n\nexport type FeatureVariationType = {\n  key: string;\n  variables: FeatureVariableType[];\n};\n\nexport type FeatureVariableType = {\n  key: string;\n  type: VariableType;\n  value: string | number | boolean;\n};\n\nexport type RuleItemType = {\n  type: RuleType;\n  id: number;\n  respoolTime: number | null;\n  order: number;\n  exposition: number;\n  experimentId: number;\n  variationByExposition: VariationByExpositionType[];\n  segment: SegmentType | null;\n};\n\nexport type VariationByExpositionType = {\n  variationKey: string;\n  variationId: number | null;\n  exposition: number;\n};\n\nexport type ConfigurationDataType = {\n  experiments: ExperimentItemType[];\n  featureFlags: FeatureFlagType[];\n  configuration: ConfigurationType;\n  customData: CustomDataConfigurationType[];\n};\n\nexport type CustomDataConfigurationType = {\n  index: number;\n  localOnly: boolean;\n  scope: CustomDataScope;\n};\n\nexport type ConfigurationType = {\n  realTimeUpdate: boolean;\n};\n\nexport type CampaignConfigurationType = {\n  targetingData: TargetingDataType;\n  configurationData: ConfigurationDataType;\n};\n\nexport type UnsentVisitorTargetingDataType = Map<\n  KameleoonData | number,\n  KameleoonDataType\n>;\n\nexport type UnsentTargetingDataType = {\n  [visitorCode: string]: UnsentVisitorTargetingDataType | undefined;\n};\n\nexport type CampaignConfigurationParametersType = {\n  settings: ClientSettingsType;\n  storage: IStorage<ClientDataType>;\n  requester: Requester;\n  offlineTrackingStorage: ExternalStorage<OfflineTracking>;\n  externalClientConfiguration?: GetClientConfigurationResultType;\n  externalEventSource: IExternalEventSourceConstructor;\n  targetingCleanupInterval?: number;\n};\n", "export enum KameleoonException {\n  ExperimentConfigurationNotFound = 'ExperimentConfigurationNotFound',\n  EventSourceInitialization = 'EventSourceInitialization',\n  VariationNotFound = 'VariationNotFound',\n  FeatureFlagConfigurationNotFound = 'FeatureFlagConfigurationNotFound',\n  FeatureFlagVariableNotFound = 'FeatureFlagVariableNotFound',\n  NotTargeted = 'NotTargeted',\n  NotAllocated = 'NotAllocated',\n  VisitorCodeMaxLength = 'VisitorCodeMaxLength',\n  VisitorCodeEmpty = 'VisitorCodeEmpty',\n  StorageInitialization = 'StorageInitialization',\n  StorageWrite = 'StorageWrite',\n  StorageRead = 'StorageRead',\n  StorageParse = 'StorageParse',\n  ClientConfiguration = 'ClientConfiguration',\n  TargetingCondition = 'TargetingCondition',\n  AmongValuesCheck = 'AmongValuesCheck',\n  Initialization = 'Initialization',\n  JSONParse = 'JSONParse',\n  NumberParse = 'NumberParse',\n  VersionParse = 'VersionParse',\n  SemanticVersionParse = 'SemanticVersionParse',\n  RemoteData = 'RemoteData',\n  MaximumRetriesReached = 'MaximumRetriesReached',\n}\n", "import { KameleoonStorageKey } from 'src/storage';\nimport { TargetingType } from 'src/targeting';\nimport { KameleoonException } from './types';\n\nexport const ERROR_MESSAGES = {\n  [KameleoonException.JSONParse]: (err: unknown) =>\n    `Couldn't parse JSON variable: ${err}`,\n  [KameleoonException.NumberParse]: (value: string) =>\n    `It's not possible to parse value ${value} to Number`,\n  [KameleoonException.VersionParse]: (value: string) =>\n    `It's not possible to parse a version value ${value} to Number, version should be in format x.x`,\n  [KameleoonException.SemanticVersionParse]: (value: string) =>\n    `It's not possible to parse a version value ${value} to Number, version should be in format x.x.x`,\n  [KameleoonException.Initialization]: () =>\n    \"It seems that the client wasn't properly initialized, make sure to run `initialize` method before invoking other methods\",\n  [KameleoonException.StorageInitialization]: () =>\n    \"There was an error while initializing React Native SDK storage, it seems that the storage library dependency wasn't installed\",\n  [KameleoonException.EventSourceInitialization]: () =>\n    \"There was an error while initializing Real Time Update service, it seems that the event source library dependency wasn't installed\",\n  [KameleoonException.VariationNotFound]: () =>\n    \"Couldn't find experiment variation\",\n  [KameleoonException.FeatureFlagConfigurationNotFound]: (\n    featureKey: string,\n    visitorCode: string,\n  ) =>\n    `No feature flag with key ${featureKey} was found for ${visitorCode} visitorCode.`,\n  [KameleoonException.FeatureFlagVariableNotFound]: (\n    variableKey: string,\n    visitorCode: string,\n  ) =>\n    `No feature flag variable with key ${variableKey} was found for ${visitorCode} visitorCode.`,\n  [KameleoonException.ExperimentConfigurationNotFound]: (\n    experimentId: number,\n    visitorCode: string,\n  ) =>\n    `No experiment with id ${experimentId} was found for ${visitorCode} visitorCode.`,\n  [KameleoonException.NotTargeted]: (visitorCode: string) =>\n    `Visitor code ${visitorCode} is not targeted`,\n  [KameleoonException.NotAllocated]: (visitorCode: string) =>\n    `Visitor with visitor code ${visitorCode} is in unallocated traffic, there is no variation id to be assigned to the visitor.`,\n  [KameleoonException.VisitorCodeMaxLength]: () =>\n    'Visitor code can not be more than 255 characters long',\n  [KameleoonException.VisitorCodeEmpty]: () => 'Visitor code can not be empty',\n  [KameleoonException.StorageWrite]: (err: unknown) =>\n    `Couldn't update storage for kameleoonClient: ${err}`,\n  [KameleoonException.StorageRead]: (key: KameleoonStorageKey) =>\n    `No data found in storage under ${key} key`,\n  [KameleoonException.StorageParse]: (err: unknown, key: KameleoonStorageKey) =>\n    `Couldn't parse ${key} storage data, the data may be corrupted. Error: ${err}`,\n  [KameleoonException.ClientConfiguration]: () =>\n    \"Couldn't retrieve client configuration from Kameleoon Api\",\n  [KameleoonException.TargetingCondition]: (targetingType: TargetingType) =>\n    `${targetingType} targeting condition is not yet supported.`,\n  [KameleoonException.AmongValuesCheck]: (err: unknown, value: string) =>\n    `Couldn't parse value \"${value}\": ${err}`,\n  [KameleoonException.RemoteData]: () =>\n    `Couldn't retrieve data from Kameleoon server`,\n  [KameleoonException.MaximumRetriesReached]: () =>\n    `Maximum retries reached, request failed`,\n};\n", "export function exhaustCheck(option: never): never {\n  throw new Error(`Reaching an impossible state because of ${option}`);\n}\n", "import { KameleoonStorageKey } from 'src/storage';\nimport { TargetingType } from 'src/targeting';\nimport { ERROR_MESSAGES } from './constants';\nimport { exhaustCheck } from './helpers';\nimport { KameleoonException } from './types';\n\n/**\n * @class\n * KameleoonError - extends standard `Error` by adding custom `type` property with the type of `KameleoonException`\n * */\nexport class KameleoonError extends Error {\n  private errorType: KameleoonException;\n\n  /**\n   * @param {KameleoonException} type - type of KameleoonError represented by `KameleoonException` enum\n   * */\n  constructor(\n    type:\n      | KameleoonException.Initialization\n      | KameleoonException.ClientConfiguration\n      | KameleoonException.VisitorCodeMaxLength\n      | KameleoonException.VisitorCodeEmpty\n      | KameleoonException.StorageInitialization\n      | KameleoonException.EventSourceInitialization\n      | KameleoonException.VariationNotFound\n      | KameleoonException.RemoteData\n      | KameleoonException.MaximumRetriesReached,\n  );\n  constructor(\n    type: KameleoonException.FeatureFlagConfigurationNotFound,\n    featureKey: string,\n    visitorCode: string,\n  );\n  constructor(\n    type: KameleoonException.FeatureFlagVariableNotFound,\n    variableKey: string,\n    visitorCode: string,\n  );\n  constructor(\n    type: KameleoonException.NotTargeted | KameleoonException.NotAllocated,\n    visitorCode: string,\n  );\n  constructor(\n    type: KameleoonException.ExperimentConfigurationNotFound,\n    experimentId: number,\n    visitorCode: string,\n  );\n  constructor(\n    type: KameleoonException.StorageWrite | KameleoonException.JSONParse,\n    err: unknown,\n  );\n  constructor(type: KameleoonException.StorageRead, storageKey: string);\n  constructor(\n    type: KameleoonException.StorageParse,\n    err: unknown,\n    key: KameleoonStorageKey,\n  );\n  constructor(\n    type: KameleoonException.TargetingCondition,\n    targetingType: TargetingType,\n  );\n  constructor(\n    type: KameleoonException.AmongValuesCheck,\n    err: unknown,\n    value: string,\n  );\n  constructor(\n    type:\n      | KameleoonException.NumberParse\n      | KameleoonException.VersionParse\n      | KameleoonException.SemanticVersionParse,\n    value: string,\n  );\n  constructor(\n    type: KameleoonException,\n    secondParam?:\n      | number\n      | string\n      | unknown\n      | KameleoonStorageKey\n      | TargetingType,\n    thirdParam?: string | KameleoonStorageKey,\n  ) {\n    super(`Error: ${type}`);\n\n    this.name = 'KameleoonError';\n    this.errorType = type;\n\n    switch (type) {\n      case KameleoonException.Initialization:\n      case KameleoonException.ClientConfiguration:\n      case KameleoonException.VisitorCodeMaxLength:\n      case KameleoonException.VisitorCodeEmpty:\n      case KameleoonException.StorageInitialization:\n      case KameleoonException.VariationNotFound:\n      case KameleoonException.EventSourceInitialization:\n      case KameleoonException.RemoteData:\n      case KameleoonException.MaximumRetriesReached:\n        this.message = ERROR_MESSAGES[type]();\n        break;\n      case KameleoonException.NotAllocated:\n      case KameleoonException.NotTargeted:\n        this.message = ERROR_MESSAGES[type](secondParam as string);\n        break;\n      case KameleoonException.ExperimentConfigurationNotFound:\n        this.message = ERROR_MESSAGES[type](\n          secondParam as number,\n          thirdParam as string,\n        );\n        break;\n      case KameleoonException.FeatureFlagVariableNotFound:\n      case KameleoonException.FeatureFlagConfigurationNotFound:\n        this.message = ERROR_MESSAGES[type](\n          secondParam as string,\n          thirdParam as string,\n        );\n        break;\n      case KameleoonException.StorageWrite:\n      case KameleoonException.JSONParse:\n        this.message = ERROR_MESSAGES[type](secondParam);\n        break;\n      case KameleoonException.StorageRead:\n        this.message = ERROR_MESSAGES[type](secondParam as KameleoonStorageKey);\n        break;\n      case KameleoonException.StorageParse:\n        this.message = ERROR_MESSAGES[type](\n          secondParam,\n          thirdParam as KameleoonStorageKey,\n        );\n        break;\n      case KameleoonException.TargetingCondition:\n        this.message = ERROR_MESSAGES[type](secondParam as TargetingType);\n        break;\n      case KameleoonException.NumberParse:\n      case KameleoonException.VersionParse:\n      case KameleoonException.SemanticVersionParse:\n        this.message = ERROR_MESSAGES[type](secondParam as string);\n        break;\n      case KameleoonException.AmongValuesCheck:\n        this.message = ERROR_MESSAGES[type](secondParam, thirdParam as string);\n        break;\n      default:\n        exhaustCheck(type);\n    }\n  }\n\n  get type(): KameleoonException {\n    return this.errorType;\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"KameleoonError\",{enumerable:!0,get:function get(){return _kameleoonError.KameleoonError}}),Object.defineProperty(exports,\"KameleoonException\",{enumerable:!0,get:function get(){return _types.KameleoonException}}),Object.defineProperty(exports,\"exhaustCheck\",{enumerable:!0,get:function get(){return _helpers.exhaustCheck}});var _kameleoonError=require(\"./kameleoonError\"),_types=require(\"./types\"),_helpers=require(\"./helpers\");\n//# sourceMappingURL=index.js.map", "export const UNALLOCATED_VARIATION_ID = 0;\nexport const OFF_VARIATION_KEY = 'off';\nexport const KAMELEOON_COOKIE_KEY = 'kameleoonVisitorCode';\nexport const VISITOR_CODE_LENGTH = 16;\nexport const CACHE_CLEANUP_TIMEOUT = 10;\nexport const CACHE_ITEM_LIFETIME = 5;\n\nexport enum Cookie {\n  PairsDelimiter = '; ',\n  KeyValueDelimiter = '=',\n  MaxAge = 'Max-Age',\n  Path = 'Path',\n  Domain = 'Domain',\n}\n\n/**\n * @readonly\n * @enum {string} an Enum of all the possible Kameleoon SDK types\n * */\nexport enum SdkLanguageType {\n  ANDROID = 'ANDROID',\n  IOS = 'IOS',\n  JAVA = 'JAVA',\n  CSHARP = 'CSHARP',\n  NODEJS = 'NODEJS',\n  PHP = 'PHP',\n  RUBY = 'RUBY',\n  GO = 'GO',\n  FLUTTER = 'FLUTTER',\n  REACT = 'REACT',\n  PYTHON = 'PYTHON',\n  JAVASCRIPT = 'JAVASCRIPT',\n  RUST = 'RUST',\n}\n", "export const VISITOR_CODE_MAX_LENGTH = 255;\nexport const HEX_CHARACTERS = '0123456789ABCDEF';\n", "import { Err, Ok, Result } from 'ts-res';\nimport {\n  KameleoonError,\n  KameleoonException,\n  exhaustCheck,\n} from 'src/kameleoonError';\nimport { ExperimentVariationsType } from 'src/storage';\nimport {\n  FeatureVariableResultType,\n  Milliseconds,\n  TrackingCacheItemType,\n  VariableType,\n} from 'src/types';\nimport {\n  CampaignConfiguration,\n  FeatureVariableType,\n  JSONType,\n} from 'src/campaignConfiguration';\nimport {\n  CustomData,\n  KameleoonData,\n  KameleoonDataType,\n} from 'src/kameleoonData';\nimport { CACHE_ITEM_LIFETIME } from 'src/constants';\nimport { CacheManager } from 'src/cacheManager';\nimport {\n  GetVisitorDataResultType,\n  TrackExperimentParamsType,\n  TrackDataParamsType,\n  VisitType,\n} from 'src/requester';\nimport {\n  CheckTargetingParametersType,\n  ManageCacheParametersType,\n  TrackDataParametersType,\n  TrackRuleParametersType,\n  AddToOfflineTrackingParametersType,\n  SendOfflineTrackingParametersType,\n  TrackExperimentParametersType,\n  DeleteFromOfflineTrackingParametersType,\n} from './types';\nimport { VISITOR_CODE_MAX_LENGTH, HEX_CHARACTERS } from './constants';\nimport { KameleoonVisitorDataType } from 'src/kameleoonData/types';\n\nexport class Utilities {\n  static checkTargeting({\n    segment,\n    visitorCode,\n    targetingData,\n    experimentId,\n    variationConfiguration,\n    campaignConfiguration,\n    packageInfo,\n  }: CheckTargetingParametersType): Result<boolean, KameleoonError> {\n    if (!segment || !segment.conditionsData.firstLevel.length) {\n      return Ok(true);\n    }\n\n    if (!variationConfiguration) {\n      return Err(new KameleoonError(KameleoonException.Initialization));\n    }\n\n    let variations: ExperimentVariationsType = {};\n\n    const assignedVariationsResult =\n      variationConfiguration.getAssignedVariations(visitorCode);\n\n    if (assignedVariationsResult.ok) {\n      variations = assignedVariationsResult.data;\n    }\n\n    const targetingTree = campaignConfiguration.getTargetingTree(segment);\n\n    const result = targetingTree.evaluate({\n      variationData: variations,\n      sdkInfo: packageInfo,\n      targetingData,\n      experimentId,\n      visitorCode,\n    });\n\n    return result;\n  }\n\n  static validateVisitorCode(\n    visitorCode: string,\n  ): Result<void, KameleoonError> {\n    if (visitorCode.length === 0) {\n      return Err(new KameleoonError(KameleoonException.VisitorCodeEmpty));\n    }\n\n    if (visitorCode.length > VISITOR_CODE_MAX_LENGTH) {\n      return Err(new KameleoonError(KameleoonException.VisitorCodeMaxLength));\n    }\n\n    return Ok();\n  }\n\n  static getDataUrl(\n    visitorCode: string,\n    campaignConfiguration: CampaignConfiguration,\n  ): string {\n    const unsentData = campaignConfiguration.getUnsentData(visitorCode);\n    let resultUrl = '';\n\n    if (!unsentData || !unsentData.size) {\n      return resultUrl;\n    }\n\n    for (const item of unsentData.values()) {\n      if (item.url) {\n        resultUrl += item.url + '\\n';\n      }\n    }\n\n    return resultUrl;\n  }\n\n  static async trackRule({\n    featureFlagVariation,\n    campaignConfiguration,\n    visitorCode,\n    requester,\n    isOfflineModeOn,\n    offlineTrackingStorage,\n  }: TrackRuleParametersType): Promise<void> {\n    const { variationId, rule } = featureFlagVariation;\n\n    const userAgent = this.getUserAgent(visitorCode, campaignConfiguration);\n\n    const dataUrl = this.getDataUrl(visitorCode, campaignConfiguration);\n\n    const resultVariationId = variationId || 0;\n    const isUnallocated = variationId === null;\n    // --- Note ---\n    // Experiment id is not needed for unallocated visitors\n    // So we just use 0 as a fallback\n    const experimentId = rule ? rule.experimentId : 0;\n\n    const parameters = {\n      visitorCode,\n      isUnallocated,\n      body: dataUrl,\n      experimentId,\n      variationId: resultVariationId,\n      userAgent,\n    };\n\n    const result = await requester.trackExperiment(parameters);\n\n    if (result.ok) {\n      campaignConfiguration.clearUnsentData(visitorCode);\n    }\n\n    if (!result.ok && isOfflineModeOn) {\n      this.addItemToOfflineTracking({\n        item: parameters,\n        storage: offlineTrackingStorage,\n        isExperiment: true,\n      });\n    }\n  }\n\n  static parseFeatureVariable(\n    variable: FeatureVariableType,\n  ): Result<FeatureVariableResultType, KameleoonError> {\n    const { type, value } = variable;\n\n    switch (type) {\n      case VariableType.BOOLEAN:\n        return Ok({\n          type,\n          value: Boolean(value),\n        });\n      case VariableType.STRING:\n        return Ok({\n          type,\n          value: String(value),\n        });\n      case VariableType.NUMBER:\n        const numberValue = Number(value);\n\n        if (Number.isNaN(numberValue)) {\n          return Err(\n            new KameleoonError(KameleoonException.NumberParse, String(value)),\n          );\n        }\n\n        return Ok({\n          type,\n          value: numberValue,\n        });\n      case VariableType.JSON:\n        try {\n          const jsonValue: JSONType = JSON.parse(String(variable.value));\n\n          return Ok({\n            type,\n            value: jsonValue,\n          });\n        } catch (err) {\n          return Err(new KameleoonError(KameleoonException.JSONParse, err));\n        }\n      default:\n        exhaustCheck(type);\n    }\n  }\n\n  static parseVisitorData(data: GetVisitorDataResultType): KameleoonDataType[] {\n    const { currentVisit, previousVisits } = data;\n\n    let visits: [VisitType] | undefined;\n\n    if (currentVisit) {\n      visits = [currentVisit];\n    } else if (previousVisits) {\n      visits = previousVisits;\n    }\n\n    if (!visits) {\n      return [];\n    }\n\n    const indexMap = new Map();\n    const resultData: KameleoonDataType[] = [];\n    const customDataEvents = [...visits[0].customDataEvents];\n    customDataEvents.sort((a, b) => b.time - a.time);\n\n    for (const customDataEvent of customDataEvents) {\n      const customDataIndex = customDataEvent.data.index;\n\n      if (!indexMap.has(customDataIndex)) {\n        indexMap.set(customDataIndex, true);\n\n        const values = Object.keys(customDataEvent.data.valuesCountMap);\n        resultData.push(new CustomData(customDataIndex, ...values));\n      }\n    }\n\n    return resultData;\n  }\n\n  static parseRegExp(value: string): RegExp {\n    if (value[0] === '/') {\n      const [_, expression, flags] = value.split('/');\n\n      return new RegExp(expression, flags);\n    }\n\n    return new RegExp(value);\n  }\n\n  static getUserAgent(\n    visitorCode: string,\n    campaignConfiguration: CampaignConfiguration,\n  ): string | undefined {\n    const targetingData: KameleoonVisitorDataType | undefined =\n      campaignConfiguration.storedTargetingData[visitorCode];\n\n    if (targetingData) {\n      const userAgentData = targetingData[KameleoonData.UserAgent];\n\n      if (userAgentData) {\n        return userAgentData.value;\n      }\n    }\n\n    return undefined;\n  }\n\n  static isCustomData(dataItem: KameleoonDataType): dataItem is CustomData {\n    return dataItem.data.type === KameleoonData.CustomData;\n  }\n\n  static updateCache({\n    cacheManager,\n    visitorCode,\n    experimentId,\n    variationId,\n  }: ManageCacheParametersType): void {\n    const cacheData = cacheManager.getAliveItem(visitorCode);\n\n    const newCacheData = cacheData ? { ...cacheData } : {};\n\n    newCacheData[experimentId] = {\n      variationId,\n      expirationTime: Date.now() + CACHE_ITEM_LIFETIME * Milliseconds.Second,\n    };\n\n    cacheManager.add({\n      key: visitorCode,\n      data: newCacheData,\n      lifetime: CACHE_ITEM_LIFETIME,\n    });\n  }\n\n  static getTrackingCode(\n    trackingCache: CacheManager<TrackingCacheItemType>,\n    visitorCode: string,\n  ): string {\n    let resultString = 'window.kameleoonQueue=window.kameleoonQueue||[];';\n\n    const cacheData = trackingCache.getAliveItem(visitorCode);\n\n    if (!cacheData) {\n      return resultString;\n    }\n\n    const updatedCacheData: TrackingCacheItemType = {};\n\n    Object.entries(cacheData).forEach(\n      ([experimentId, { variationId, expirationTime }]) => {\n        if (expirationTime > Date.now()) {\n          resultString += `window.kameleoonQueue.push(['Experiments.assignVariation',${experimentId},${variationId}]);`;\n          resultString += `window.kameleoonQueue.push(['Experiments.trigger',${experimentId},true]);`;\n\n          updatedCacheData[Number(experimentId)] = {\n            variationId,\n            expirationTime,\n          };\n        }\n      },\n    );\n\n    // --- Note ---\n    // Cache is updated with only alive experiments\n    trackingCache.add({\n      key: visitorCode,\n      data: updatedCacheData,\n      lifetime: CACHE_ITEM_LIFETIME,\n    });\n\n    return resultString;\n  }\n\n  static async trackData({\n    visitorCode,\n    campaignConfiguration,\n    requester,\n    isOfflineModeOn,\n    offlineTrackingStorage,\n  }: TrackDataParametersType): Promise<void> {\n    await this.sendOfflineTracking({\n      requester,\n      storage: offlineTrackingStorage,\n    });\n\n    const dataUrl = this.getDataUrl(visitorCode, campaignConfiguration);\n\n    const userAgent = this.getUserAgent(visitorCode, campaignConfiguration);\n\n    const parameters = {\n      visitorCode,\n      body: dataUrl,\n      userAgent,\n    };\n\n    const result = await requester.trackData(parameters);\n\n    const cleanup = () => campaignConfiguration.clearUnsentData(visitorCode);\n\n    if (result.ok) {\n      cleanup();\n    }\n\n    if (!result.ok && isOfflineModeOn) {\n      this.addItemToOfflineTracking({\n        item: parameters,\n        storage: offlineTrackingStorage,\n        isExperiment: false,\n        onSuccess: cleanup,\n      });\n    }\n  }\n\n  static async trackExperiment({\n    variationId,\n    experimentId,\n    isUnallocated,\n    visitorCode,\n    campaignConfiguration,\n    requester,\n    isOfflineModeOn,\n    offlineTrackingStorage,\n  }: TrackExperimentParametersType): Promise<void> {\n    const dataUrl = this.getDataUrl(visitorCode, campaignConfiguration);\n\n    const userAgent = this.getUserAgent(visitorCode, campaignConfiguration);\n\n    const parameters = {\n      body: dataUrl,\n      visitorCode,\n      isUnallocated,\n      variationId,\n      userAgent,\n      experimentId,\n    };\n\n    const result = await requester.trackExperiment(parameters);\n\n    if (!result.ok && isOfflineModeOn) {\n      this.addItemToOfflineTracking({\n        item: parameters,\n        storage: offlineTrackingStorage,\n        isExperiment: true,\n      });\n    }\n  }\n\n  static getNonce(): string {\n    const hexLength = HEX_CHARACTERS.length;\n    let nonce: string = '';\n\n    for (let i = 0; i < hexLength; i++) {\n      const randomNumber = Math.floor(Math.random() * hexLength);\n      nonce += HEX_CHARACTERS.substring(randomNumber, randomNumber + 1);\n    }\n\n    return nonce;\n  }\n\n  static async sendOfflineTracking({\n    requester,\n    storage,\n  }: SendOfflineTrackingParametersType) {\n    const readResult = storage.read();\n\n    if (readResult.ok && readResult.data.requestParameters) {\n      const { requestParameters } = readResult.data;\n      const successfulTimestamps: number[] = [];\n\n      // --- Note ---\n      // `for..of` + `await` is used to make sure that failed requests are sent one by one\n      // without risk of getting the same timestamp at the server, which might happen, for example,\n      // with `.forEach` or `.map` starting requests in async callbacks at the same time\n      for (const parameters of requestParameters) {\n        const { timestamp, isExperiment, ...params } = parameters;\n        let result: Result<boolean, KameleoonError>;\n\n        if (isExperiment) {\n          result = await requester.trackExperiment(\n            params as TrackExperimentParamsType,\n          );\n        } else {\n          result = await requester.trackData(params as TrackDataParamsType);\n        }\n\n        result.ok && result.data && successfulTimestamps.push(timestamp);\n      }\n\n      this.deleteFromOfflineTracking({\n        storage,\n        timestamps: successfulTimestamps,\n      });\n    }\n  }\n\n  private static addItemToOfflineTracking({\n    item,\n    isExperiment,\n    storage,\n    onSuccess,\n  }: AddToOfflineTrackingParametersType): void {\n    const readResult = storage.read();\n\n    const data = readResult.ok ? readResult.data : {};\n\n    const { requestParameters } = data;\n\n    const newItem = {\n      ...item,\n      timestamp: new Date().getTime(),\n      isExperiment,\n    };\n\n    const newRequestParameters = requestParameters\n      ? [...requestParameters, newItem]\n      : [newItem];\n\n    const writeResult = storage.write({\n      requestParameters: newRequestParameters,\n    });\n\n    if (writeResult.ok && onSuccess) {\n      onSuccess();\n    }\n  }\n\n  private static deleteFromOfflineTracking({\n    timestamps,\n    storage,\n  }: DeleteFromOfflineTrackingParametersType): void {\n    const readResult = storage.read();\n\n    if (readResult.ok) {\n      const { requestParameters } = readResult.data;\n\n      const newParameters = requestParameters?.filter(\n        (item) => !timestamps.includes(item.timestamp),\n      );\n\n      storage.write({ requestParameters: newParameters });\n    }\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"HEX_CHARACTERS\",{enumerable:!0,get:function get(){return _constants.HEX_CHARACTERS}}),Object.defineProperty(exports,\"Utilities\",{enumerable:!0,get:function get(){return _utilities.Utilities}});var _utilities=require(\"./utilities\"),_constants=require(\"./constants\");\n//# sourceMappingURL=index.js.map", "import {\n  EventType,\n  ParameterType,\n  QueryType,\n  StrictEventTypeRecord,\n  StrictParameterRecord,\n  StrictQueryRecord,\n  StrictTrackingRecord,\n  TrackingType,\n} from './types';\n\nexport enum Header {\n  UserAgent = 'User-Agent',\n  ContentType = 'Content-Type',\n  Authorization = 'Authorization',\n}\n\nconst topLevelDomain = process.env.NODE_ENV === 'test' ? 'net' : 'com';\nconst dataTopLevelDomain = process.env.NODE_ENV === 'test' ? 'net' : 'io';\n\nexport const UrlEventType: StrictEventTypeRecord<EventType> = {\n  CustomData: 'eventType=customData',\n  StaticData: 'eventType=staticData',\n  Page: 'eventType=page',\n  Conversion: 'eventType=conversion',\n  Activity: 'eventType=activity',\n  Experiment: 'eventType=experiment',\n};\nexport const UrlParameter: StrictParameterRecord<ParameterType> = {\n  Title: '&title=',\n  ReferrersIndices: '&referrersIndices=',\n  Negative: '&negative=',\n  Revenue: '&revenue=',\n  Overwrite: '&overwrite=',\n  Index: '&index=',\n  BrowserIndex: '&browserIndex=',\n  BrowserVersion: '&browserVersion=',\n  Href: '&href=',\n  DeviceType: '&deviceType=',\n  SiteCode: '&siteCode=',\n  GoalId: '&goalId=',\n  VisitorCode: '&visitorCode=',\n  Environment: '&environment=',\n  VariationId: '&variationId=',\n  Ts: '&ts=',\n  Key: '&key=',\n  SdkName: '&sdkName=',\n  SdkVersion: '&sdkVersion=',\n  ValuesCountMap: '&valuesCountMap=',\n  Nonce: '&nonce=',\n  Id: '&id=',\n  CustomData: '&customData=',\n  CurrentVisit: '&currentVisit=',\n  MaxNumberPreviousVisits: '&maxNumberPreviousVisits=',\n};\nexport const UrlQuery: StrictQueryRecord<QueryType> = {\n  Sse: 'sse?siteCode=',\n  Mobile: 'mobile?siteCode=',\n  Map: 'map?siteCode=',\n  Events: 'events?siteCode=',\n  Visitor: 'visitor?siteCode=',\n};\nexport const UrlTracking: StrictTrackingRecord<TrackingType> = {\n  Visit: 'visit/',\n  Map: 'map/',\n};\n\nconst URL_DATA_API = `https://data.kameleoon.${dataTopLevelDomain}`;\n\nexport const URL = {\n  SERVER_SENT_EVENTS: `https://events.kameleoon.${topLevelDomain}:8110/`,\n  CLIENT_CONFIGURATION: `https://client-config.kameleoon.${topLevelDomain}/`,\n  VISIT_EVENT: `${URL_DATA_API}/${UrlTracking.Visit + UrlQuery.Events}`,\n  VISIT_DATA: `${URL_DATA_API}/${UrlTracking.Visit + UrlQuery.Visitor}`,\n  DATA_MAP: `${URL_DATA_API}/${UrlTracking.Map + UrlQuery.Map}`,\n};\n", "import { Err, Ok, Result } from 'ts-res';\nimport { Environment, ExternalPackageInfoType } from 'src/types';\nimport { KameleoonError } from 'src/kameleoonError';\nimport { JSONType } from 'src/campaignConfiguration';\nimport { Utilities } from 'src/utilities';\nimport { URL, UrlParameter, Header, UrlQuery, UrlEventType } from './constants';\nimport {\n  GetClientConfigurationResultType,\n  RequesterParamsType,\n  TrackDataParamsType,\n  TrackExperimentParamsType,\n  IExternalRequestDispatcher,\n  GetVisitorDataResultType,\n} from './types';\n\nexport interface IRequester {\n  getClientConfiguration: () => Promise<\n    Result<GetClientConfigurationResultType, KameleoonError>\n  >;\n  getRemoteData: (key: string) => Promise<Result<JSONType, KameleoonError>>;\n  trackExperiment: ({\n    variationId,\n    visitorCode,\n    experimentId,\n    isUnallocated,\n    body,\n  }: TrackExperimentParamsType) => Promise<Result<boolean, KameleoonError>>;\n  trackData: ({\n    visitorCode,\n    body,\n  }: TrackDataParamsType) => Promise<Result<boolean, KameleoonError>>;\n}\n\nexport class Requester implements IRequester {\n  private siteCode: string;\n  private environment?: Environment;\n  private requestDispatcher: IExternalRequestDispatcher;\n  private packageInfo: ExternalPackageInfoType;\n\n  constructor({\n    siteCode,\n    environment,\n    packageInfo,\n    requestDispatcher,\n  }: RequesterParamsType) {\n    this.requestDispatcher = requestDispatcher;\n    this.siteCode = siteCode;\n    this.environment = environment;\n    this.packageInfo = packageInfo;\n  }\n\n  public async getClientConfiguration(\n    timeStamp?: number,\n  ): Promise<Result<GetClientConfigurationResultType, KameleoonError>> {\n    const environmentParam = this.environment\n      ? UrlParameter.Environment + this.environment\n      : '';\n    const timeStampParam = timeStamp ? UrlParameter.Ts + timeStamp : '';\n\n    const requestUrl =\n      URL.CLIENT_CONFIGURATION +\n      UrlQuery.Mobile +\n      this.siteCode +\n      environmentParam +\n      timeStampParam;\n\n    try {\n      const response = await this.requestDispatcher.getClientConfiguration(\n        requestUrl,\n      );\n\n      return Ok(response as GetClientConfigurationResultType);\n    } catch (error) {\n      return Err(error as KameleoonError);\n    }\n  }\n\n  public async getRemoteData(\n    key: string,\n  ): Promise<Result<JSONType, KameleoonError>> {\n    const requestUrl: string =\n      URL.DATA_MAP + this.siteCode + UrlParameter.Key + encodeURI(key);\n\n    try {\n      const response = await this.requestDispatcher.getRemoteData(requestUrl);\n      return Ok(response);\n    } catch (error) {\n      return Err(error as KameleoonError);\n    }\n  }\n\n  public async getVisitorData(\n    visitorCode: string,\n  ): Promise<Result<GetVisitorDataResultType, KameleoonError>> {\n    const requestUrl: string =\n      URL.VISIT_DATA +\n      this.siteCode +\n      UrlParameter.VisitorCode +\n      visitorCode +\n      UrlParameter.MaxNumberPreviousVisits +\n      1 +\n      UrlParameter.CustomData +\n      true +\n      UrlParameter.CurrentVisit +\n      true;\n\n    try {\n      const response = await this.requestDispatcher.getRemoteData(requestUrl);\n      return Ok(response as GetVisitorDataResultType);\n    } catch (error) {\n      return Err(error as KameleoonError);\n    }\n  }\n\n  public async trackExperiment({\n    variationId,\n    visitorCode,\n    experimentId,\n    isUnallocated,\n    body,\n    userAgent,\n  }: TrackExperimentParamsType): Promise<Result<boolean, KameleoonError>> {\n    const url = this.getTrackingUrl(visitorCode);\n\n    const unallocatedAddition = !body\n      ? UrlEventType.Activity + UrlParameter.Nonce + Utilities.getNonce()\n      : '';\n    const bodyAddition = isUnallocated\n      ? unallocatedAddition\n      : UrlEventType.Experiment +\n        UrlParameter.Id +\n        experimentId +\n        UrlParameter.VariationId +\n        variationId +\n        UrlParameter.Nonce +\n        Utilities.getNonce();\n    const extendedBody = bodyAddition ? body + '\\n' + bodyAddition : body;\n\n    const headers = userAgent\n      ? {\n          [Header.UserAgent]: userAgent,\n        }\n      : undefined;\n\n    try {\n      const response = await this.requestDispatcher.track({\n        url,\n        headers,\n        body: extendedBody,\n      });\n\n      return Ok(response);\n    } catch (error) {\n      return Err(error as KameleoonError);\n    }\n  }\n\n  public async trackData({\n    visitorCode,\n    body,\n    userAgent,\n  }: TrackDataParamsType): Promise<Result<boolean, KameleoonError>> {\n    const url = this.getTrackingUrl(visitorCode);\n\n    const headers = userAgent\n      ? {\n          [Header.UserAgent]: userAgent,\n        }\n      : undefined;\n\n    const requestBody =\n      body || UrlEventType.Activity + UrlParameter.Nonce + Utilities.getNonce();\n\n    try {\n      const response = await this.requestDispatcher.track({\n        url,\n        headers,\n        body: requestBody,\n      });\n\n      return Ok(response);\n    } catch (error) {\n      return Err(error as KameleoonError);\n    }\n  }\n\n  private getTrackingUrl(visitorCode: string): string {\n    const { type, version } = this.packageInfo;\n\n    return (\n      URL.VISIT_EVENT +\n      this.siteCode +\n      UrlParameter.VisitorCode +\n      visitorCode +\n      UrlParameter.SdkName +\n      type.toLowerCase() +\n      UrlParameter.SdkVersion +\n      version\n    );\n  }\n}\n", "import {\n  JSONType,\n  FeatureFlagType,\n  ConfigurationDataType,\n} from 'src/campaignConfiguration';\nimport { Environment, ExternalPackageInfoType } from 'src/types';\nimport { Header } from './constants';\n\nexport type RequesterParamsType = {\n  siteCode: string;\n  environment?: Environment;\n  packageInfo: ExternalPackageInfoType;\n  requestDispatcher: IExternalRequestDispatcher;\n};\n\nexport type TrackExperimentParamsType = {\n  body: string;\n  variationId: number;\n  visitorCode: string;\n  experimentId: number;\n  isUnallocated: boolean;\n  userAgent?: string;\n};\n\nexport type TrackDataParamsType = {\n  visitorCode: string;\n  body: string;\n  userAgent?: string;\n};\n\ntype CustomDataEventType = {\n  sdk: {\n    name: string;\n    version: string;\n  };\n  itp: boolean;\n  time: number;\n  data: {\n    index: number;\n    valuesCountMap: {\n      [value: string]: number;\n    };\n    overwrite: boolean;\n    mappingIdentifier: boolean;\n  };\n};\n\nexport type VisitType = {\n  siteCode: string;\n  visitorCode: string;\n  customDataEvents: CustomDataEventType[];\n};\n\nexport type GetVisitorDataResultType = {\n  previousVisits?: [VisitType];\n  currentVisit?: VisitType;\n};\n\nexport type GetClientConfigurationResultType = Omit<\n  ConfigurationDataType,\n  'featureFlags'\n> & { featureFlagConfigurations: FeatureFlagType[] };\n\nexport enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n}\n\nconst EVENT_TYPE_KEYS = [\n  'customData',\n  'staticData',\n  'page',\n  'conversion',\n  'activity',\n  'experiment',\n] as const;\nconst PARAMETER_KEYS = [\n  'valuesCountMap',\n  'id',\n  'nonce',\n  'sdkName',\n  'sdkVersion',\n  'browserIndex',\n  'browserVersion',\n  'siteCode',\n  'environment',\n  'visitorCode',\n  'currentVisit',\n  'maxNumberPreviousVisits',\n  'customData',\n  'negative',\n  'revenue',\n  'title',\n  'referrersIndices',\n  'overwrite',\n  'index',\n  'href',\n  'variationId',\n  'deviceType',\n  'goalId',\n  'ts',\n  'key',\n] as const;\nconst TRACKING_KEYS = ['visit', 'map'] as const;\nconst QUERY_KEYS = ['sse', 'visitor', 'mobile', 'map', 'events'] as const;\n\nexport type TrackingType = Record<\n  Capitalize<(typeof TRACKING_KEYS)[number]>,\n  string\n>;\nexport type QueryType = Record<Capitalize<(typeof QUERY_KEYS)[number]>, string>;\nexport type ParameterType = Record<\n  Capitalize<(typeof PARAMETER_KEYS)[number]>,\n  string\n>;\nexport type EventType = Record<\n  Capitalize<(typeof EVENT_TYPE_KEYS)[number]>,\n  string\n>;\n\nexport type StrictTrackingRecord<T> = {\n  [K in keyof T]: `${Uncapitalize<K & string>}/`;\n};\nexport type StrictQueryRecord<T> = {\n  [K in keyof T]: `${Uncapitalize<K & string>}?siteCode=`;\n};\nexport type StrictEventTypeRecord<T> = {\n  [K in keyof T]: `eventType=${Uncapitalize<K & string>}`;\n};\nexport type StrictParameterRecord<T> = {\n  [K in keyof T]: `&${Uncapitalize<K & string>}=`;\n};\n\nexport type TrackParametersType = {\n  url: string;\n  headers?: Partial<Record<Header, string>>;\n  body: string;\n};\n\n/**\n * @interface an interface of External Request Dispatcher which will be used to perform requests.\n * */\nexport interface IExternalRequestDispatcher {\n  /**\n   * @method track - send a track request\n   * @param {TrackParametersType} parameters - track parameters\n   * */\n  track: (params: TrackParametersType) => Promise<boolean>;\n  /**\n   * @method getClientConfiguration - get client configuration\n   * @param {string} url - url address\n   * */\n  getClientConfiguration: (url: string) => Promise<JSONType>;\n  /**\n   * @method getRemoteData - get data from remote server of Kameleoon\n   * @param {string} url - url address\n   * */\n  getRemoteData: (url: string) => Promise<JSONType>;\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"GetClientConfigurationResultType\",{enumerable:!0,get:function get(){return _types.GetClientConfigurationResultType}}),Object.defineProperty(exports,\"GetVisitorDataResultType\",{enumerable:!0,get:function get(){return _types.GetVisitorDataResultType}}),Object.defineProperty(exports,\"Header\",{enumerable:!0,get:function get(){return _constants.Header}}),Object.defineProperty(exports,\"HttpMethod\",{enumerable:!0,get:function get(){return _types.HttpMethod}}),Object.defineProperty(exports,\"IExternalRequestDispatcher\",{enumerable:!0,get:function get(){return _types.IExternalRequestDispatcher}}),Object.defineProperty(exports,\"Requester\",{enumerable:!0,get:function get(){return _requester.Requester}}),Object.defineProperty(exports,\"TrackDataParamsType\",{enumerable:!0,get:function get(){return _types.TrackDataParamsType}}),Object.defineProperty(exports,\"TrackExperimentParamsType\",{enumerable:!0,get:function get(){return _types.TrackExperimentParamsType}}),Object.defineProperty(exports,\"TrackParametersType\",{enumerable:!0,get:function get(){return _types.TrackParametersType}}),Object.defineProperty(exports,\"URL\",{enumerable:!0,get:function get(){return _constants.URL}}),Object.defineProperty(exports,\"UrlEventType\",{enumerable:!0,get:function get(){return _constants.UrlEventType}}),Object.defineProperty(exports,\"UrlParameter\",{enumerable:!0,get:function get(){return _constants.UrlParameter}}),Object.defineProperty(exports,\"UrlQuery\",{enumerable:!0,get:function get(){return _constants.UrlQuery}}),Object.defineProperty(exports,\"VisitType\",{enumerable:!0,get:function get(){return _types.VisitType}});var _requester=require(\"./requester\"),_constants=require(\"./constants\"),_types=require(\"./types\");\n//# sourceMappingURL=index.js.map", "import {\n  Browser,\n  Conversion,\n  CustomData,\n  Device,\n  PageView,\n  UserAgent,\n} from './';\n\nexport type KameleoonDataItemType =\n  | BrowserDataType\n  | ConversionDataType\n  | CustomDataType\n  | DeviceDataType\n  | PageViewDataType\n  | UserAgentDataType;\n\n/**\n * @interface an interface of KameleoonData\n * each class instance will have url getter method\n * for handling url of different data types\n * */\nexport interface IKameleoonData {\n  readonly url: string;\n  readonly data: KameleoonDataItemType;\n}\n\n/**\n * @type a tuple of each possible type of data for `addData` method\n * of KameleoonClient\n * */\nexport type KameleoonDataType =\n  | Browser\n  | Conversion\n  | CustomData\n  | Device\n  | PageView\n  | UserAgent;\n\nexport type ActivityTimePropertyType = {\n  lastActivityTime: number;\n};\n\nexport type ExistingCustomDataType = NonNullable<\n  KameleoonVisitorDataType[KameleoonData.CustomData]\n>;\n\nexport type ExistingDataType<T extends KameleoonData> = NonNullable<\n  KameleoonVisitorDataType[T]\n>;\n\nexport type KameleoonVisitorDataType<T = ActivityTimePropertyType> = {\n  [KameleoonData.CustomData]?: {\n    [index: number]: (CustomDataType & T) | undefined;\n  };\n  [KameleoonData.Conversion]?: ConversionDataType & T;\n  [KameleoonData.UserAgent]?: UserAgentDataType & T;\n  [KameleoonData.PageView]?: PageViewDataType & T;\n  [KameleoonData.Browser]?: BrowserDataType & T;\n  [KameleoonData.Device]?: DeviceDataType & T;\n};\n\nexport enum KameleoonData {\n  CustomData = 'customData',\n  PageView = 'pageView',\n  Browser = 'browser',\n  Conversion = 'conversion',\n  Device = 'device',\n  UserAgent = 'userAgent',\n}\n\ntype SharedDataPropertiesType = {\n  type: KameleoonData;\n  nonce: string;\n};\n\nexport type BrowserDataType = {\n  browser: BrowserType;\n  version?: number;\n} & SharedDataPropertiesType;\n\nexport type ConversionDataType = {\n  goalId: number;\n  revenue: number;\n  negative: boolean;\n} & SharedDataPropertiesType;\n\nexport type CustomDataType = {\n  index: number;\n  value: string | string[];\n} & SharedDataPropertiesType;\n\nexport type DeviceDataType = {\n  device: DeviceType;\n} & SharedDataPropertiesType;\n\nexport type PageViewDataType = {\n  urlAddress: string;\n  title: string;\n  referrers?: number[];\n} & SharedDataPropertiesType;\n\nexport type UserAgentDataType = {\n  value: string;\n} & SharedDataPropertiesType;\n\n/**\n * @param {number} goalId - an id of a goal to track\n * @param {number | undefined} revenue - an optional parameter for revenue, default value is `0`\n * @param {boolean | undefined} negative - an optional parameter identifying whether the conversion should be removed, default value is `false`\n * */\nexport type ConversionParametersType = {\n  goalId: number;\n  revenue?: number;\n  negative?: boolean;\n};\n\n/**\n * @param {string} urlAddress - url address of the page to track\n * @param {string} title - title of the web page\n * @param {number[] | undefined} referrers - an optional parameter containing a list of referrersIndices, has no default value\n * */\nexport type PageViewParametersType = {\n  urlAddress: string;\n  title: string;\n  referrers?: number[];\n};\n\n/**\n * @readonly\n * @enum {string} an Enum containing all possible variants for device type\n * */\nexport enum DeviceType {\n  Phone = 'PHONE',\n  Tablet = 'TABLET',\n  Desktop = 'DESKTOP',\n}\n\n/**\n * @readonly\n * @enum {string} an Enum containing all possible variants for browser type\n * */\nexport enum BrowserType {\n  Chrome = 'CHROME',\n  InternetExplorer = 'IE',\n  Firefox = 'FIREFOX',\n  Safari = 'SAFARI',\n  Opera = 'OPERA',\n  Other = 'OTHER',\n}\n\nexport const BrowserIndexMap = {\n  [BrowserType.Chrome]: 0,\n  [BrowserType.InternetExplorer]: 1,\n  [BrowserType.Firefox]: 2,\n  [BrowserType.Safari]: 3,\n  [BrowserType.Opera]: 4,\n  [BrowserType.Other]: 5,\n} as const;\n", "import { UrlEventType, UrlParameter } from 'src/requester';\nimport { Utilities } from 'src/utilities';\nimport { CustomDataType, IKameleoonData, KameleoonData } from './types';\n\n/**\n * @class\n * CustomData - a class for creating an instance for user's custom data\n * */\nexport class CustomData implements IKameleoonData {\n  private index: number;\n  private value: string[];\n  private nonce: string;\n\n  /**\n   * @param {number} index - an index of custom data to be stored under in a state, an index of custom data can be specified in `Advanced Tools` section of Kameleoon Application\n   * @param {string[]} value - custom value to store under the specified id, value can be anything but has to be stringified to match the `string` type. *Note* value is variadic parameter and can be used as follows\n   * @example\n   * ```ts\n   * // - Single value\n   * const customData = new CustomData(0, 'value_1');\n   * // - Variadic number of values\n   * const customData = new CustomData(0, 'value_1', 'value_2', 'value_3');\n   * // - Array of values\n   * const values = ['value_1', 'value_2', 'value_3'];\n   * const customData = new CustomData(0, ...values);\n   * ```\n   * */\n  constructor(index: number, ...value: string[]) {\n    this.index = index;\n    this.value = value;\n    this.nonce = Utilities.getNonce();\n  }\n\n  /**\n   * @property url - url for the current data type used for events tracking\n   * */\n  get url(): string {\n    // --- Note ---\n    // If SDK is used in vanilla JS codebase, then you're also able to create an instance\n    // with no required data, we don't want send anything to tracking in that case\n    if (typeof this.index !== 'number') {\n      return '';\n    }\n\n    const uniqueValues = [...new Set(this.value)];\n    let resultValue: Record<string, 1> = {};\n\n    // --- Note ---\n    // Final value should look like this `{ \"value_1\": 1, \"value_2\": 1, \"value_3\": 1}`\n    // With no duplicates\n    uniqueValues.forEach((value) => {\n      resultValue[value] = 1;\n    });\n\n    if (!Object.keys(resultValue).length) {\n      return '';\n    }\n\n    return (\n      UrlEventType.CustomData +\n      UrlParameter.Index +\n      this.index +\n      UrlParameter.ValuesCountMap +\n      encodeURIComponent(JSON.stringify(resultValue)) +\n      UrlParameter.Overwrite +\n      String(true) +\n      UrlParameter.Nonce +\n      this.nonce\n    );\n  }\n\n  /**\n   * @property data - data of the current class instance\n   * */\n  get data(): CustomDataType {\n    return {\n      index: this.index,\n      value: this.value,\n      type: KameleoonData.CustomData,\n      nonce: this.nonce,\n    };\n  }\n}\n", "import { UrlEventType, UrlParameter } from 'src/requester';\nimport { Utilities } from 'src/utilities';\nimport {\n  ConversionDataType,\n  ConversionParametersType,\n  IKameleoonData,\n  KameleoonData,\n} from './types';\n\n/**\n * @class\n * Conversion - a class for creating an instance for conversion tracking\n * */\nexport class Conversion implements IKameleoonData {\n  private goalId: number;\n  private revenue: number;\n  private negative: boolean;\n  private nonce: string;\n\n  /**\n   * @param {ConversionParametersType} conversionParameters - an object with conversion parameters\n   * */\n  constructor({\n    goalId,\n    revenue = 0,\n    negative = false,\n  }: ConversionParametersType) {\n    this.goalId = goalId;\n    this.revenue = revenue;\n    this.negative = negative;\n    this.nonce = Utilities.getNonce();\n  }\n\n  /**\n   * @property url - url for the current data type used for events tracking\n   * */\n  get url(): string {\n    // --- Note ---\n    // If SDK is used in vanilla JS codebase, then you're also able to create an instance\n    // with no required data, we don't want send anything to tracking in that case\n    if (!this.goalId) {\n      return '';\n    }\n\n    return (\n      UrlEventType.Conversion +\n      UrlParameter.GoalId +\n      String(this.goalId) +\n      UrlParameter.Revenue +\n      String(this.revenue) +\n      UrlParameter.Negative +\n      String(this.negative) +\n      UrlParameter.Nonce +\n      this.nonce\n    );\n  }\n\n  /**\n   * @property data - data of the current class instance\n   * */\n  get data(): ConversionDataType {\n    return {\n      goalId: this.goalId,\n      revenue: this.revenue,\n      negative: this.negative,\n      type: KameleoonData.Conversion,\n      nonce: this.nonce,\n    };\n  }\n}\n", "import { UrlEventType, UrlParameter } from 'src/requester';\nimport { Utilities } from 'src/utilities';\nimport {\n  DeviceDataType,\n  DeviceType,\n  IKameleoonData,\n  KameleoonData,\n} from './types';\n\n/**\n * @class\n * Device - a class for creating an instance for device of a certain type\n * */\nexport class Device implements IKameleoonData {\n  private device: DeviceType;\n  private nonce: string;\n\n  /**\n   * @param {DeviceType} device - one of the available device types from `DeviceType` enum\n   * */\n  constructor(device: DeviceType) {\n    this.device = device;\n    this.nonce = Utilities.getNonce();\n  }\n\n  /**\n   * @property url - url for the current data type used for events tracking\n   * */\n  get url(): string {\n    // --- Note ---\n    // If SDK is used in vanilla JS codebase, then you're also able to create an instance\n    // with no required data, we don't want send anything to tracking in that case\n    if (!this.device) {\n      return '';\n    }\n\n    return (\n      UrlEventType.StaticData +\n      UrlParameter.DeviceType +\n      this.device +\n      UrlParameter.Nonce +\n      this.nonce\n    );\n  }\n\n  /**\n   * @property data - data of the current class instance\n   * */\n  get data(): DeviceDataType {\n    return {\n      device: this.device,\n      type: KameleoonData.Device,\n      nonce: this.nonce,\n    };\n  }\n}\n", "import { UrlEventType, UrlParameter } from 'src/requester';\nimport { Utilities } from 'src/utilities';\nimport {\n  BrowserDataType,\n  BrowserType,\n  BrowserIndexMap,\n  IKameleoonData,\n  KameleoonData,\n} from './types';\n\n/**\n * @class\n * Browser - a class for creating an instance for browser of a certain type\n * */\nexport class Browser implements IKameleoonData {\n  private browser: BrowserType;\n  private nonce: string;\n  private version?: number;\n\n  /**\n   * @param {BrowserType} browser - one of the browser types available for data, if browser can not be found in a list, it can be marked as `BrowserType.Other`\n   * @param {number | undefined} version - version of the browser, floating point number represents major and minor version of the browser\n   * @example\n   * const browser = new Browser(BrowserType.Chrome, 86);\n   * const browser = new Browser(BrowserType.Safari, 14.1);\n   * */\n  constructor(browser: BrowserType, version?: number) {\n    this.browser = browser;\n    this.version = version;\n    this.nonce = Utilities.getNonce();\n  }\n\n  /**\n   * @property url - url for the current data type used for events tracking\n   * */\n  get url(): string {\n    // --- Note ---\n    // If SDK is used in vanilla JS codebase, then you're also able to create an instance\n    // with no required data, we don't want send anything to tracking in that case\n    if (!this.browser) {\n      return '';\n    }\n\n    const browserVersion = this.version\n      ? UrlParameter.BrowserVersion + this.version\n      : '';\n\n    return (\n      UrlEventType.StaticData +\n      UrlParameter.BrowserIndex +\n      BrowserIndexMap[this.browser] +\n      browserVersion +\n      UrlParameter.Nonce +\n      this.nonce\n    );\n  }\n\n  /**\n   * @property data - data of the current class instance\n   * */\n  get data(): BrowserDataType {\n    return {\n      browser: this.browser,\n      type: KameleoonData.Browser,\n      version: this.version,\n      nonce: this.nonce,\n    };\n  }\n}\n", "import { UrlEventType, UrlParameter } from 'src/requester';\nimport { Utilities } from 'src/utilities';\nimport {\n  IKameleoonData,\n  KameleoonData,\n  PageViewDataType,\n  PageViewParametersType,\n} from './types';\n\n/**\n * @class\n * PageView - a class for creating an instance of a page view data\n * */\nexport class PageView implements IKameleoonData {\n  private urlAddress: string;\n  private title: string;\n  private nonce: string;\n  private referrers?: number[];\n\n  /**\n   * @param {PageViewParametersType} pageViewParameters - an object with page view parameters\n   * */\n  constructor({ urlAddress, title, referrers }: PageViewParametersType) {\n    this.urlAddress = urlAddress;\n    this.title = title;\n    this.referrers = referrers;\n    this.nonce = Utilities.getNonce();\n  }\n\n  /**\n   * @property url - url for the current data type used for events tracking\n   * */\n  get url(): string {\n    // --- Note ---\n    // If SDK is used in vanilla JS codebase, then you're also able to create an instance\n    // with no required data, we don't want send anything to tracking in that case\n    if (!this.urlAddress) {\n      return '';\n    }\n\n    const titleParameter = this.title\n      ? UrlParameter.Title + encodeURIComponent(this.title)\n      : '';\n\n    const referrersParameter = this.referrers?.length\n      ? UrlParameter.ReferrersIndices + JSON.stringify(this.referrers)\n      : '';\n\n    return (\n      UrlEventType.Page +\n      UrlParameter.Href +\n      encodeURIComponent(this.urlAddress) +\n      titleParameter +\n      referrersParameter +\n      UrlParameter.Nonce +\n      this.nonce\n    );\n  }\n\n  /**\n   * @property data - data of the current class instance\n   * */\n  get data(): PageViewDataType {\n    return {\n      urlAddress: this.urlAddress,\n      title: this.title,\n      referrers: this.referrers,\n      type: KameleoonData.PageView,\n      nonce: this.nonce,\n    };\n  }\n}\n", "import { Utilities } from 'src/utilities';\nimport { UserAgentDataType, IKameleoonData, KameleoonData } from './types';\n\n/**\n * @class\n * UserAgent - a class for creating an instance for user agent\n * */\nexport class UserAgent implements IKameleoonData {\n  private value: string;\n  private nonce: string;\n\n  constructor(value: string) {\n    this.value = value;\n    this.nonce = Utilities.getNonce();\n  }\n\n  /**\n   * @property url - url for the current data type used for events tracking\n   * */\n  get url(): string {\n    return '';\n  }\n\n  /**\n   * @property data - data of the current class instance\n   * */\n  get data(): UserAgentDataType {\n    return {\n      value: this.value,\n      type: KameleoonData.UserAgent,\n      nonce: this.nonce,\n    };\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"Browser\",{enumerable:!0,get:function get(){return _browser.Browser}}),Object.defineProperty(exports,\"BrowserDataType\",{enumerable:!0,get:function get(){return _types.BrowserDataType}}),Object.defineProperty(exports,\"BrowserIndexMap\",{enumerable:!0,get:function get(){return _types.BrowserIndexMap}}),Object.defineProperty(exports,\"BrowserType\",{enumerable:!0,get:function get(){return _types.BrowserType}}),Object.defineProperty(exports,\"Conversion\",{enumerable:!0,get:function get(){return _conversion.Conversion}}),Object.defineProperty(exports,\"ConversionDataType\",{enumerable:!0,get:function get(){return _types.ConversionDataType}}),Object.defineProperty(exports,\"ConversionParametersType\",{enumerable:!0,get:function get(){return _types.ConversionParametersType}}),Object.defineProperty(exports,\"CustomData\",{enumerable:!0,get:function get(){return _customData.CustomData}}),Object.defineProperty(exports,\"CustomDataType\",{enumerable:!0,get:function get(){return _types.CustomDataType}}),Object.defineProperty(exports,\"Device\",{enumerable:!0,get:function get(){return _device.Device}}),Object.defineProperty(exports,\"DeviceDataType\",{enumerable:!0,get:function get(){return _types.DeviceDataType}}),Object.defineProperty(exports,\"DeviceType\",{enumerable:!0,get:function get(){return _types.DeviceType}}),Object.defineProperty(exports,\"KameleoonData\",{enumerable:!0,get:function get(){return _types.KameleoonData}}),Object.defineProperty(exports,\"KameleoonDataItemType\",{enumerable:!0,get:function get(){return _types.KameleoonDataItemType}}),Object.defineProperty(exports,\"KameleoonDataType\",{enumerable:!0,get:function get(){return _types.KameleoonDataType}}),Object.defineProperty(exports,\"PageView\",{enumerable:!0,get:function get(){return _pageView.PageView}}),Object.defineProperty(exports,\"PageViewDataType\",{enumerable:!0,get:function get(){return _types.PageViewDataType}}),Object.defineProperty(exports,\"PageViewParametersType\",{enumerable:!0,get:function get(){return _types.PageViewParametersType}}),Object.defineProperty(exports,\"UserAgent\",{enumerable:!0,get:function get(){return _userAgent.UserAgent}}),Object.defineProperty(exports,\"UserAgentDataType\",{enumerable:!0,get:function get(){return _types.UserAgentDataType}});var _customData=require(\"./customData\"),_conversion=require(\"./conversion\"),_device=require(\"./device\"),_browser=require(\"./browser\"),_pageView=require(\"./pageView\"),_userAgent=require(\"./userAgent\"),_types=require(\"./types\");\n//# sourceMappingURL=index.js.map", "import { Ok, Result } from 'ts-res';\nimport { DeviceType, KameleoonData } from 'src/kameleoonData';\nimport { KameleoonError } from 'src/kameleoonError';\nimport { EvaluationDataType } from 'src/targeting/types';\nimport { ConditionDataType, ICondition } from './types';\n\nexport class DeviceCondition implements ICondition {\n  private device?: DeviceType | null;\n\n  constructor({ device }: ConditionDataType) {\n    this.device = device;\n  }\n\n  public evaluate({\n    targetingData,\n  }: EvaluationDataType): Result<boolean, KameleoonError> {\n    const deviceData = targetingData?.[KameleoonData.Device];\n\n    if (deviceData) {\n      const { device } = deviceData;\n\n      return Ok(device === this.device);\n    }\n\n    return Ok(false);\n  }\n}\n", "import { KameleoonVisitorDataType } from 'src/kameleoonData/types';\nimport { ExperimentVariationsType } from 'src/storage';\nimport { ExternalPackageInfoType } from 'src/types';\nimport { ConditionDataType, ConditionType } from './conditions';\nimport { TargetingNode } from './targetingNode';\n\nexport enum Operator {\n  And = 'AND',\n  Or = 'OR',\n}\n\nexport type NonLeafNodeType = {\n  left: TargetingNode;\n  right: TargetingNode;\n  value: Operator;\n};\n\nexport type LeafNodeType = {\n  left: undefined;\n  right: undefined;\n  value: ConditionType;\n};\n\nexport type NodeValueType = ConditionType | Operator;\n\nexport type ConditionLevelType = {\n  orOperators: boolean[];\n  conditions: ConditionDataType[];\n};\n\nexport type SegmentType = {\n  id: string;\n  name: string;\n  conditionsData: {\n    firstLevelOrOperators: boolean[];\n    firstLevel: ConditionLevelType[];\n  };\n};\n\nexport type NestedConditionGroupType = {\n  operators: Operator[];\n  conditions: ConditionDataType[];\n};\n\nexport type GroupedSegmentsType = {\n  topLevelOperators: Operator[];\n  nestedConditions: NestedConditionGroupType[];\n};\n\nexport type TargetingDataType = {\n  [visitorCode: string]: KameleoonVisitorDataType;\n};\n\nexport type EvaluationDataType = {\n  targetingData?: KameleoonVisitorDataType;\n  variationData: ExperimentVariationsType;\n  sdkInfo: ExternalPackageInfoType;\n  experimentId: number | null;\n  visitorCode: string;\n};\n\nexport enum MatchTypeCustomData {\n  TRUE = 'TRUE',\n  FALSE = 'FALSE',\n  EXACT = 'EXACT',\n  CONTAINS = 'CONTAINS',\n  REGULAR_EXPRESSION = 'REGULAR_EXPRESSION',\n  EQUAL = 'EQUAL',\n  LOWER = 'LOWER',\n  GREATER = 'GREATER',\n  UNDEFINED = 'UNDEFINED',\n  AMONG_VALUES = 'AMONG_VALUES',\n}\n\nexport enum MatchTypeVariation {\n  ANY = 'ANY',\n  EXACT = 'EXACT',\n}\n\nexport enum MatchTypeTest {\n  ALL = 'ALL',\n  TEST = 'TEST',\n  PERSO = 'PERSO',\n}\n\nexport enum MatchType {\n  EXACT = 'EXACT',\n  CONTAINS = 'CONTAINS',\n  REGULAR_EXPRESSION = 'REGULAR_EXPRESSION',\n}\n\nexport enum VersionMatchType {\n  GREATER = 'GREATER',\n  EQUAL = 'EQUAL',\n  LOWER = 'LOWER',\n}\n\nexport enum TargetingType {\n  PAGE_URL = 'PAGE_URL',\n  PAGE_TITLE = 'PAGE_TITLE',\n  LANDING_PAGE = 'LANDING_PAGE',\n  ORIGIN = 'ORIGIN',\n  ORIGIN_TYPE = 'ORIGIN_TYPE',\n  REFERRERS = 'REFERRERS',\n  NEW_VISITORS = 'NEW_VISITORS',\n  INTERESTS = 'INTERESTS',\n  BROWSER_LANGUAGE = 'BROWSER_LANGUAGE',\n  GEOLOCATION = 'GEOLOCATION',\n  DEVICE_TYPE = 'DEVICE_TYPE',\n  SCREEN_DIMENSION = 'SCREEN_DIMENSION',\n  VISITOR_IP = 'VISITOR_IP',\n  AD_BLOCKER = 'AD_BLOCKER',\n  PREVIOUS_PAGE = 'PREVIOUS_PAGE',\n  KEY_PAGES = 'KEY_PAGES',\n  PAGE_VIEWS = 'PAGE_VIEWS',\n  FIRST_VISIT = 'FIRST_VISIT',\n  LAST_VISIT = 'LAST_VISIT',\n  ACTIVE_SESSION = 'ACTIVE_SESSION',\n  TIME_SINCE_PAGE_LOAD = 'TIME_SINCE_PAGE_LOAD',\n  SAME_DAY_VISITS = 'SAME_DAY_VISITS',\n  VISITS = 'VISITS',\n  VISITS_BY_PAGE = 'VISITS_BY_PAGE',\n  VISITOR_CODE = 'VISITOR_CODE',\n  SDK_LANGUAGE = 'SDK_LANGUAGE',\n  INTERNAL_SEARCH_KEYWORDS = 'INTERNAL_SEARCH_KEYWORDS',\n  TABS_ON_SITE = 'TABS_ON_SITE',\n  CONVERSION_PROBABILITY = 'CONVERSION_PROBABILITY',\n  HEAT_SLICE = 'HEAT_SLICE',\n  SKY_STATUS = 'SKY_STATUS',\n  TEMPERATURE = 'TEMPERATURE',\n  DAY_NIGHT = 'DAY_NIGHT',\n  FORECAST_SKY_STATUS = 'FORECAST_SKY_STATUS',\n  FORECAST_TEMPERATURE = 'FORECAST_TEMPERATURE',\n  DAY_OF_WEEK = 'DAY_OF_WEEK',\n  TIME_RANGE = 'TIME_RANGE',\n  HOUR_MINUTE_RANGE = 'HOUR_MINUTE_RANGE',\n  JS_CODE = 'JS_CODE',\n  COOKIE = 'COOKIE',\n  EVENT = 'EVENT',\n  BROWSER = 'BROWSER',\n  OPERATING_SYSTEM = 'OPERATING_SYSTEM',\n  DOM_ELEMENT = 'DOM_ELEMENT',\n  MOUSE_OUT = 'MOUSE_OUT',\n  TARGET_EXPERIMENT = 'TARGET_EXPERIMENT',\n  TARGET_PERSONALIZATION = 'TARGET_PERSONALIZATION',\n  EXCLUSIVE_EXPERIMENT = 'EXCLUSIVE_EXPERIMENT',\n  CONVERSIONS = 'CONVERSIONS',\n  CUSTOM_DATUM = 'CUSTOM_DATUM',\n  YSANCE_SEGMENT = 'YSANCE_SEGMENT',\n  YSANCE_ATTRIBUT = 'YSANCE_ATTRIBUT',\n  TEALIUM_BADGE = 'TEALIUM_BADGE',\n  TEALIUM_AUDIENCE = 'TEALIUM_AUDIENCE',\n  PRICE_OF_DISPLAYED_PAGE = 'PRICE_OF_DISPLAYED_PAGE',\n  NUMBER_OF_VISITED_PAGES = 'NUMBER_OF_VISITED_PAGES',\n  VISITED_PAGES = 'VISITED_PAGES',\n  CUSTOM = 'CUSTOM',\n  EXPLICIT_TRIGGER = 'EXPLICIT_TRIGGER',\n}\n", "import { Err, Ok, Result } from 'ts-res';\nimport { KameleoonData, BrowserType, BrowserDataType } from 'src/kameleoonData';\nimport {\n  exhaustCheck,\n  KameleoonError,\n  KameleoonException,\n} from 'src/kameleoonError';\nimport { EvaluationDataType, VersionMatchType } from 'src/targeting/types';\nimport { ConditionDataType, ICondition } from './types';\n\nexport class BrowserCondition implements ICondition {\n  private browser?: BrowserType | null;\n  private version?: string | null;\n  private versionMatchType?: VersionMatchType | null;\n  private error?: KameleoonError;\n\n  constructor({ browser, version, versionMatchType }: ConditionDataType) {\n    this.browser = browser;\n    this.version = version;\n    this.versionMatchType = versionMatchType;\n  }\n\n  public evaluate({\n    targetingData,\n  }: EvaluationDataType): Result<boolean, KameleoonError> {\n    const browserData = targetingData?.[KameleoonData.Browser];\n\n    if (browserData) {\n      const result = this.checkCondition(browserData);\n\n      if (this.error) {\n        return Err(this.error);\n      }\n\n      return Ok(result);\n    }\n\n    return Ok(false);\n  }\n\n  private checkCondition(browserData: BrowserDataType): boolean {\n    const { browser, version } = browserData;\n\n    if (typeof this.browser !== 'string') {\n      return false;\n    }\n\n    if (typeof this.version !== 'string') {\n      return browser === this.browser;\n    }\n\n    if (!this.versionMatchType || typeof version !== 'number') {\n      return false;\n    }\n\n    const parsedVersion = parseFloat(this.version);\n\n    if (isNaN(parsedVersion)) {\n      this.error = new KameleoonError(\n        KameleoonException.VersionParse,\n        this.version,\n      );\n    }\n\n    switch (this.versionMatchType) {\n      case VersionMatchType.EQUAL:\n        return browser === this.browser && version === parsedVersion;\n      case VersionMatchType.GREATER:\n        return browser === this.browser && version > parsedVersion;\n      case VersionMatchType.LOWER:\n        return browser === this.browser && version < parsedVersion;\n      default:\n        exhaustCheck(this.versionMatchType);\n    }\n  }\n}\n", "import { Ok, Result } from 'ts-res';\nimport { KameleoonData } from 'src/kameleoonData';\nimport { KameleoonError } from 'src/kameleoonError';\nimport { EvaluationDataType } from 'src/targeting/types';\nimport { ConditionDataType, ICondition } from './types';\n\nexport class ConversionCondition implements ICondition {\n  private conditionValue?: number | null;\n\n  constructor({ goalId }: ConditionDataType) {\n    this.conditionValue = goalId;\n  }\n\n  public evaluate({\n    targetingData,\n  }: EvaluationDataType): Result<boolean, KameleoonError> {\n    const conversionData = targetingData?.[KameleoonData.Conversion];\n\n    if (conversionData) {\n      const { goalId } = conversionData;\n\n      return Ok(this.checkCondition(goalId));\n    }\n\n    return Ok(false);\n  }\n\n  private checkCondition(goalId: number): boolean {\n    if (!this.conditionValue) {\n      return false;\n    }\n\n    // --- Note ---\n    // `goalId` with value `-1` means any goal conversion\n    if (this.conditionValue === -1) {\n      return true;\n    }\n\n    return goalId === this.conditionValue;\n  }\n}\n", "import { Err, Ok, Result } from 'ts-res';\nimport { CustomDataType, KameleoonData } from 'src/kameleoonData';\nimport { KameleoonError, KameleoonException } from 'src/kameleoonError';\nimport { Utilities } from 'src/utilities';\nimport { EvaluationDataType, MatchTypeCustomData } from 'src/targeting/types';\nimport { ConditionDataType, ICondition } from './types';\n\nexport class CustomDataCondition implements ICondition {\n  private customDataIndex: number | null;\n  private matchType?: MatchTypeCustomData | null;\n  private conditionValue?: string | null;\n  private error?: KameleoonError;\n\n  constructor({ customDataIndex, valueMatchType, value }: ConditionDataType) {\n    this.customDataIndex = customDataIndex ? Number(customDataIndex) : null;\n    this.matchType = valueMatchType;\n    this.conditionValue = value;\n  }\n\n  public evaluate({\n    targetingData,\n  }: EvaluationDataType): Result<boolean, KameleoonError> {\n    if (typeof this.customDataIndex === 'number') {\n      const customData =\n        targetingData?.[KameleoonData.CustomData]?.[this.customDataIndex];\n\n      if (customData) {\n        const { value: customDataValue } = customData;\n        const result = this.checkCondition(customDataValue);\n\n        if (this.error) {\n          return Err(this.error);\n        }\n\n        return Ok(result);\n      }\n    }\n\n    return Ok(this.matchType === MatchTypeCustomData.UNDEFINED);\n  }\n\n  private checkCondition(customDataValue: CustomDataType['value']): boolean {\n    if (\n      typeof this.conditionValue !== 'string' &&\n      this.matchType !== MatchTypeCustomData.TRUE &&\n      this.matchType !== MatchTypeCustomData.FALSE\n    ) {\n      return false;\n    }\n\n    // --- Note ---\n    // `MatchTypeCustomData.TRUE` and `MatchTypeCustomData.FALSE` do not use condition value\n    // so we can safely assume that `this.conditionValue` is a string at this point\n    const conditionValue = this.conditionValue as string;\n\n    // --- Note ---\n    // `AMONG_VALUES` is checked separately to avoid recursion overhead\n    // for `JSON.parse` inside `this.parseArray`\n    if (this.matchType === MatchTypeCustomData.AMONG_VALUES) {\n      const result = this.parseArray(conditionValue);\n\n      if (!result.ok) {\n        this.error = result.error;\n\n        return false;\n      }\n\n      const resultData = new Set(result.data);\n\n      return Array.isArray(customDataValue)\n        ? customDataValue.some((value) => resultData.has(value))\n        : result.data.includes(customDataValue);\n    }\n\n    if (Array.isArray(customDataValue)) {\n      return customDataValue.some((value) => this.checkCondition(value));\n    }\n\n    switch (this.matchType) {\n      case MatchTypeCustomData.CONTAINS:\n        return customDataValue.includes(conditionValue);\n      case MatchTypeCustomData.EXACT:\n        return customDataValue === this.conditionValue;\n      case MatchTypeCustomData.REGULAR_EXPRESSION:\n        return Utilities.parseRegExp(conditionValue).test(customDataValue);\n      case MatchTypeCustomData.LOWER:\n        return Number(customDataValue) < Number(this.conditionValue);\n      case MatchTypeCustomData.EQUAL:\n        return Number(customDataValue) === Number(this.conditionValue);\n      case MatchTypeCustomData.GREATER:\n        return Number(customDataValue) > Number(this.conditionValue);\n      case MatchTypeCustomData.TRUE:\n        return customDataValue.toLowerCase() === 'true';\n      case MatchTypeCustomData.FALSE:\n        return customDataValue.toLowerCase() === 'false';\n      default:\n        return false;\n    }\n  }\n\n  private parseArray(value: string): Result<string[], KameleoonError> {\n    try {\n      const result = JSON.parse(value);\n\n      if (Array.isArray(result)) {\n        return Ok(result);\n      }\n    } catch (err) {\n      return Err(\n        new KameleoonError(KameleoonException.AmongValuesCheck, err, value),\n      );\n    }\n\n    return Ok([]);\n  }\n}\n", "import { Ok, Result } from 'ts-res';\nimport { KameleoonError } from 'src/kameleoonError';\nimport { EvaluationDataType } from 'src/targeting/types';\nimport { ICondition } from './types';\n\nexport class ExclusiveExperimentCondition implements ICondition {\n  evaluate({\n    experimentId,\n    variationData,\n  }: EvaluationDataType): Result<boolean, KameleoonError> {\n    const keys = Object.keys(variationData);\n    const isEmpty = !keys.length;\n    // --- Note ---\n    // Meaning the next variation assignment won't add new experiment\n    // but rather overwrite the existing one\n    const isExclusive = keys.length === 1 && keys[0] === String(experimentId);\n    const isSatisfied = isEmpty || isExclusive;\n\n    return Ok(isSatisfied);\n  }\n}\n", "import { Ok, Result } from 'ts-res';\nimport { KameleoonData } from 'src/kameleoonData';\nimport { exhaustCheck, KameleoonError } from 'src/kameleoonError';\nimport { Utilities } from 'src/utilities';\nimport { EvaluationDataType, MatchType } from 'src/targeting/types';\nimport { ConditionDataType, ICondition } from './types';\n\nexport class PageTitleCondition implements ICondition {\n  private matchType?: MatchType | null;\n  private conditionValue?: string | null;\n\n  constructor({ matchType, title }: ConditionDataType) {\n    this.matchType = matchType;\n    this.conditionValue = title;\n  }\n\n  public evaluate({\n    targetingData,\n  }: EvaluationDataType): Result<boolean, KameleoonError> {\n    const pageViewData = targetingData?.[KameleoonData.PageView];\n\n    if (pageViewData) {\n      const { title } = pageViewData;\n\n      return Ok(this.checkCondition(title));\n    }\n\n    return Ok(false);\n  }\n\n  private checkCondition(title: string): boolean {\n    if (!this.matchType || !this.conditionValue) {\n      return false;\n    }\n\n    switch (this.matchType) {\n      case MatchType.CONTAINS:\n        return title.includes(this.conditionValue);\n      case MatchType.EXACT:\n        return title === this.conditionValue;\n      case MatchType.REGULAR_EXPRESSION:\n        return Utilities.parseRegExp(this.conditionValue).test(title);\n      default:\n        exhaustCheck(this.matchType);\n    }\n  }\n}\n", "import { Ok, Result } from 'ts-res';\nimport { KameleoonData } from 'src/kameleoonData';\nimport { exhaustCheck, KameleoonError } from 'src/kameleoonError';\nimport { Utilities } from 'src/utilities';\nimport { EvaluationDataType, MatchType } from 'src/targeting/types';\nimport { ConditionDataType, ICondition } from './types';\n\nexport class PageUrlCondition implements ICondition {\n  private matchType?: MatchType | null;\n  private conditionValue?: string | null;\n\n  constructor({ matchType, url }: ConditionDataType) {\n    this.matchType = matchType;\n    this.conditionValue = url;\n  }\n\n  public evaluate({\n    targetingData,\n  }: EvaluationDataType): Result<boolean, KameleoonError> {\n    const pageViewData = targetingData?.[KameleoonData.PageView];\n\n    if (pageViewData) {\n      const { urlAddress } = pageViewData;\n\n      return Ok(this.checkCondition(urlAddress));\n    }\n\n    return Ok(false);\n  }\n\n  private checkCondition(url: string): boolean {\n    if (!this.matchType || !this.conditionValue) {\n      return false;\n    }\n\n    switch (this.matchType) {\n      case MatchType.CONTAINS:\n        return url.includes(this.conditionValue);\n      case MatchType.EXACT:\n        return url === this.conditionValue;\n      case MatchType.REGULAR_EXPRESSION:\n        return Utilities.parseRegExp(this.conditionValue).test(url);\n      default:\n        exhaustCheck(this.matchType);\n    }\n  }\n}\n", "import { Err, Ok, Result } from 'ts-res';\nimport { SdkLanguageType } from 'src/constants';\nimport {\n  exhaustCheck,\n  KameleoonError,\n  KameleoonException,\n} from 'src/kameleoonError';\nimport { ExternalPackageInfoType } from 'src/types';\nimport { EvaluationDataType, VersionMatchType } from 'src/targeting/types';\nimport { ConditionDataType, ICondition } from './types';\n\nexport class SdkLanguageCondition implements ICondition {\n  private sdkLanguage?: SdkLanguageType | null;\n  private conditionValue?: string | null;\n  private versionMatchType?: VersionMatchType | null;\n  private error?: KameleoonError;\n\n  constructor({ sdkLanguage, version, versionMatchType }: ConditionDataType) {\n    this.sdkLanguage = sdkLanguage;\n    this.conditionValue = version;\n    this.versionMatchType = versionMatchType;\n  }\n\n  public evaluate({\n    sdkInfo,\n  }: EvaluationDataType): Result<boolean, KameleoonError> {\n    const result = this.checkCondition(sdkInfo);\n\n    if (this.error) {\n      return Err(this.error);\n    }\n\n    return Ok(result);\n  }\n\n  private checkCondition(sdkInfo: ExternalPackageInfoType): boolean {\n    const { type: sdkType, version } = sdkInfo;\n\n    if (!this.sdkLanguage) {\n      return false;\n    }\n\n    if (typeof this.conditionValue !== 'string') {\n      return sdkType === this.sdkLanguage;\n    }\n\n    if (!this.versionMatchType) {\n      return false;\n    }\n\n    return (\n      sdkType === this.sdkLanguage &&\n      this.compareSemVer({\n        version,\n        compareVersion: this.conditionValue,\n        operator: this.versionMatchType,\n      })\n    );\n  }\n\n  private compareSemVer({\n    version,\n    compareVersion,\n    operator,\n  }: {\n    version: string;\n    compareVersion: string;\n    operator: VersionMatchType;\n  }): boolean {\n    const [major, minor, patch] = this.validateVersion(version);\n    const [compareMajor, compareMinor, comparePatch] =\n      this.validateVersion(compareVersion);\n\n    const [isMajorEqual, isMinorEqual, isPatchEqual] = [\n      major === compareMajor,\n      minor === compareMinor,\n      patch === comparePatch,\n    ];\n\n    switch (operator) {\n      case VersionMatchType.EQUAL:\n        return isMajorEqual && isMinorEqual && isPatchEqual;\n      case VersionMatchType.GREATER:\n        return (\n          major > compareMajor ||\n          (isMajorEqual && minor > compareMinor) ||\n          (isMajorEqual && isMinorEqual && patch > comparePatch)\n        );\n      case VersionMatchType.LOWER:\n        return (\n          major < compareMajor ||\n          (isMajorEqual && minor < compareMinor) ||\n          (isMajorEqual && isMinorEqual && patch < comparePatch)\n        );\n      default:\n        exhaustCheck(operator);\n    }\n  }\n\n  private validateVersion(version: string): [number, number, number] {\n    const versionSplit = version.split('.');\n    const isBadVersion = (item: string) =>\n      isNaN(parseInt(item)) || item.length === 0;\n\n    if (versionSplit.some(isBadVersion) || versionSplit.length !== 3) {\n      this.error = new KameleoonError(\n        KameleoonException.SemanticVersionParse,\n        version,\n      );\n\n      return [0, 0, 0];\n    }\n\n    return versionSplit.map((item) => parseInt(item)) as [\n      number,\n      number,\n      number,\n    ];\n  }\n}\n", "import { Ok, Result } from 'ts-res';\nimport { KameleoonError } from 'src/kameleoonError';\nimport { ExperimentVariationsType } from 'src/storage';\nimport { EvaluationDataType, MatchTypeVariation } from 'src/targeting/types';\nimport { ConditionDataType, ICondition } from './types';\n\nexport class TargetExperimentCondition implements ICondition {\n  private experimentId?: number | null;\n  private variationId?: number | null;\n  private matchType?: MatchTypeVariation | null;\n\n  constructor({\n    variation,\n    experiment,\n    variationMatchType,\n  }: ConditionDataType) {\n    this.experimentId = experiment;\n    this.variationId = variation;\n    this.matchType = variationMatchType;\n  }\n\n  public evaluate({\n    variationData,\n  }: EvaluationDataType): Result<boolean, KameleoonError> {\n    if (!this.experimentId) {\n      return Ok(false);\n    }\n\n    if (this.matchType === MatchTypeVariation.EXACT && !this.variationId) {\n      Ok(false);\n    }\n\n    const result = this.checkCondition({\n      variationId: this.variationId,\n      experimentId: this.experimentId,\n      variationData,\n    });\n\n    return Ok(result);\n  }\n\n  private checkCondition({\n    variationId,\n    experimentId,\n    variationData,\n  }: {\n    variationId?: number | null;\n    experimentId: number;\n    variationData: ExperimentVariationsType;\n  }): boolean {\n    const experimentIdString = String(experimentId);\n    const variation = variationData[experimentIdString];\n\n    switch (this.matchType) {\n      case MatchTypeVariation.EXACT: {\n        return variation?.variationId === variationId;\n      }\n      case MatchTypeVariation.ANY:\n        return Boolean(variation);\n      default:\n        return false;\n    }\n  }\n}\n", "import { Ok, Result } from 'ts-res';\nimport { exhaustCheck, KameleoonError } from 'src/kameleoonError';\nimport { Utilities } from 'src/utilities';\nimport { EvaluationDataType, MatchType } from 'src/targeting/types';\nimport { ConditionDataType, ICondition } from './types';\n\nexport class VisitorCodeCondition implements ICondition {\n  private matchType?: MatchType | null;\n  private conditionValue?: string | null;\n\n  constructor({ visitorCode, matchType }: ConditionDataType) {\n    this.matchType = matchType;\n    this.conditionValue = visitorCode;\n  }\n\n  public evaluate({\n    visitorCode,\n  }: EvaluationDataType): Result<boolean, KameleoonError> {\n    return Ok(this.checkCondition(visitorCode));\n  }\n\n  private checkCondition(visitorCode: string): boolean {\n    if (!this.matchType || !this.conditionValue) {\n      return false;\n    }\n\n    switch (this.matchType) {\n      case MatchType.CONTAINS:\n        return visitorCode.includes(this.conditionValue);\n      case MatchType.EXACT:\n        return visitorCode === this.conditionValue;\n      case MatchType.REGULAR_EXPRESSION:\n        return Utilities.parseRegExp(this.conditionValue).test(visitorCode);\n      default:\n        exhaustCheck(this.matchType);\n    }\n  }\n}\n", "import { Err, Ok, Result } from 'ts-res';\nimport { KameleoonError, KameleoonException } from 'src/kameleoonError';\nimport { TargetingType } from 'src/targeting/types';\nimport { BrowserCondition } from './browserCondition';\nimport { ConversionCondition } from './conversionCondition';\nimport { CustomDataCondition } from './customDataCondition';\nimport { DeviceCondition } from './deviceCondition';\nimport { ExclusiveExperimentCondition } from './exclusiveExperimentCondition';\nimport { PageTitleCondition } from './pageTitleCondition';\nimport { PageUrlCondition } from './pageUrlCondition';\nimport { SdkLanguageCondition } from './sdkLanguageCondition';\nimport { TargetExperimentCondition } from './targetExperimentCondition';\nimport { ConditionDataType, ConditionType } from './types';\nimport { VisitorCodeCondition } from './visitorCodeCondition';\n\nexport class ConditionFactory {\n  static createCondition(\n    data: ConditionDataType,\n  ): Result<ConditionType, KameleoonError> {\n    const { targetingType } = data;\n\n    switch (targetingType) {\n      case TargetingType.CUSTOM_DATUM:\n        return Ok(new CustomDataCondition(data));\n      case TargetingType.EXCLUSIVE_EXPERIMENT:\n        return Ok(new ExclusiveExperimentCondition());\n      case TargetingType.TARGET_EXPERIMENT:\n        return Ok(new TargetExperimentCondition(data));\n      case TargetingType.DEVICE_TYPE:\n        return Ok(new DeviceCondition(data));\n      case TargetingType.BROWSER:\n        return Ok(new BrowserCondition(data));\n      case TargetingType.PAGE_URL:\n        return Ok(new PageUrlCondition(data));\n      case TargetingType.PAGE_TITLE:\n        return Ok(new PageTitleCondition(data));\n      case TargetingType.CONVERSIONS:\n        return Ok(new ConversionCondition(data));\n      case TargetingType.VISITOR_CODE:\n        return Ok(new VisitorCodeCondition(data));\n      case TargetingType.SDK_LANGUAGE:\n        return Ok(new SdkLanguageCondition(data));\n      default:\n        return Err(\n          new KameleoonError(\n            KameleoonException.TargetingCondition,\n            targetingType,\n          ),\n        );\n    }\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});\n//# sourceMappingURL=types.js.map", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"BrowserCondition\",{enumerable:!0,get:function get(){return _browserCondition.BrowserCondition}}),Object.defineProperty(exports,\"ConditionDataType\",{enumerable:!0,get:function get(){return _types.ConditionDataType}}),Object.defineProperty(exports,\"ConditionFactory\",{enumerable:!0,get:function get(){return _conditionFactory.ConditionFactory}}),Object.defineProperty(exports,\"ConditionType\",{enumerable:!0,get:function get(){return _types.ConditionType}}),Object.defineProperty(exports,\"ConversionCondition\",{enumerable:!0,get:function get(){return _conversionCondition.ConversionCondition}}),Object.defineProperty(exports,\"CustomDataCondition\",{enumerable:!0,get:function get(){return _customDataCondition.CustomDataCondition}}),Object.defineProperty(exports,\"DeviceCondition\",{enumerable:!0,get:function get(){return _deviceCondition.DeviceCondition}}),Object.defineProperty(exports,\"ExclusiveExperimentCondition\",{enumerable:!0,get:function get(){return _exclusiveExperimentCondition.ExclusiveExperimentCondition}}),Object.defineProperty(exports,\"PageTitleCondition\",{enumerable:!0,get:function get(){return _pageTitleCondition.PageTitleCondition}}),Object.defineProperty(exports,\"PageUrlCondition\",{enumerable:!0,get:function get(){return _pageUrlCondition.PageUrlCondition}}),Object.defineProperty(exports,\"SdkLanguageCondition\",{enumerable:!0,get:function get(){return _sdkLanguageCondition.SdkLanguageCondition}}),Object.defineProperty(exports,\"TargetExperimentCondition\",{enumerable:!0,get:function get(){return _targetExperimentCondition.TargetExperimentCondition}}),Object.defineProperty(exports,\"VisitorCodeCondition\",{enumerable:!0,get:function get(){return _visitorCodeCondition.VisitorCodeCondition}});var _deviceCondition=require(\"./deviceCondition\"),_conditionFactory=require(\"./conditionFactory\"),_types=require(\"./types\"),_customDataCondition=require(\"./customDataCondition\"),_targetExperimentCondition=require(\"./targetExperimentCondition\"),_exclusiveExperimentCondition=require(\"./exclusiveExperimentCondition\"),_browserCondition=require(\"./browserCondition\"),_pageUrlCondition=require(\"./pageUrlCondition\"),_pageTitleCondition=require(\"./pageTitleCondition\"),_conversionCondition=require(\"./conversionCondition\"),_visitorCodeCondition=require(\"./visitorCodeCondition\"),_sdkLanguageCondition=require(\"./sdkLanguageCondition\");\n//# sourceMappingURL=index.js.map", "import { KameleoonError } from 'src/kameleoonError';\nimport { ConditionFactory, ConditionDataType } from './conditions';\nimport { NodeValueType, Operator } from './types';\n\nexport interface ITargetingNode {\n  readonly value?: NodeValueType;\n  readonly left?: ITargetingNode;\n  readonly right?: ITargetingNode;\n  readonly error?: KameleoonError;\n}\n\nexport class TargetingNode implements ITargetingNode {\n  private nodeValue?: NodeValueType;\n  private nodeError?: KameleoonError;\n  private leftChild?: ITargetingNode;\n  private rightChild?: ITargetingNode;\n  private inverseResult: boolean = false;\n\n  constructor(\n    value: ConditionDataType | Operator,\n    left?: ITargetingNode,\n    right?: ITargetingNode,\n  ) {\n    if (this.isOperator(value)) {\n      this.nodeValue = value;\n    } else {\n      const result = ConditionFactory.createCondition(value);\n      this.inverseResult = !(value.isInclude ?? true);\n\n      if (result.ok) {\n        this.nodeValue = result.data;\n      } else {\n        this.nodeError = result.error;\n      }\n    }\n\n    this.leftChild = left;\n    this.rightChild = right;\n  }\n\n  get value(): NodeValueType | undefined {\n    return this.nodeValue;\n  }\n\n  get error(): KameleoonError | undefined {\n    return this.nodeError;\n  }\n\n  get left(): ITargetingNode | undefined {\n    return this.leftChild;\n  }\n\n  get right(): ITargetingNode | undefined {\n    return this.rightChild;\n  }\n\n  get inverse(): boolean {\n    return this.inverseResult;\n  }\n\n  private isOperator(value: ConditionDataType | Operator): value is Operator {\n    return value === Operator.And || value === Operator.Or;\n  }\n}\n", "import { Result, Ok, Err } from 'ts-res';\nimport { KameleoonError, KameleoonException } from 'src/kameleoonError';\nimport { ITargetingNode, TargetingNode } from './targetingNode';\nimport {\n  EvaluationDataType,\n  GroupedSegmentsType,\n  LeafNodeType,\n  NestedConditionGroupType,\n  NonLeafNodeType,\n  Operator,\n  SegmentType,\n} from './types';\n\ninterface ITargetingTree {\n  evaluate: (data: EvaluationDataType) => Result<boolean, KameleoonError>;\n}\n\nexport class TargetingTree implements ITargetingTree {\n  private tree: TargetingNode;\n  private error: KameleoonError | null = null;\n\n  constructor(segment: SegmentType) {\n    const { nestedConditions, topLevelOperators } =\n      this.flattenSegment(segment);\n\n    // --- Note ---\n    // - Targeting tree is built bottom-up, it's the only way to both get the consistent logic\n    // (grouping nested conditions) and have human readable tree representation.\n    // - Here is an example of how tree is built (we use strict complete binary tree)\n    // Let's say we have such a condition `value < 10 || value > 20 && value < 30`\n    // Following is pseudo code for building tree:\n    //\n    // `const operators = [Operator.Or, Operator.And]`\n    // `const conditions = [\n    //     {type: Condition.Less, value: 10},\n    //     {type: Condition.Greater, value: 20},\n    //     {type: Condition.Less, value: 30},\n    // ]`\n    //\n    // After the first iteration we have node like this:\n    //    AND\n    //   /   \\\n    //  <30  >20\n    //\n    // After the second iteration tree looks as follows:\n    //         OR\n    //        /  \\\n    //    AND    <10\n    //   /   \\\n    //  <30  >20\n    //\n    // As you can see Leaf Nodes contain conditions and Non-Leaf Nodes contain logical operators\n    const nestedNodes = nestedConditions.map(({ conditions, operators }) => {\n      const nodes = conditions.map((condition) => new TargetingNode(condition));\n\n      return this.buildTree(nodes, operators);\n    });\n\n    this.tree = this.buildTree(nestedNodes, topLevelOperators);\n  }\n\n  public evaluate(data: EvaluationDataType): Result<boolean, KameleoonError> {\n    const result = this.evaluateNode(this.tree, data);\n\n    if (this.error) {\n      return Err(this.error);\n    }\n\n    return Ok(result);\n  }\n\n  private evaluateNode(node: TargetingNode, data: EvaluationDataType): boolean {\n    if (this.isLeafNode(node)) {\n      if (node.error) {\n        // --- Note ---\n        // Non-existing condition should not break targeting tree\n        // instead it should be treated as `true` condition\n        if (node.error.type === KameleoonException.TargetingCondition) {\n          return true;\n        }\n\n        return false;\n      }\n\n      const result = node.value.evaluate(data);\n\n      if (!result.ok) {\n        this.error = result.error;\n\n        return false;\n      }\n\n      return node.inverse ? !result.data : result.data;\n    }\n\n    if (this.isNonLeafNode(node)) {\n      switch (node.value) {\n        case Operator.And: {\n          return (\n            this.evaluateNode(node.left, data) &&\n            this.evaluateNode(node.right, data)\n          );\n        }\n        case Operator.Or: {\n          return (\n            this.evaluateNode(node.left, data) ||\n            this.evaluateNode(node.right, data)\n          );\n        }\n        default:\n          break;\n      }\n    }\n\n    return false;\n  }\n\n  private isLeafNode(node: ITargetingNode): node is LeafNodeType {\n    return !Boolean(node.left && node.right);\n  }\n\n  private isNonLeafNode(node: ITargetingNode): node is NonLeafNodeType {\n    return Boolean(\n      node.left &&\n        node.right &&\n        (node.value === Operator.Or || node.value === Operator.And),\n    );\n  }\n\n  // --- Note ---\n  // This method mutates `nodes` array\n  // It's done for the sake of performance\n  private buildTree(\n    nodes: TargetingNode[],\n    operators: Operator[],\n  ): TargetingNode {\n    if (nodes.length === 1) {\n      return nodes[0];\n    }\n\n    for (const operator of operators) {\n      const left = nodes.shift();\n      const right = nodes.shift();\n\n      const newNode = new TargetingNode(operator, left, right);\n      nodes.unshift(newNode);\n    }\n\n    return nodes[0];\n  }\n\n  private flattenSegment(segment: SegmentType): GroupedSegmentsType {\n    const { firstLevel: conditions, firstLevelOrOperators: operators } =\n      segment.conditionsData;\n\n    const nestedConditions: NestedConditionGroupType[] = [];\n\n    conditions.forEach((condition) => {\n      const { conditions: conditionList, orOperators } = condition;\n\n      const group = {\n        operators: this.convertOperators(orOperators),\n        conditions: conditionList,\n      };\n\n      nestedConditions.push(group);\n    });\n\n    return {\n      topLevelOperators: this.convertOperators(operators),\n      nestedConditions,\n    };\n  }\n\n  private convertOperators(operators: boolean[]): Operator[] {\n    return operators.map((operator) => (operator ? Operator.Or : Operator.And));\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"BrowserCondition\",{enumerable:!0,get:function get(){return _conditions.BrowserCondition}}),Object.defineProperty(exports,\"ConditionFactory\",{enumerable:!0,get:function get(){return _conditions.ConditionFactory}}),Object.defineProperty(exports,\"ConversionCondition\",{enumerable:!0,get:function get(){return _conditions.ConversionCondition}}),Object.defineProperty(exports,\"CustomDataCondition\",{enumerable:!0,get:function get(){return _conditions.CustomDataCondition}}),Object.defineProperty(exports,\"DeviceCondition\",{enumerable:!0,get:function get(){return _conditions.DeviceCondition}}),Object.defineProperty(exports,\"EvaluationDataType\",{enumerable:!0,get:function get(){return _types.EvaluationDataType}}),Object.defineProperty(exports,\"ExclusiveExperimentCondition\",{enumerable:!0,get:function get(){return _conditions.ExclusiveExperimentCondition}}),Object.defineProperty(exports,\"MatchType\",{enumerable:!0,get:function get(){return _types.MatchType}}),Object.defineProperty(exports,\"MatchTypeCustomData\",{enumerable:!0,get:function get(){return _types.MatchTypeCustomData}}),Object.defineProperty(exports,\"MatchTypeVariation\",{enumerable:!0,get:function get(){return _types.MatchTypeVariation}}),Object.defineProperty(exports,\"Operator\",{enumerable:!0,get:function get(){return _types.Operator}}),Object.defineProperty(exports,\"PageTitleCondition\",{enumerable:!0,get:function get(){return _conditions.PageTitleCondition}}),Object.defineProperty(exports,\"PageUrlCondition\",{enumerable:!0,get:function get(){return _conditions.PageUrlCondition}}),Object.defineProperty(exports,\"SdkLanguageCondition\",{enumerable:!0,get:function get(){return _conditions.SdkLanguageCondition}}),Object.defineProperty(exports,\"SegmentType\",{enumerable:!0,get:function get(){return _types.SegmentType}}),Object.defineProperty(exports,\"TargetExperimentCondition\",{enumerable:!0,get:function get(){return _conditions.TargetExperimentCondition}}),Object.defineProperty(exports,\"TargetingDataType\",{enumerable:!0,get:function get(){return _types.TargetingDataType}}),Object.defineProperty(exports,\"TargetingTree\",{enumerable:!0,get:function get(){return _targetingTree.TargetingTree}}),Object.defineProperty(exports,\"TargetingType\",{enumerable:!0,get:function get(){return _types.TargetingType}}),Object.defineProperty(exports,\"VersionMatchType\",{enumerable:!0,get:function get(){return _types.VersionMatchType}}),Object.defineProperty(exports,\"VisitorCodeCondition\",{enumerable:!0,get:function get(){return _conditions.VisitorCodeCondition}});var _targetingTree=require(\"./targetingTree\"),_types=require(\"./types\"),_conditions=require(\"./conditions\");\n//# sourceMappingURL=index.js.map", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});\n//# sourceMappingURL=types.js.map", "export const REAL_TIME_EVENT = 'configuration-update-event';\n", "import { URL } from 'src/requester';\nimport { UrlQuery } from 'src/requester/constants';\nimport { REAL_TIME_EVENT } from './constants';\nimport { IExternalEventSource, IExternalEventSourceConstructor } from './types';\n\nexport interface IEventSource {\n  open: (onEvent: (timestamp: number) => void) => void;\n  close: () => void;\n}\n\nexport class ExternalEventSource implements IEventSource {\n  private eventSource: IExternalEventSource;\n  private siteCode: string;\n\n  constructor(\n    siteCode: string,\n    externalEventSource: IExternalEventSourceConstructor,\n  ) {\n    const url = URL.SERVER_SENT_EVENTS + UrlQuery.Sse + siteCode;\n    const eventSource = externalEventSource.initialize(url);\n\n    this.eventSource = eventSource;\n    this.siteCode = siteCode;\n  }\n\n  public open(onEvent: (timestamp: number) => void): void {\n    this.eventSource.open({\n      onEvent,\n      siteCode: this.siteCode,\n      eventType: REAL_TIME_EVENT,\n    });\n  }\n\n  public close(): void {\n    this.eventSource.close();\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"EventSourceOpenParametersType\",{enumerable:!0,get:function get(){return _types.EventSourceOpenParametersType}}),Object.defineProperty(exports,\"ExternalEventSource\",{enumerable:!0,get:function get(){return _externalEventSource.ExternalEventSource}}),Object.defineProperty(exports,\"IEventSource\",{enumerable:!0,get:function get(){return _externalEventSource.IEventSource}}),Object.defineProperty(exports,\"IExternalEventSource\",{enumerable:!0,get:function get(){return _types.IExternalEventSource}}),Object.defineProperty(exports,\"IExternalEventSourceConstructor\",{enumerable:!0,get:function get(){return _types.IExternalEventSourceConstructor}}),Object.defineProperty(exports,\"REAL_TIME_EVENT\",{enumerable:!0,get:function get(){return _constants.REAL_TIME_EVENT}}),Object.defineProperty(exports,\"RealTimeEventType\",{enumerable:!0,get:function get(){return _types.RealTimeEventType}});var _types=require(\"./types\"),_externalEventSource=require(\"./externalEventSource\"),_constants=require(\"./constants\");\n//# sourceMappingURL=index.js.map", "import { ConfigurationDataType } from 'src/campaignConfiguration';\n\n/**\n * @constant default cleanup interval in minutes\n * */\nexport const CLEANUP_TARGETING_DATA_INTERVAL = 30;\n\nexport const DEFAULT_CONFIGURATION_DATA: ConfigurationDataType = {\n  experiments: [],\n  featureFlags: [],\n  customData: [],\n  configuration: {\n    realTimeUpdate: false,\n  },\n};\n", "import { Ok, Result } from 'ts-res';\nimport { KameleoonError } from 'src/kameleoonError/kameleoonError';\nimport { ClientSettingsType } from 'src/clientSettings/types';\nimport {\n  CustomData,\n  KameleoonData,\n  KameleoonDataType,\n} from 'src/kameleoonData';\nimport { Requester, GetClientConfigurationResultType } from 'src/requester';\nimport { SegmentType, TargetingDataType, TargetingTree } from 'src/targeting';\nimport { IStorage, ClientDataType } from 'src/storage';\nimport {\n  ExternalEventSource,\n  IEventSource,\n  IExternalEventSourceConstructor,\n} from 'src/eventSource';\nimport { Milliseconds } from 'src/types';\nimport {\n  CLEANUP_TARGETING_DATA_INTERVAL,\n  DEFAULT_CONFIGURATION_DATA,\n} from './constants';\nimport {\n  CampaignConfigurationParametersType,\n  ConfigurationDataType,\n  ConfigurationType,\n  CustomDataScope,\n  ExperimentItemType,\n  FeatureFlagType,\n  UnsentTargetingDataType,\n  UnsentVisitorTargetingDataType,\n  UpdateClientConfigurationParameters,\n  UpdateType,\n} from './types';\nimport { Utilities } from 'src/utilities';\nimport {\n  ExistingCustomDataType,\n  ExistingDataType,\n} from 'src/kameleoonData/types';\nimport { OfflineTracking } from 'src/storage/types';\n\ninterface ICampaignConfiguration {\n  initialize: (useCache?: boolean) => Promise<Result<void, KameleoonError>>;\n  addTargetingData: (\n    visitorCode: string,\n    ...data: KameleoonDataType[]\n  ) => Result<void, KameleoonError>;\n  getUnsentData: (\n    visitorCode: string,\n  ) => UnsentTargetingDataType[string] | undefined;\n  clearUnsentData: (visitorCode: string) => void;\n  isPersistentCustomData: (dataItem: KameleoonDataType) => boolean;\n  onConfigurationUpdate: (callback: () => void) => void;\n  readonly experiments: ExperimentItemType[];\n  readonly storedTargetingData: TargetingDataType;\n  readonly featureFlags: FeatureFlagType[];\n  readonly configuration: ConfigurationType;\n  readonly unsentDataVisitors: string[];\n}\n\nexport class CampaignConfiguration implements ICampaignConfiguration {\n  private configurationUpdateCallback?: () => void;\n  private updateConfigurationIntervalId: NodeJS.Timer | null = null;\n  private updateType: UpdateType = UpdateType.Idle;\n  private targetingDataIntervalId: NodeJS.Timer | null = null;\n  private unsentTargetingData: UnsentTargetingDataType = {};\n  private targetingData: TargetingDataType = {};\n  private targetingTrees: Map<string, TargetingTree> = new Map();\n  private configurationData: ConfigurationDataType = DEFAULT_CONFIGURATION_DATA;\n  private settings: ClientSettingsType;\n  private lastUpdate: Date;\n  private storage: IStorage<ClientDataType>;\n  private offlineTrackingStorage: IStorage<OfflineTracking>;\n  private requester: Requester;\n  private eventSource?: IEventSource;\n  private externalEventSource: IExternalEventSourceConstructor;\n  private externalClientConfiguration?: GetClientConfigurationResultType;\n  private targetingDataLifetime: number =\n    CLEANUP_TARGETING_DATA_INTERVAL * Milliseconds.Minute;\n  private localCustomDataIndexes: Set<number> = new Set();\n  private persistentCustomDataIndexes: Set<number> = new Set();\n\n  constructor({\n    settings,\n    storage,\n    requester,\n    externalClientConfiguration,\n    targetingCleanupInterval,\n    offlineTrackingStorage,\n    externalEventSource,\n  }: CampaignConfigurationParametersType) {\n    this.requester = requester;\n    this.settings = settings;\n    this.lastUpdate = new Date();\n    this.storage = storage;\n    this.readStorageData();\n    this.externalClientConfiguration = externalClientConfiguration;\n    this.offlineTrackingStorage = offlineTrackingStorage;\n    this.externalEventSource = externalEventSource;\n\n    if (targetingCleanupInterval) {\n      this.targetingDataLifetime =\n        targetingCleanupInterval * Milliseconds.Minute;\n\n      const cleanupIntervalMinutes =\n        targetingCleanupInterval < 0 ? 1 : targetingCleanupInterval;\n\n      // --- Note ---\n      // We can not make delayed code execution recoverable, as it might lead\n      // to targeting data storage size overflow\n      try {\n        this.targetingDataIntervalId = setInterval(\n          this.cleanupOutdatedTargetingData.bind(this),\n          cleanupIntervalMinutes * Milliseconds.Minute,\n        );\n      } catch (err) {\n        if (this.targetingDataIntervalId) {\n          clearInterval(this.targetingDataIntervalId);\n        }\n\n        throw err;\n      }\n    }\n  }\n\n  public async initialize(\n    useCache?: boolean,\n  ): Promise<Result<void, KameleoonError>> {\n    const isExternalConfiguration = Boolean(this.externalClientConfiguration);\n    const shouldUpdate = this.checkShouldUpdate(isExternalConfiguration);\n\n    if (shouldUpdate) {\n      const updateResult = await this.updateClientConfiguration({ useCache });\n\n      if (!updateResult.ok) {\n        return updateResult;\n      }\n\n      // --- Note ---\n      // If update type is being toggled `initialize` will be called again\n      // so we don't need to continue execution here\n      const isUpdateTypeToggled = updateResult.data;\n\n      if (isUpdateTypeToggled) {\n        return Ok();\n      }\n    }\n\n    if (isExternalConfiguration) {\n      this.handleExternalUpdates();\n\n      return Ok();\n    }\n\n    if (this.updateType === UpdateType.RealTime && !this.eventSource) {\n      this.updateType = UpdateType.Idle;\n      this.handleRealTimeUpdates(useCache);\n\n      return Ok();\n    }\n\n    if (this.updateType === UpdateType.Polling) {\n      this.handlePollingUpdates(useCache);\n    }\n\n    return Ok();\n  }\n\n  private cleanupHandlers(): void {\n    if (this.eventSource) {\n      this.eventSource.close();\n    }\n\n    if (this.updateConfigurationIntervalId) {\n      clearInterval(this.updateConfigurationIntervalId);\n    }\n  }\n\n  private handleExternalUpdates(): void {\n    this.cleanupHandlers();\n\n    const {\n      configuration,\n      customData,\n      experiments,\n      featureFlagConfigurations,\n    } = this.externalClientConfiguration!;\n\n    this.configurationData = {\n      customData,\n      configuration,\n      experiments,\n      featureFlags: featureFlagConfigurations,\n    };\n  }\n\n  private handleRealTimeUpdates(useCache?: boolean): void {\n    this.cleanupHandlers();\n\n    this.eventSource = new ExternalEventSource(\n      this.settings.siteCode,\n      this.externalEventSource,\n    );\n\n    const updateEventCallback = (timeStamp: number) => {\n      this.updateClientConfiguration({ useCache, timeStamp });\n\n      if (this.configurationUpdateCallback) {\n        this.configurationUpdateCallback();\n      }\n    };\n\n    this.eventSource.open(updateEventCallback);\n  }\n\n  private handlePollingUpdates(useCache?: boolean): void {\n    // --- Note ---\n    // If `initialize` is called again the interval will be cleared\n    // so theoretically we will constantly defer config update\n    // but `this.lastUpdate` with `checkShouldUpdate` will prevent that\n    this.cleanupHandlers();\n\n    // --- Note ---\n    // Same as targeting data interval we don't want to make failed configuration\n    // retrieval recoverable\n    try {\n      this.updateConfigurationIntervalId = setInterval(\n        () => this.updateClientConfiguration.bind(this)({ useCache }),\n        this.settings.updateInterval,\n      );\n    } catch (err) {\n      if (this.updateConfigurationIntervalId) {\n        clearInterval(this.updateConfigurationIntervalId);\n      }\n\n      throw err;\n    }\n  }\n\n  public addTargetingData(\n    visitorCode: string,\n    ...data: KameleoonDataType[]\n  ): Result<void, KameleoonError> {\n    if (!(visitorCode in this.targetingData)) {\n      this.targetingData[visitorCode] = {};\n    }\n\n    // --- Note ---\n    // Following code is optimized for performance:\n    // - We don't want to copy the whole object every time we add new data\n    // - So we are manually checking the keys existence and mutating targeting data directly\n    // - Numerous type casts are required because we can't narrow down nested `this.targetingData` types by using assertion functions\n    data.forEach((dataItem) => {\n      // --- Custom data case ---\n      if (Utilities.isCustomData(dataItem)) {\n        const customData = {\n          ...dataItem.data,\n          lastActivityTime: Date.now(),\n        };\n        const hasCustomDataKey =\n          KameleoonData.CustomData in this.targetingData[visitorCode];\n\n        // -- Change directly if `[key]` exists\n        if (hasCustomDataKey) {\n          (\n            this.targetingData[visitorCode][\n              customData.type\n            ] as ExistingCustomDataType\n          )[customData.index] = customData;\n        } else {\n          // -- Change data by creating new `[key]` and `[index]`\n          this.targetingData[visitorCode] = {\n            ...this.targetingData[visitorCode],\n            [customData.type]: {\n              ...this.targetingData[visitorCode][customData.type],\n              [customData.index]: customData,\n            },\n          };\n        }\n        // --- Other data types case ---\n      } else {\n        const data = { ...dataItem.data, lastActivityTime: Date.now() };\n        const hasDataKey =\n          dataItem.data.type in this.targetingData[visitorCode];\n\n        // -- Changing data by `[key]` if it exists\n        if (hasDataKey) {\n          (this.targetingData[visitorCode][\n            dataItem.data.type\n          ] as ExistingDataType<typeof dataItem.data.type>) = data;\n        } else {\n          // -- Change data by creating new `[key]`\n          this.targetingData[visitorCode] = {\n            ...this.targetingData[visitorCode],\n            [dataItem.data.type]: data,\n          };\n        }\n      }\n    });\n\n    // --- Note ---\n    // `targetingData` should not refresh `lastUpdate` time\n    const result = this.updateStorageData(this.lastUpdate);\n\n    if (result.ok) {\n      data.forEach((dataItem) => {\n        // --- Note ---\n        // We assume `this.unsentTargetingData[visitorCode]` is always defined further in the code\n        if (!this.unsentTargetingData[visitorCode]) {\n          this.unsentTargetingData[visitorCode] = new Map();\n        }\n\n        let key: KameleoonData | number;\n\n        if (Utilities.isCustomData(dataItem)) {\n          if (this.localCustomDataIndexes.has(dataItem.data.index)) {\n            return;\n          }\n\n          key = dataItem.data.index;\n        } else {\n          key = dataItem.data.type;\n        }\n\n        this.unsentTargetingData[visitorCode]!.set(key, dataItem);\n      });\n    }\n\n    return result;\n  }\n\n  public getUnsentData(\n    visitorCode: string,\n  ): UnsentTargetingDataType[string] | undefined {\n    return this.unsentTargetingData[visitorCode];\n  }\n\n  public clearUnsentData(visitorCode: string): void {\n    const dataItems = this.unsentTargetingData[visitorCode]?.values();\n\n    if (dataItems && this.persistentCustomDataIndexes.size) {\n      const persistentCustomData: UnsentVisitorTargetingDataType = new Map();\n\n      for (const dataItem of dataItems) {\n        if (this.isPersistentCustomData(dataItem)) {\n          persistentCustomData.set(dataItem.data.index, dataItem);\n        }\n      }\n\n      if (persistentCustomData.size) {\n        this.unsentTargetingData[visitorCode] = persistentCustomData;\n        return;\n      }\n    }\n\n    delete this.unsentTargetingData[visitorCode];\n  }\n\n  public getTargetingTree(segment: SegmentType): TargetingTree {\n    if (!this.targetingTrees.has(segment.id)) {\n      const targetingTree = new TargetingTree(segment);\n\n      this.targetingTrees.set(segment.id, new TargetingTree(segment));\n\n      return targetingTree;\n    }\n\n    return this.targetingTrees.get(segment.id) as TargetingTree;\n  }\n\n  public onConfigurationUpdate(callback: () => void): void {\n    this.configurationUpdateCallback = callback;\n  }\n\n  public isPersistentCustomData(\n    dataItem: KameleoonDataType,\n  ): dataItem is CustomData {\n    if (!this.persistentCustomDataIndexes.size) {\n      return false;\n    }\n\n    if (Utilities.isCustomData(dataItem)) {\n      return this.persistentCustomDataIndexes.has(dataItem.data.index);\n    }\n\n    return false;\n  }\n\n  get unsentDataVisitors(): string[] {\n    return Object.keys(this.unsentTargetingData);\n  }\n\n  get storedTargetingData(): TargetingDataType {\n    return this.targetingData;\n  }\n\n  get experiments(): ExperimentItemType[] {\n    return this.configurationData.experiments;\n  }\n\n  get featureFlags(): FeatureFlagType[] {\n    return this.configurationData.featureFlags;\n  }\n\n  get configuration(): ConfigurationType {\n    return this.configurationData.configuration;\n  }\n\n  private checkShouldUpdate(skipChecks = false): boolean {\n    const { featureFlags, experiments, configuration } = this.configurationData;\n    const { updateInterval } = this.settings;\n\n    // --- Note ---\n    // Following `updateType` logic is done for client side\n    // edge cases where we have previous campaigns on storage already, but we still want\n    // to initialize SSE/Polling after page reload\n    if (skipChecks) {\n      this.updateType = UpdateType.Idle;\n\n      return false;\n    }\n\n    this.updateType = configuration.realTimeUpdate\n      ? UpdateType.RealTime\n      : UpdateType.Polling;\n\n    if (!featureFlags.length && !experiments.length) {\n      return true;\n    }\n\n    const lastUpdateTime = this.lastUpdate.getTime();\n    const updateWindowEdge = Date.now() - updateInterval;\n\n    return lastUpdateTime < updateWindowEdge;\n  }\n\n  private cleanupOutdatedTargetingData(): void {\n    const currentTime = Date.now();\n\n    for (const [visitorCode, kameleoonVisitorData] of Object.entries(\n      this.targetingData,\n    )) {\n      const { customData, ...rest } = kameleoonVisitorData;\n\n      if (customData) {\n        for (const [index, dataItem] of Object.entries(customData)) {\n          if (dataItem) {\n            const isDataExpired =\n              dataItem.lastActivityTime + this.targetingDataLifetime <\n              currentTime;\n            const existingData = kameleoonVisitorData[KameleoonData.CustomData];\n\n            if (isDataExpired && existingData) {\n              delete existingData[Number(index)];\n            }\n\n            if (existingData && !Object.keys(existingData).length) {\n              delete kameleoonVisitorData[KameleoonData.CustomData];\n            }\n          }\n        }\n      }\n\n      for (const [key, dataItem] of Object.entries(rest)) {\n        const isDataExpired =\n          dataItem.lastActivityTime + this.targetingDataLifetime < currentTime;\n\n        if (isDataExpired) {\n          delete kameleoonVisitorData[key as KameleoonData];\n        }\n      }\n\n      if (!Object.keys(this.targetingData[visitorCode]).length) {\n        delete this.targetingData[visitorCode];\n      }\n    }\n\n    // --- Note ---\n    // `targetingData` should not refresh `lastUpdate` time\n    this.updateStorageData(this.lastUpdate).throw();\n  }\n\n  private readStorageData(): void {\n    const result = this.storage.read();\n\n    if (result.ok) {\n      const { kameleoonTargetingData, kameleoonConfiguration, lastUpdate } =\n        result.data;\n\n      this.configurationData = kameleoonConfiguration;\n      this.targetingData = kameleoonTargetingData;\n      this.lastUpdate = new Date(Date.parse(lastUpdate));\n    }\n  }\n\n  private clearTargetingTrees(): void {\n    this.targetingTrees.clear();\n  }\n\n  /**\n   * Updates client configuration\n   *\n   * @param useCache - if true, will not update configuration if it is already present (for _offline_ mode)\n   * @param timeStamp - timestamp for real-time configuration update\n   *\n   * @returns `true` if current update type should be toggled (SSE/Polling)\n   */\n  private async updateClientConfiguration({\n    useCache = false,\n    timeStamp,\n  }: UpdateClientConfigurationParameters = {}): Promise<\n    Result<boolean, KameleoonError>\n  > {\n    const clientConfigurationResult =\n      await this.requester.getClientConfiguration(timeStamp);\n\n    if (!clientConfigurationResult.ok) {\n      const { featureFlags, experiments } = this.configurationData;\n\n      if (useCache && featureFlags.length && experiments.length) {\n        return Ok(true);\n      }\n\n      return clientConfigurationResult;\n    }\n\n    Utilities.sendOfflineTracking({\n      storage: this.offlineTrackingStorage,\n      requester: this.requester,\n    });\n\n    // --- Note ---\n    // `featureFlags` field is omitted (v1)\n    // instead `featureFlagConfigurations` is used (v2)\n    const {\n      configuration,\n      experiments,\n      featureFlagConfigurations,\n      customData,\n    } = clientConfigurationResult.data;\n\n    this.configurationData = {\n      configuration,\n      experiments,\n      featureFlags: featureFlagConfigurations,\n      customData,\n    };\n\n    if (customData?.length) {\n      const customDataLocalOnlyIndexes: number[] = [];\n      const persistentCustomDataIndexes: number[] = [];\n\n      customData.forEach((customData) => {\n        if (customData.localOnly) {\n          customDataLocalOnlyIndexes.push(customData.index);\n        }\n\n        if (customData.scope === CustomDataScope.Visitor) {\n          persistentCustomDataIndexes.push(customData.index);\n        }\n      });\n\n      if (customDataLocalOnlyIndexes.length) {\n        this.localCustomDataIndexes = new Set(customDataLocalOnlyIndexes);\n      }\n\n      if (persistentCustomDataIndexes.length) {\n        this.persistentCustomDataIndexes = new Set(persistentCustomDataIndexes);\n      }\n    }\n\n    this.clearTargetingTrees();\n\n    const result = this.updateStorageData(new Date());\n\n    if (!result.ok) {\n      return result;\n    }\n\n    const updateType = configuration.realTimeUpdate\n      ? UpdateType.RealTime\n      : UpdateType.Polling;\n\n    const toggleUpdateType = updateType !== this.updateType;\n\n    if (toggleUpdateType) {\n      this.updateType = updateType;\n      await this.initialize(useCache);\n    }\n\n    return Ok(toggleUpdateType);\n  }\n\n  private updateStorageData(lastUpdate: Date): Result<void, KameleoonError> {\n    this.lastUpdate = lastUpdate;\n\n    const data: ClientDataType = {\n      kameleoonTargetingData: this.targetingData,\n      kameleoonConfiguration: this.configurationData,\n      lastUpdate: lastUpdate.toString(),\n    };\n\n    return this.storage.write(data);\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"CLEANUP_TARGETING_DATA_INTERVAL\",{enumerable:!0,get:function get(){return _constants.CLEANUP_TARGETING_DATA_INTERVAL}}),Object.defineProperty(exports,\"CampaignConfiguration\",{enumerable:!0,get:function get(){return _campaignConfiguration.CampaignConfiguration}}),Object.defineProperty(exports,\"CampaignConfigurationType\",{enumerable:!0,get:function get(){return _types.CampaignConfigurationType}}),Object.defineProperty(exports,\"ConfigurationDataType\",{enumerable:!0,get:function get(){return _types.ConfigurationDataType}}),Object.defineProperty(exports,\"CustomDataConfigurationType\",{enumerable:!0,get:function get(){return _types.CustomDataConfigurationType}}),Object.defineProperty(exports,\"CustomDataScope\",{enumerable:!0,get:function get(){return _types.CustomDataScope}}),Object.defineProperty(exports,\"ExperimentItemType\",{enumerable:!0,get:function get(){return _types.ExperimentItemType}}),Object.defineProperty(exports,\"FeatureFlagType\",{enumerable:!0,get:function get(){return _types.FeatureFlagType}}),Object.defineProperty(exports,\"FeatureVariableType\",{enumerable:!0,get:function get(){return _types.FeatureVariableType}}),Object.defineProperty(exports,\"JSONType\",{enumerable:!0,get:function get(){return _types.JSONType}}),Object.defineProperty(exports,\"JSONValue\",{enumerable:!0,get:function get(){return _types.JSONValue}}),Object.defineProperty(exports,\"RespoolTimeType\",{enumerable:!0,get:function get(){return _types.RespoolTimeType}}),Object.defineProperty(exports,\"RuleItemType\",{enumerable:!0,get:function get(){return _types.RuleItemType}}),Object.defineProperty(exports,\"RuleType\",{enumerable:!0,get:function get(){return _types.RuleType}}),Object.defineProperty(exports,\"VariationByExpositionType\",{enumerable:!0,get:function get(){return _types.VariationByExpositionType}});var _types=require(\"./types\"),_campaignConfiguration=require(\"./campaignConfiguration\"),_constants=require(\"./constants\");\n//# sourceMappingURL=index.js.map", "import { Environment, Milliseconds, SDKConfigurationType } from 'src/types';\nimport { ClientSettingsType } from './types';\n\nexport interface IClientSettings {\n  readonly settings: ClientSettingsType;\n}\n\nexport class ClientSettings implements IClientSettings {\n  private updateInterval: number = 60 * Milliseconds.Minute;\n  private environment?: Environment;\n  private siteCode: string;\n\n  constructor(siteCode: string, configuration?: Partial<SDKConfigurationType>) {\n    this.siteCode = siteCode;\n\n    if (configuration?.environment) {\n      this.environment = configuration.environment;\n    }\n\n    if (configuration?.updateInterval) {\n      if (configuration.updateInterval < 1) {\n        this.updateInterval = 1 * Milliseconds.Minute;\n      }\n\n      this.updateInterval = configuration.updateInterval * Milliseconds.Minute;\n    }\n  }\n\n  get settings(): ClientSettingsType {\n    return {\n      updateInterval: this.updateInterval,\n      environment: this.environment,\n      siteCode: this.siteCode,\n    };\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});\n//# sourceMappingURL=types.js.map", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"ClientSettings\",{enumerable:!0,get:function get(){return _clientSettings.ClientSettings}}),Object.defineProperty(exports,\"ClientSettingsType\",{enumerable:!0,get:function get(){return _types.ClientSettingsType}});var _clientSettings=require(\"./clientSettings\"),_types=require(\"./types\");\n//# sourceMappingURL=index.js.map", "/**\n * @readonly\n * @enum {string} an Enum containing keys for Kameleoon SDK related data stored on storage\n * */\nexport enum KameleoonStorageKey {\n  ClientData = 'kameleoonClientData',\n  VariationData = 'kameleoonVariationData',\n  VisitorCode = 'kameleoonVisitorCode',\n  OfflineTracking = 'kameleoonOfflineTracking',\n}\n", "import { Ok, Result } from 'ts-res';\nimport { KameleoonError, KameleoonException } from 'src/kameleoonError';\nimport { IExternalStorage, IStorage, StorageDataType } from './types';\nimport { KameleoonStorageKey } from './constants';\n\nexport class ExternalStorage<T extends StorageDataType> implements IStorage<T> {\n  private key: KameleoonStorageKey;\n  private storage: IExternalStorage;\n\n  constructor(externalStorage: IExternalStorage) {\n    this.key = externalStorage.key;\n    this.storage = externalStorage;\n  }\n\n  public read(): Result<T, KameleoonError> {\n    const result = this.storage.read();\n\n    if (!result.ok) {\n      return result;\n    }\n\n    return this.parse(result.data);\n  }\n\n  public write(data: T): Result<void, KameleoonError> {\n    this.storage.write(JSON.stringify(data));\n\n    return Ok();\n  }\n\n  private parse(data: string): Result<T, KameleoonError> {\n    let result: T;\n\n    try {\n      result = JSON.parse(data);\n    } catch (err) {\n      throw new KameleoonError(KameleoonException.StorageParse, err, this.key);\n    }\n\n    return Ok(result);\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});\n//# sourceMappingURL=types.js.map", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"ClientDataType\",{enumerable:!0,get:function get(){return _types.ClientDataType}}),Object.defineProperty(exports,\"ExperimentVariationsType\",{enumerable:!0,get:function get(){return _types.ExperimentVariationsType}}),Object.defineProperty(exports,\"ExternalStorage\",{enumerable:!0,get:function get(){return _externalStorage.ExternalStorage}}),Object.defineProperty(exports,\"IExternalStorage\",{enumerable:!0,get:function get(){return _types.IExternalStorage}}),Object.defineProperty(exports,\"IExternalStorageConstructor\",{enumerable:!0,get:function get(){return _types.IExternalStorageConstructor}}),Object.defineProperty(exports,\"IStorage\",{enumerable:!0,get:function get(){return _types.IStorage}}),Object.defineProperty(exports,\"KameleoonStorageKey\",{enumerable:!0,get:function get(){return _constants.KameleoonStorageKey}}),Object.defineProperty(exports,\"VariationDataType\",{enumerable:!0,get:function get(){return _types.VariationDataType}});var _constants=require(\"./constants\"),_externalStorage=require(\"./externalStorage\"),_types=require(\"./types\");\n//# sourceMappingURL=index.js.map", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/*globals window, global, require*/\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\n\t    var crypto;\n\n\t    // Native crypto from window (Browser)\n\t    if (typeof window !== 'undefined' && window.crypto) {\n\t        crypto = window.crypto;\n\t    }\n\n\t    // Native crypto in web worker (Browser)\n\t    if (typeof self !== 'undefined' && self.crypto) {\n\t        crypto = self.crypto;\n\t    }\n\n\t    // Native crypto from worker\n\t    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n\t        crypto = globalThis.crypto;\n\t    }\n\n\t    // Native (experimental IE 11) crypto from window (Browser)\n\t    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n\t        crypto = window.msCrypto;\n\t    }\n\n\t    // Native crypto from global (NodeJS)\n\t    if (!crypto && typeof global !== 'undefined' && global.crypto) {\n\t        crypto = global.crypto;\n\t    }\n\n\t    // Native crypto import via require (NodeJS)\n\t    if (!crypto && typeof require === 'function') {\n\t        try {\n\t            crypto = require('crypto');\n\t        } catch (err) {}\n\t    }\n\n\t    /*\n\t     * Cryptographically secure pseudorandom number generator\n\t     *\n\t     * As Math.random() is cryptographically not safe to use\n\t     */\n\t    var cryptoSecureRandomInt = function () {\n\t        if (crypto) {\n\t            // Use getRandomValues method (Browser)\n\t            if (typeof crypto.getRandomValues === 'function') {\n\t                try {\n\t                    return crypto.getRandomValues(new Uint32Array(1))[0];\n\t                } catch (err) {}\n\t            }\n\n\t            // Use randomBytes method (NodeJS)\n\t            if (typeof crypto.randomBytes === 'function') {\n\t                try {\n\t                    return crypto.randomBytes(4).readInt32LE();\n\t                } catch (err) {}\n\t            }\n\t        }\n\n\t        throw new Error('Native crypto module could not be used to get secure random number.');\n\t    };\n\n\t    /*\n\t     * Local polyfill of Object.create\n\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {}\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }());\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var j = 0; j < thatSigBytes; j += 4) {\n\t                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            for (var i = 0; i < nBytes; i += 4) {\n\t                words.push(cryptoSecureRandomInt());\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            var processedWords;\n\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));", "import sha256 from 'crypto-js/sha256';\nimport {\n  ObtainExperimentHashDoubleParamsType,\n  ObtainFeatureFlagHashDoubleParamsType,\n} from './types';\n\nexport class Hasher {\n  static obtainExperimentHashDouble({\n    visitorCode,\n    campaignId,\n    respoolTime,\n  }: ObtainExperimentHashDoubleParamsType): number {\n    let respoolTimeString = '';\n\n    if (respoolTime.length) {\n      respoolTime.forEach((respoolObject) => {\n        respoolTimeString += String(respoolObject.value);\n      });\n    }\n\n    return this.calculateHash(visitorCode + campaignId + respoolTimeString);\n  }\n\n  static obtainFeatureFlagHashDouble({\n    visitorCode,\n    campaignId,\n    respoolTime,\n  }: ObtainFeatureFlagHashDoubleParamsType): number {\n    let suffix = '';\n\n    if (respoolTime) {\n      suffix += String(respoolTime);\n    }\n\n    return this.calculateHash(visitorCode + campaignId + suffix);\n  }\n\n  // --- Note ---\n  // `hashDouble` is a seeded pseudo-random number between 0 and 1\n  // used for deciding what variation to assign\n  // `calculateHash` algorithm is consistent between every SDK\n  // and will always provide same pseudo-random value for the same input parameters\n  static calculateHash(seed: string): number {\n    const hashDigest = sha256(seed).toString();\n\n    return parseInt(hashDigest, 16) / Math.pow(2, 256);\n  }\n}\n", "export { Hasher } from './hasher';\n", "import { Err, Ok, Result } from 'ts-res';\nimport { ExperimentItemType } from 'src/campaignConfiguration';\nimport { Hasher } from 'src/hasher';\nimport { KameleoonError, KameleoonException } from 'src/kameleoonError';\nimport {\n  IStorage,\n  VariationDataType,\n  ExperimentVariationsType,\n} from 'src/storage';\nimport { Utilities } from 'src/utilities';\nimport { RuleType } from 'src/campaignConfiguration/types';\nimport {\n  FeatureFlagVariationType,\n  GetFeatureFlagVariationParametersType,\n  UpdateStorageParamsType,\n} from './types';\n\ninterface IVariationConfiguration {\n  /**\n   * @method getAssociatedVariationId - gets the id of a variation assigned to a visitor with `visitorCode` from the storage. If the visitor doesn't have associated variation yet, assigns a new one, stores it and returns it's id.\n   */\n  getAssociatedVariationId: (\n    visitorCode: string,\n    experimentId: number,\n  ) => Result<number, KameleoonError>;\n  /**\n   * @method getAssignedVariations - obtains experiments with according variations that are *already assigned* and *stored* in the `variationStorage`. If `getAssociatedVariationId` had not been called before, there will be no variations to get.\n   */\n  getAssignedVariations(\n    visitorCode: string,\n  ): Result<ExperimentVariationsType, KameleoonError>;\n  /**\n   * @method getFeatureFlagVariation - obtains variation for the rule of the feature flag which is both targeted and has a variation, if no such rule was found, returns empty rule with default `variationKey`, given an option `withAssignment` of `true` will also assign a new variation and save it in the storage\n   */\n  getFeatureFlagVariation: (\n    params: GetFeatureFlagVariationParametersType,\n  ) => Result<FeatureFlagVariationType, KameleoonError>;\n  /**\n   * @method getExperimentVariation - obtains variation for the experiment by calculating the variation for the visitor *without assigning* it to a visitor\n   */\n  getExperimentVariation: (\n    visitorCode: string,\n    experiment: ExperimentItemType,\n  ) => Result<number, KameleoonError>;\n}\n\nexport class VariationConfiguration implements IVariationConfiguration {\n  private experiments: ExperimentItemType[];\n  private storage: IStorage<VariationDataType>;\n\n  constructor(\n    experiments: ExperimentItemType[],\n    externalStorage: IStorage<VariationDataType>,\n  ) {\n    this.experiments = experiments;\n    this.storage = externalStorage;\n  }\n\n  public getAssociatedVariationId = (\n    visitorCode: string,\n    experimentId: number,\n  ): Result<number, KameleoonError> => {\n    // TODO:\n    // --- Variation from storage is not checked anymore\n    // --- If nothing changes the commented code should be deleted\n    // along with the `Variation` class and according tests/types\n    // --- Mind `todo` in `getAssociatedVariationId.spec.ts`\n    //\n    // let associatedVariation: VariationType | undefined;\n\n    // this.storage.read().and((data) => {\n    //   associatedVariation = data?.[visitorCode]?.[experimentId];\n    // });\n\n    const experiment = this.experiments.find(\n      (experiment) => experiment.id === String(experimentId),\n    );\n\n    if (!experiment) {\n      return Err(\n        new KameleoonError(\n          KameleoonException.ExperimentConfigurationNotFound,\n          experimentId,\n          visitorCode,\n        ),\n      );\n    }\n\n    // const variation = new Variation(associatedVariation);\n\n    // if (variation.isValid(experiment?.respoolTime)) {\n    //   return Ok(variation.id);\n    // }\n\n    return this.assignVariation(visitorCode, experiment);\n  };\n\n  public getAssignedVariations(\n    visitorCode: string,\n  ): Result<ExperimentVariationsType, KameleoonError> {\n    const result = this.storage.read();\n\n    if (!result.ok) {\n      return result;\n    }\n\n    const experiments = result.data[visitorCode];\n\n    if (!experiments) {\n      return Err(\n        new KameleoonError(KameleoonException.StorageRead, visitorCode),\n      );\n    }\n\n    return Ok(experiments);\n  }\n\n  public getFeatureFlagVariation({\n    visitorCode,\n    featureFlag,\n    targetingData,\n    packageInfo,\n    campaignConfiguration,\n    withAssignment = false,\n  }: GetFeatureFlagVariationParametersType): Result<\n    FeatureFlagVariationType,\n    KameleoonError\n  > {\n    const validateResult = Utilities.validateVisitorCode(visitorCode);\n\n    if (!validateResult.ok) {\n      return Err(validateResult.error);\n    }\n\n    const {\n      rules,\n      featureKey,\n      id: featureFlagId,\n      defaultVariationKey,\n    } = featureFlag;\n\n    for (const rule of rules) {\n      const {\n        segment,\n        experimentId,\n        id,\n        exposition,\n        respoolTime,\n        variationByExposition,\n      } = rule;\n\n      // --- Check targeting ---\n      const targetingResult = Utilities.checkTargeting({\n        segment,\n        visitorCode,\n        experimentId,\n        targetingData,\n        packageInfo,\n        campaignConfiguration,\n        variationConfiguration: this,\n      });\n\n      if (!targetingResult.ok) {\n        return targetingResult;\n      }\n\n      if (!targetingResult.data) {\n        continue;\n      }\n\n      // --- Note ---\n      // Calculate new variation (and assign it if `withAssignment` is `true`)\n      // First the the exposed rule is calculated and then the variation inside of it\n      const ruleHash = Hasher.obtainFeatureFlagHashDouble({\n        visitorCode,\n        respoolTime,\n        campaignId: String(id),\n      });\n\n      if (ruleHash <= exposition) {\n        let totalDeviation = 0;\n\n        const variationHash = Hasher.obtainFeatureFlagHashDouble({\n          visitorCode,\n          respoolTime,\n          campaignId: String(experimentId),\n        });\n\n        for (const variation of variationByExposition) {\n          totalDeviation += variation.exposition;\n\n          if (variationHash <= totalDeviation) {\n            // --- Note ---\n            // For the `RuleType.EXPERIMENTATION` variation assignment must happen without\n            // calculating experiment deviation\n            if (rule.type === RuleType.EXPERIMENTATION && withAssignment) {\n              this.updateStorageData({\n                visitorCode,\n                experimentId: String(experimentId),\n                // --- Note ---\n                // For `RuleType.EXPERIMENTATION` `variationId` can not be null\n                variationId: variation.variationId as number,\n              });\n            }\n\n            const { exposition, ...restParameters } = variation;\n\n            return Ok({\n              ...restParameters,\n              rule,\n              featureFlagId,\n              featureKey,\n              experimentId,\n            });\n          }\n        }\n      }\n\n      if (rule.type === RuleType.TARGETED_DELIVERY) {\n        break;\n      }\n    }\n\n    return Ok({\n      featureKey,\n      featureFlagId,\n      experimentId: null,\n      variationKey: defaultVariationKey,\n      variationId: null,\n      rule: null,\n    });\n  }\n\n  public getExperimentVariation(\n    visitorCode: string,\n    experiment: ExperimentItemType,\n  ): Result<number, KameleoonError> {\n    const { id, respoolTime, deviations } = experiment;\n\n    const hashDouble = Hasher.obtainExperimentHashDouble({\n      visitorCode,\n      campaignId: id,\n      respoolTime,\n    });\n\n    let isUnallocated = true;\n    let totalDeviation = 0;\n    let resultVariationId = 0;\n\n    for (const deviation of deviations) {\n      totalDeviation += deviation.value;\n\n      if (totalDeviation >= hashDouble) {\n        // --- Note ---\n        // If sum of all variations is less than 1 (100%), then there is a chance\n        // user will end up outside of any variation\n        isUnallocated = false;\n        // --- Note ---\n        // 'origin' is the default `variationId`, it must return id of 0\n        if (deviation.variationId !== 'origin') {\n          resultVariationId = Number(deviation.variationId);\n        }\n\n        break;\n      }\n    }\n\n    if (isUnallocated) {\n      return Err(\n        new KameleoonError(KameleoonException.NotAllocated, visitorCode),\n      );\n    }\n\n    return Ok(resultVariationId);\n  }\n\n  private assignVariation(\n    visitorCode: string,\n    experiment: ExperimentItemType,\n  ): Result<number, KameleoonError> {\n    const variationResult = this.getExperimentVariation(\n      visitorCode,\n      experiment,\n    );\n\n    if (!variationResult.ok) {\n      return variationResult;\n    }\n\n    const result = this.updateStorageData({\n      visitorCode,\n      experimentId: experiment.id,\n      variationId: variationResult.data,\n    });\n\n    if (!result.ok) {\n      return result;\n    }\n\n    return Ok(variationResult.data);\n  }\n\n  private updateStorageData({\n    visitorCode,\n    experimentId,\n    variationId,\n  }: UpdateStorageParamsType): Result<void, KameleoonError> {\n    const result = this.storage.read();\n\n    if (!result.ok) {\n      // --- Note ---\n      // If there is a parsing error we return error\n      // But if there is `LocalStorageRead` error it means that\n      // data was read successfully and it's empty, which is not problem\n      // cause that might be initial `read`\n      if (result.error.type === KameleoonException.StorageParse) {\n        return result;\n      }\n    }\n\n    const updatedVariationData: VariationDataType = result.ok\n      ? result.data\n      : {};\n\n    const updatedVariation = {\n      variationId,\n      assignmentDate: new Date().toString(),\n    };\n\n    if (updatedVariationData[visitorCode]) {\n      updatedVariationData[visitorCode][experimentId] = updatedVariation;\n    } else {\n      updatedVariationData[visitorCode] = {\n        [experimentId]: updatedVariation,\n      };\n    }\n\n    return this.storage.write(updatedVariationData);\n  }\n\n  // --- TODO: commented out in case of future logic rework ---\n  // --- Mind: `variationId` could cause the `undefined` issue ---\n  // --- Reference: https://development.kameleoon.net/sdk/javascript-sdk-packages/-/merge_requests/89 ---\n  // private getAssignedRuleVariation(\n  //   visitorCode: string,\n  //   rule: RuleItemType,\n  // ): Result<GetAssignedRuleVariationResultType, KameleoonError> {\n  //   const emptyVariation: Omit<VariationByExpositionType, 'exposition'> = {\n  //     variationId: null,\n  //     variationKey: '',\n  //   };\n  //   const { experimentId, variationByExposition } = rule;\n\n  //   const variationsResult = this.getAssignedVariations(visitorCode);\n\n  //   // --- Note ---\n  //   // If there is an error, we just want to skip seeking\n  //   // for variation in the storage, not throw an error\n  //   if (!variationsResult.ok) {\n  //     return Ok(emptyVariation);\n  //   }\n\n  //   const variations = variationsResult.data;\n\n  //   if (\n  //     experimentId &&\n  //     typeof variations[experimentId].variationId !== undefined\n  //   ) {\n  //     const id = variations[experimentId].variationId;\n  //     const featureFlagVariation = variationByExposition.find(\n  //       (item) => item.variationId == id,\n  //     );\n\n  //     if (!featureFlagVariation) {\n  //       // --- Note ---\n  //       // This error is not described for public methods as\n  //       // it serves internal purpose of checking whether\n  //       // the persistent variation has been updated and should be re-allocated\n  //       return Err(new KameleoonError(KameleoonException.DataInconsistency));\n  //     }\n\n  //     const { exposition, ...restParameters } = featureFlagVariation;\n\n  //     return Ok({ ...restParameters });\n  //   }\n\n  //   return Ok(emptyVariation);\n  // }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});\n//# sourceMappingURL=types.js.map", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"FeatureFlagVariationType\",{enumerable:!0,get:function get(){return _types.FeatureFlagVariationType}}),Object.defineProperty(exports,\"VariationConfiguration\",{enumerable:!0,get:function get(){return _variationConfiguration.VariationConfiguration}}),Object.defineProperty(exports,\"VariationType\",{enumerable:!0,get:function get(){return _types.VariationType}});var _variationConfiguration=require(\"./variationConfiguration\"),_types=require(\"./types\");\n//# sourceMappingURL=index.js.map", "import { Err, Ok, Result } from 'ts-res';\nimport { CacheManager } from './cacheManager';\nimport { CampaignConfiguration, JSONType } from './campaignConfiguration';\nimport { ClientSettings } from './clientSettings';\nimport {\n  CACHE_CLEANUP_TIMEOUT,\n  OFF_VARIATION_KEY,\n  UNALLOCATED_VARIATION_ID,\n} from './constants';\nimport { Conversion, KameleoonDataType } from './kameleoonData';\nimport { KameleoonError, KameleoonException } from './kameleoonError';\nimport { Requester } from './requester';\nimport {\n  ClientDataType,\n  KameleoonStorageKey,\n  VariationDataType,\n} from './storage';\nimport { ExternalStorage } from './storage/externalStorage';\nimport {\n  TrackConversionParamsType,\n  ExperimentType,\n  FeatureFlagType,\n  GetFeatureFlagVariableParamsType,\n  FeatureVariableResultType,\n  SDKCoreParameters,\n  TrackingCacheItemType,\n  ExternalPackageInfoType,\n} from './types';\nimport { Utilities } from './utilities';\nimport {\n  FeatureFlagVariationType,\n  VariationConfiguration,\n} from './variationConfiguration';\nimport { OfflineTracking } from './storage/types';\n\n/**\n * @interface an interface of KameleoonClient instance\n */\nexport interface IKameleoonClient {\n  /**\n   * @method initialize - an asynchronous method for KameleoonClient initialization by fetching Kameleoon SDK related data from server or by retrieving data from local source if data is up-to-date or update interval has not been reached\n   * @param {boolean | undefined} useCache - optional parameter for activating SDK offline mode, if `true` is passed failed polls will not return error and will use cached data if such data is available, default value is `false`. Note: if offline mode is on, SDK will still try to retrieve the latest data.\n   * @returns {Promise<boolean>} Promise resolved into boolean field indicating success or fail\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.StorageWrite` Couldn't update storage data\n   * - `KameleoonException.ClientConfiguration` Couldn't retrieve client configuration from Kameleoon Api\n   * - `KameleoonException.MaximumRetriesReached` Maximum retries reached, request failed\n   */\n  initialize(useCache?: boolean): Promise<boolean>;\n  initialize(): Promise<boolean>;\n  /**\n   * @method addData - method for adding targeting data to the storage so that other methods could decide whether the current visitor is targeted or not. Note: userAgent data will not be stored in storage like other data, and it will be sent with every tracking request for bot filtration.\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {KameleoonDataType[]} kameleoonData - number of instances of any type of `KameleoonData`, can be added solely in array or as a sequential arguments\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.StorageWrite` Couldn't update storage data\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  addData: (visitorCode: string, ...data: KameleoonDataType[]) => void;\n  /**\n   * @method getRemoteVisitorData - an asynchronous method for retrieving custom data for the latest visit of `visitorCode` from Kameleoon Data API and optionally adding it to the storage so that other methods could decide whether the current visitor is targeted or not.\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {boolean | undefined} shouldAddData - optional parameter for adding retrieved data to the storage like `addData` method does, default value is `true`\n   * @returns {KameleoonDataType[]} promise resolved to an array of `KameleoonData` instances, only includes custom data\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.RemoteData` - Couldn't retrieve data from Kameleoon server\n   */\n  getRemoteVisitorData: (\n    visitorCode: string,\n    shouldAddData?: boolean,\n  ) => Promise<KameleoonDataType[]>;\n  /**\n   * @method triggerExperiment - triggers experiment by assigning the variation to the user with `visitorCode`, if the variation is already assigned just returns it's id. Note: returned id `0` indicates default variation.  At the same time sends tracking request.\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {number} experimentId - id of experiment running for the current visitor\n   * @returns {number} associated variationId which is successfully searched/assigned\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.ExperimentConfigurationNotFound` No configuration found for provided `experimentId`\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.StorageRead` Couldn't find associated experiment by provided `experimentId` and `visitorCode` inside the storage\n   * - `KameleoonException.NotTargeted` Current visitor is not targeted\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  triggerExperiment: (visitorCode: string, experimentId: number) => number;\n  /**\n   * @method trackConversion - creates and adds `Conversion` data to the visitor with specified parameters and executes `flush`. Note: it's a helper method for the quick and convenient conversion tracking, however creating and adding `Conversion` manually allows more flexible `Conversion` with `negative` parameter\n   * @param {TrackConversionParamsType} conversionParameters - `visitorCode`, `goalId` and `revenue` parameters for data tracking\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.StorageWrite` Couldn't update storage data\n   */\n  trackConversion: ({\n    visitorCode,\n    goalId,\n    revenue,\n  }: TrackConversionParamsType) => void;\n  /**\n   * @method flush - takes visitor associated kameleoon data and sends the data tracking request with collected data,\n   * sent data is removed from `KameleoonClient` instance but not from the storage for correct targeting checks. If no visitor is passed,\n   * then data for all visitors is sent and removed from `KameleoonClient` instance. Moreover, regardless of visitor code input\n   * the method first attemps to send all previously failed tracking requests which were stored locally during the offline mode.\n   * @param {string | undefined} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  flush: (visitorCode: string) => void;\n  /**\n   * @deprecated Use flush method instead.\n   */\n  flushData: (visitorCode: string) => void;\n  /**\n   * @method getExperiments - returns a list of experiments stored in the client configuration\n   * @returns {ExperimentType[]} a list of all experiments items with `id` and `name` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  getExperiments: () => ExperimentType[];\n  /**\n   * @method getVisitorExperiments - returns a list of experiments that the visitor with `visitorCode` is targeted by and that are *active* for the visitor (visitor will have one of the variations allocated if the experiment will be triggered).\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {boolean | undefined} isAllocated - boolean value indicating that only experiments *allocated* for visitor will be returned. Default value is `true`\n   * @returns {ExperimentType[]} a list of all experiments items with `id` and `name` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  getVisitorExperiments: (\n    visitorCode: string,\n    isAllocated?: boolean,\n  ) => ExperimentType[];\n  /**\n   * @method getExperimentVariationData - returns variation data in JSON format for the variation with `variationId`\n   * @param {number} variationId - id of variation\n   * @returns {JSONType} variation data in JSON format\n   * @throws `KameleoonError` with one of the following `type` s:\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.JSONParse` - Couldn't pass JSON value\n   * - `KameleoonException.VariationNotFound` - No variation found for provided `variationId`\n   */\n  getExperimentVariationData: (variationId: number) => JSONType | null;\n  /**\n   * @method getFeatureFlags - returns a list of feature flags stored in the client configuration\n   * @returns {FeatureFlagType[]} a list of all feature flags items with `id` and `key` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  getFeatureFlags: () => FeatureFlagType[];\n  /**\n   * @method getVisitorFeatureFlags - returns a list of feature flags that the visitor with `visitorCode` that is targeted by and that are *active* for the visitor (visitor will have one of the variations allocated).\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @returns {FeatureFlagType[]} a list of all feature flags items with `id` and `key` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   */\n  getVisitorFeatureFlags: (visitorCode: string) => FeatureFlagType[];\n  /**\n   * @method isFeatureFlagActive - returns a boolean indicating whether the visitor with `visitorCode` has `featureKey` active for him, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {string} featureKey - a unique key for feature flag\n   * @returns {boolean} a boolean indicator of whether the feature flag with `featureKey` is active for visitor with `visitorCode`\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`\n   * - `KameleoonException.DataInconsistency` - Allocated variation was found but there is no feature flag with according `featureKey`.\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   */\n  isFeatureFlagActive: (visitorCode: string, featureKey: string) => boolean;\n  /**\n   * @method getFeatureFlagVariationKey - returns variation key for the visitor under `visitorCode` in the found feature flag, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {string} featureKey - a unique key for feature flag\n   * @returns {string} a string containing variable key for the allocated feature flag variation for the provided visitor\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   */\n  getFeatureFlagVariationKey: (\n    visitorCode: string,\n    featureKey: string,\n  ) => string;\n  /**\n   * @method getFeatureFlagVariable - returns a variable for the visitor under `visitorCode` in the found feature flag, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request\n   * @param {GetFeatureFlagVariableParamsType} parameters - an object with parameters of a type `GetFeatureFlagVariableParamsType`, see the type for details.\n   * @returns {FeatureVariableResultType} a variable object containing `type` and `value` fields, `type` can be checked against `FeatureVariableType` enum, if the `type` is `FeatureVariableType.BOOLEAN` then the `value` type will be `boolean` and so on.\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`\n   * - `KameleoonException.FeatureFlagVariableNotFound` - No feature variable was found for provided `visitorCode` and `variableKey`\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   * - `KameleoonException.JSONParse` - Couldn't pass JSON value\n   * - `KameleoonException.NumberParse` - Couldn't pass Number value\n   */\n  getFeatureFlagVariable: ({\n    visitorCode,\n    featureKey,\n    variableKey,\n  }: GetFeatureFlagVariableParamsType) => FeatureVariableResultType;\n  /**\n   * @method getRemoteData - returns a data which is stored for specified siteCode on a remote Kameleoon server.\n   * @param {string} key - unique key that the data you try to get is associated with.\n   * @returns {JSONType} - promise with retrieving data for specific key.\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.RemoteData` - Couldn't retrieve data from Kameleoon server\n   */\n  getRemoteData: (key: string) => Promise<JSONType>;\n  /**\n   * @method getEngineTrackingCode - returns Kameleoon tracking code for the current visitor. Tracking code is built of the experiments that were triggered and feature flag variations that were assigned during the last 5 seconds\n   * See [Kameleoon Automation API](https://developers.kameleoon.com/apis/activation-api-js/api-reference#trigger-1) for the details\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @returns {string} Kameleoon tracking code\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   */\n  getEngineTrackingCode: (visitorCode: string) => string;\n  /**\n   * @method onConfigurationUpdate - fires a callback on client configuration update. Note: this method only works for server sent events of real time update.\n   * @param {() => void} callback - callback function with no parameters that will be called upon configuration update\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  onConfigurationUpdate: (callback: () => void) => void;\n}\n\n/**\n * @class\n * KameleoonClient - a class for creating kameleoon client instance\n * for communicating with Kameleoon JavaScript SDK Core, when new instance is created\n */\nexport class KameleoonClient implements IKameleoonClient {\n  private variationConfiguration?: VariationConfiguration;\n  private campaignConfiguration: CampaignConfiguration;\n  private variationDataStorage: ExternalStorage<VariationDataType>;\n  private offlineTrackingStorage: ExternalStorage<OfflineTracking>;\n  private trackingCache: CacheManager<TrackingCacheItemType>;\n  private requester: Requester;\n  private externalPackageInfo: ExternalPackageInfoType;\n  private isOfflineModeOn?: boolean;\n\n  /**\n   * @param {SDKCoreParameters} sdkCoreParameters - parameters for initializing sdk core\n   */\n  constructor({\n    siteCode,\n    configuration,\n    internalConfiguration,\n  }: SDKCoreParameters) {\n    const { settings: clientSettings } = new ClientSettings(\n      siteCode,\n      configuration,\n    );\n    const {\n      externalStorage,\n      externalEventSource,\n      externalPackageInfo,\n      externalRequestDispatcher,\n      externalClientConfiguration,\n    } = internalConfiguration;\n    const requester = new Requester({\n      siteCode,\n      environment: clientSettings.environment,\n      packageInfo: externalPackageInfo,\n      requestDispatcher: externalRequestDispatcher,\n    });\n    const trackingCache = new CacheManager<TrackingCacheItemType>(\n      CACHE_CLEANUP_TIMEOUT,\n    );\n    const clientDataStorage = new ExternalStorage<ClientDataType>(\n      externalStorage.initialize(KameleoonStorageKey.ClientData),\n    );\n    const variationDataStorage = new ExternalStorage<VariationDataType>(\n      externalStorage.initialize(KameleoonStorageKey.VariationData),\n    );\n    const offlineTrackingStorage = new ExternalStorage<OfflineTracking>(\n      externalStorage.initialize(KameleoonStorageKey.OfflineTracking),\n    );\n    const campaignConfiguration = new CampaignConfiguration({\n      settings: clientSettings,\n      storage: clientDataStorage,\n      requester,\n      externalClientConfiguration,\n      targetingCleanupInterval: configuration?.targetingDataCleanupInterval,\n      offlineTrackingStorage,\n      externalEventSource,\n    });\n\n    this.requester = requester;\n    this.trackingCache = trackingCache;\n    this.campaignConfiguration = campaignConfiguration;\n    this.variationDataStorage = variationDataStorage;\n    this.externalPackageInfo = externalPackageInfo;\n    this.offlineTrackingStorage = offlineTrackingStorage;\n  }\n\n  public async initialize(useCache?: boolean): Promise<boolean> {\n    const result = await this.campaignConfiguration.initialize(useCache);\n    result.throw();\n\n    const variationConfiguration = new VariationConfiguration(\n      this.campaignConfiguration.experiments,\n      this.variationDataStorage,\n    );\n\n    this.variationConfiguration = variationConfiguration;\n\n    this.isOfflineModeOn = useCache;\n\n    return result.ok;\n  }\n\n  public addData(visitorCode: string, ...data: KameleoonDataType[]): void {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    this.campaignConfiguration.addTargetingData(visitorCode, ...data).throw();\n  }\n\n  public async getRemoteVisitorData(\n    visitorCode: string,\n    shouldAddData = true,\n  ): Promise<KameleoonDataType[]> {\n    const result = await this.requester.getVisitorData(visitorCode);\n    const data = result.throw();\n\n    const visitorData = Utilities.parseVisitorData(data);\n\n    for (const dataItem of visitorData) {\n      if (\n        shouldAddData ||\n        this.campaignConfiguration.isPersistentCustomData(dataItem)\n      ) {\n        this.addData(visitorCode, dataItem);\n      }\n    }\n\n    return visitorData;\n  }\n\n  public triggerExperiment(visitorCode: string, experimentId: number): number {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    if (!this.campaignConfiguration || !this.variationConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    const experiment = this.campaignConfiguration.experiments.find(\n      (item) => item.id === String(experimentId),\n    );\n\n    if (!experiment) {\n      throw new KameleoonError(\n        KameleoonException.ExperimentConfigurationNotFound,\n        experimentId,\n        visitorCode,\n      );\n    }\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    let variationId = UNALLOCATED_VARIATION_ID;\n\n    const targetingResult = Utilities.checkTargeting({\n      visitorCode,\n      experimentId,\n      targetingData,\n      segment: experiment.segment,\n      campaignConfiguration: this.campaignConfiguration,\n      variationConfiguration: this.variationConfiguration,\n      packageInfo: this.externalPackageInfo,\n    }).throw();\n\n    variationId = this.variationConfiguration\n      .getAssociatedVariationId(visitorCode, experimentId)\n      .else((error) => {\n        if (error.type === KameleoonException.NotAllocated) {\n          Utilities.trackExperiment({\n            requester: this.requester,\n            campaignConfiguration: this.campaignConfiguration,\n            isUnallocated: true,\n            variationId,\n            visitorCode,\n            experimentId,\n            isOfflineModeOn: this.isOfflineModeOn,\n            offlineTrackingStorage: this.offlineTrackingStorage,\n          });\n\n          return UNALLOCATED_VARIATION_ID;\n        }\n\n        throw error;\n      });\n\n    Utilities.trackExperiment({\n      requester: this.requester,\n      campaignConfiguration: this.campaignConfiguration,\n      isUnallocated: false,\n      variationId,\n      visitorCode,\n      experimentId,\n      isOfflineModeOn: this.isOfflineModeOn,\n      offlineTrackingStorage: this.offlineTrackingStorage,\n    });\n\n    if (!targetingResult) {\n      throw new KameleoonError(KameleoonException.NotTargeted, visitorCode);\n    }\n\n    Utilities.updateCache({\n      cacheManager: this.trackingCache,\n      visitorCode,\n      experimentId,\n      variationId,\n    });\n\n    return variationId;\n  }\n\n  public trackConversion({\n    visitorCode,\n    goalId,\n    revenue,\n  }: TrackConversionParamsType): void {\n    this.addData(visitorCode, new Conversion({ goalId, revenue }));\n    this.flush(visitorCode);\n  }\n\n  public flush(visitorCode?: string): void {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    if (typeof visitorCode === 'string') {\n      Utilities.validateVisitorCode(visitorCode).throw();\n    }\n\n    if (visitorCode) {\n      Utilities.trackData({\n        visitorCode,\n        campaignConfiguration: this.campaignConfiguration,\n        requester: this.requester,\n        isOfflineModeOn: this.isOfflineModeOn,\n        offlineTrackingStorage: this.offlineTrackingStorage,\n      });\n      return;\n    }\n\n    // --- Note ---\n    // `Utilities.trackData` executes `Utilities.sendOfflineTracking` asynchronously at first, but\n    // we need to execute `Utilities.sendOfflineTracking` even if calling `Utilities.trackData` is skipped\n    // due to lack of unsent data\n    if (!this.campaignConfiguration.unsentDataVisitors.length) {\n      Utilities.sendOfflineTracking({\n        requester: this.requester,\n        storage: this.offlineTrackingStorage,\n      });\n      return;\n    }\n\n    for (const visitorCodeKey of this.campaignConfiguration\n      .unsentDataVisitors) {\n      Utilities.trackData({\n        visitorCode: visitorCodeKey,\n        campaignConfiguration: this.campaignConfiguration,\n        requester: this.requester,\n        isOfflineModeOn: this.isOfflineModeOn,\n        offlineTrackingStorage: this.offlineTrackingStorage,\n      });\n    }\n  }\n\n  public flushData(visitorCode?: string): void {\n    this.flush(visitorCode);\n  }\n\n  public getExperiments(): ExperimentType[] {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    return this.campaignConfiguration.experiments.map(({ id, name }) => ({\n      id: Number(id),\n      name,\n    }));\n  }\n\n  public getVisitorExperiments(\n    visitorCode: string,\n    isActive = true,\n  ): ExperimentType[] {\n    if (!this.variationConfiguration || !this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    const experiments = this.campaignConfiguration.experiments;\n    const result: ExperimentType[] = [];\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    for (const experiment of experiments) {\n      const { id, name, segment } = experiment;\n\n      const targetingResult = Utilities.checkTargeting({\n        targetingData,\n        visitorCode,\n        segment,\n        variationConfiguration: this.variationConfiguration,\n        campaignConfiguration: this.campaignConfiguration,\n        experimentId: Number(id),\n        packageInfo: this.externalPackageInfo,\n      }).throw();\n\n      if (!targetingResult) {\n        continue;\n      }\n\n      // -- If `isActive=false` then return every experiment\n      if (!isActive) {\n        result.push({ id: Number(id), name });\n        continue;\n      }\n\n      // -- Else first check if there are saved variations for the experiment\n      // if there is at least one than it's active\n      const experimentVariations =\n        this.variationConfiguration.getAssignedVariations(visitorCode);\n\n      if (experimentVariations.ok) {\n        const experimentVariation = experimentVariations.data[experiment.id];\n\n        if (experimentVariation) {\n          result.push({ id: Number(id), name });\n          continue;\n        }\n      }\n\n      // -- Second check if the experiment will have an allocated variation upon triggering\n      // if yes than it's active\n      const variationResult =\n        this.variationConfiguration.getExperimentVariation(\n          visitorCode,\n          experiment,\n        );\n\n      if (variationResult.ok) {\n        result.push({ id: Number(id), name });\n      }\n    }\n\n    return result;\n  }\n\n  public getExperimentVariationData(variationId: number): JSONType {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    const experiments = this.campaignConfiguration.experiments;\n\n    for (const experiment of experiments) {\n      const variation = experiment.variations.find(\n        (item) => item.id === String(variationId),\n      );\n\n      if (variation) {\n        try {\n          return JSON.parse(variation.customJson);\n        } catch (err) {\n          throw new KameleoonError(KameleoonException.JSONParse, err);\n        }\n      }\n    }\n\n    throw new KameleoonError(KameleoonException.VariationNotFound);\n  }\n\n  public getFeatureFlags(): FeatureFlagType[] {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    return this.campaignConfiguration.featureFlags.map(\n      ({ id, featureKey }) => ({ id, key: featureKey }),\n    );\n  }\n\n  public getVisitorFeatureFlags(visitorCode: string): FeatureFlagType[] {\n    if (!this.variationConfiguration || !this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    const featureFlags = this.campaignConfiguration.featureFlags;\n    const resultFeatureFlags: FeatureFlagType[] = [];\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    for (const featureFlag of featureFlags) {\n      const variationData = this.variationConfiguration\n        .getFeatureFlagVariation({\n          visitorCode,\n          targetingData,\n          featureFlag,\n          campaignConfiguration: this.campaignConfiguration,\n          packageInfo: this.externalPackageInfo,\n        })\n        .throw();\n\n      if (variationData.variationKey !== OFF_VARIATION_KEY) {\n        const { featureFlagId, featureKey } = variationData;\n\n        resultFeatureFlags.push({ id: featureFlagId, key: featureKey });\n      }\n    }\n\n    return resultFeatureFlags;\n  }\n\n  public getFeatureFlagVariationKey(\n    visitorCode: string,\n    featureKey: string,\n  ): string {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    const { variationKey } = this._getFeatureFlagVariation(\n      visitorCode,\n      featureKey,\n    ).throw();\n\n    return variationKey;\n  }\n\n  public getFeatureFlagVariable({\n    visitorCode,\n    featureKey,\n    variableKey,\n  }: GetFeatureFlagVariableParamsType): FeatureVariableResultType {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    const { variationKey } = this._getFeatureFlagVariation(\n      visitorCode,\n      featureKey,\n    ).throw();\n\n    // --- Note ---\n    // `_getFeatureFlagVariation` already checks `campaignConfiguration` initialization\n    const featureFlags = (this.campaignConfiguration as CampaignConfiguration)\n      .featureFlags;\n\n    const featureFlag = featureFlags.find(\n      (item) => item.featureKey === featureKey,\n    );\n\n    if (!featureFlag) {\n      throw new KameleoonError(\n        KameleoonException.FeatureFlagConfigurationNotFound,\n        featureKey,\n        visitorCode,\n      );\n    }\n\n    const variable = featureFlag.variations\n      .find((item) => item.key === variationKey)\n      ?.variables.find((item) => item.key === variableKey);\n\n    if (!variable) {\n      throw new KameleoonError(\n        KameleoonException.FeatureFlagVariableNotFound,\n        variableKey,\n        visitorCode,\n      );\n    }\n\n    const featureVariable = Utilities.parseFeatureVariable(variable).throw();\n\n    return featureVariable;\n  }\n\n  public isFeatureFlagActive(visitorCode: string, featureKey: string): boolean {\n    const variationKey = this.getFeatureFlagVariationKey(\n      visitorCode,\n      featureKey,\n    );\n\n    return variationKey !== OFF_VARIATION_KEY;\n  }\n\n  public async getRemoteData(key: string): Promise<JSONType> {\n    const remoteData = await this.requester.getRemoteData(key);\n\n    return remoteData.throw();\n  }\n\n  public onConfigurationUpdate(callback: () => void): void {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    this.campaignConfiguration.onConfigurationUpdate(callback);\n  }\n\n  public getEngineTrackingCode(visitorCode: string): string {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    return Utilities.getTrackingCode(this.trackingCache, visitorCode);\n  }\n\n  private _getFeatureFlagVariation(\n    visitorCode: string,\n    featureKey: string,\n  ): Result<FeatureFlagVariationType, KameleoonError> {\n    if (!this.variationConfiguration || !this.campaignConfiguration) {\n      return Err(new KameleoonError(KameleoonException.Initialization));\n    }\n\n    const featureFlags = this.campaignConfiguration.featureFlags;\n    const featureFlag = featureFlags.find(\n      (item) => item.featureKey === featureKey,\n    );\n\n    if (!featureFlag) {\n      return Err(\n        new KameleoonError(\n          KameleoonException.FeatureFlagConfigurationNotFound,\n          featureKey,\n          visitorCode,\n        ),\n      );\n    }\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    const variationData = this.variationConfiguration\n      .getFeatureFlagVariation({\n        visitorCode,\n        featureFlag,\n        targetingData,\n        withAssignment: true,\n        campaignConfiguration: this.campaignConfiguration,\n        packageInfo: this.externalPackageInfo,\n      })\n      .throw();\n\n    const { experimentId, variationId } = variationData;\n\n    if (typeof variationId === 'number' && typeof experimentId === 'number') {\n      Utilities.updateCache({\n        cacheManager: this.trackingCache,\n        visitorCode,\n        experimentId,\n        variationId,\n      });\n    }\n\n    Utilities.trackRule({\n      visitorCode,\n      requester: this.requester,\n      featureFlagVariation: variationData,\n      campaignConfiguration: this.campaignConfiguration,\n      isOfflineModeOn: this.isOfflineModeOn,\n      offlineTrackingStorage: this.offlineTrackingStorage,\n    });\n\n    return Ok(variationData);\n  }\n}\n", "import { Err, Ok, Result } from 'ts-res';\nimport { Cookie, KAMELEOON_COOKIE_KEY } from './constants';\nimport {\n  GetResultCookieParametersType,\n  ClientGetVisitorCodeParametersType,\n  ServerGetVisitorCodeParametersType,\n  MobileGetVisitorCodeParametersType,\n} from './types';\n\n/**\n * @abstract\n * KameleoonUtils - an abstract class for extending kameleoon utils with pre-defined method signatures\n * */\nexport abstract class KameleoonUtils {\n  abstract getVisitorCode(\n    param:\n      | ClientGetVisitorCodeParametersType\n      | ServerGetVisitorCodeParametersType\n      | MobileGetVisitorCodeParametersType,\n  ): string;\n\n  protected generateRandomString(length: number): string {\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n    let randomString = '';\n\n    if (length < 0) {\n      return randomString;\n    }\n\n    for (let i = 0; i < length; i++) {\n      randomString += characters[Math.floor(Math.random() * characters.length)];\n    }\n\n    return randomString;\n  }\n\n  protected getCookieVisitorCode(cookie: string): Result<string, void> {\n    const pairs = cookie.split(Cookie.PairsDelimiter);\n    const pair = pairs.find((pair) => {\n      const [key, _] = pair.split(Cookie.KeyValueDelimiter) as [string, string];\n\n      return key === KAMELEOON_COOKIE_KEY;\n    });\n\n    if (pair) {\n      const [_, value] = pair.split(Cookie.KeyValueDelimiter);\n\n      return Ok(value);\n    }\n\n    return Err();\n  }\n\n  protected getResultCookie({\n    domain,\n    visitorCode,\n  }: GetResultCookieParametersType): string {\n    const yearSeconds = 60 * 60 * 24 * 365;\n    const cookieArray = [\n      KAMELEOON_COOKIE_KEY + Cookie.KeyValueDelimiter + visitorCode,\n      Cookie.MaxAge + Cookie.KeyValueDelimiter + yearSeconds,\n      Cookie.Path + Cookie.KeyValueDelimiter + '/',\n      Cookie.Domain + Cookie.KeyValueDelimiter + domain,\n    ];\n\n    return cookieArray.join(Cookie.PairsDelimiter);\n  }\n}\n", "\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),Object.defineProperty(exports,\"Browser\",{enumerable:!0,get:function get(){return _kameleoonData.Browser}}),Object.defineProperty(exports,\"BrowserType\",{enumerable:!0,get:function get(){return _kameleoonData.BrowserType}}),Object.defineProperty(exports,\"CLEANUP_TARGETING_DATA_INTERVAL\",{enumerable:!0,get:function get(){return _campaignConfiguration.CLEANUP_TARGETING_DATA_INTERVAL}}),Object.defineProperty(exports,\"ClientGetVisitorCodeParametersType\",{enumerable:!0,get:function get(){return _types.ClientGetVisitorCodeParametersType}}),Object.defineProperty(exports,\"Conversion\",{enumerable:!0,get:function get(){return _kameleoonData.Conversion}}),Object.defineProperty(exports,\"ConversionParametersType\",{enumerable:!0,get:function get(){return _kameleoonData.ConversionParametersType}}),Object.defineProperty(exports,\"Cookie\",{enumerable:!0,get:function get(){return _constants.Cookie}}),Object.defineProperty(exports,\"CustomData\",{enumerable:!0,get:function get(){return _kameleoonData.CustomData}}),Object.defineProperty(exports,\"Device\",{enumerable:!0,get:function get(){return _kameleoonData.Device}}),Object.defineProperty(exports,\"DeviceType\",{enumerable:!0,get:function get(){return _kameleoonData.DeviceType}}),Object.defineProperty(exports,\"Environment\",{enumerable:!0,get:function get(){return _types.Environment}}),Object.defineProperty(exports,\"Err\",{enumerable:!0,get:function get(){return _tsRes.Err}}),Object.defineProperty(exports,\"EventSourceOpenParametersType\",{enumerable:!0,get:function get(){return _eventSource.EventSourceOpenParametersType}}),Object.defineProperty(exports,\"ExperimentType\",{enumerable:!0,get:function get(){return _types.ExperimentType}}),Object.defineProperty(exports,\"ExternalPackageInfoType\",{enumerable:!0,get:function get(){return _types.ExternalPackageInfoType}}),Object.defineProperty(exports,\"FeatureFlagType\",{enumerable:!0,get:function get(){return _types.FeatureFlagType}}),Object.defineProperty(exports,\"FeatureVariableResultType\",{enumerable:!0,get:function get(){return _types.FeatureVariableResultType}}),Object.defineProperty(exports,\"GetClientConfigurationResultType\",{enumerable:!0,get:function get(){return _requester.GetClientConfigurationResultType}}),Object.defineProperty(exports,\"GetFeatureFlagVariableParamsType\",{enumerable:!0,get:function get(){return _types.GetFeatureFlagVariableParamsType}}),Object.defineProperty(exports,\"Header\",{enumerable:!0,get:function get(){return _requester.Header}}),Object.defineProperty(exports,\"HttpMethod\",{enumerable:!0,get:function get(){return _requester.HttpMethod}}),Object.defineProperty(exports,\"IExternalEventSource\",{enumerable:!0,get:function get(){return _eventSource.IExternalEventSource}}),Object.defineProperty(exports,\"IExternalEventSourceConstructor\",{enumerable:!0,get:function get(){return _eventSource.IExternalEventSourceConstructor}}),Object.defineProperty(exports,\"IExternalRequestDispatcher\",{enumerable:!0,get:function get(){return _requester.IExternalRequestDispatcher}}),Object.defineProperty(exports,\"IExternalStorage\",{enumerable:!0,get:function get(){return _storage.IExternalStorage}}),Object.defineProperty(exports,\"IExternalStorageConstructor\",{enumerable:!0,get:function get(){return _storage.IExternalStorageConstructor}}),Object.defineProperty(exports,\"IKameleoonCore\",{enumerable:!0,get:function get(){return _kameleoonClient.IKameleoonClient}}),Object.defineProperty(exports,\"InternalSDKConfigurationType\",{enumerable:!0,get:function get(){return _types.InternalSDKConfigurationType}}),Object.defineProperty(exports,\"JSONType\",{enumerable:!0,get:function get(){return _campaignConfiguration.JSONType}}),Object.defineProperty(exports,\"KameleoonCore\",{enumerable:!0,get:function get(){return _kameleoonClient.KameleoonClient}}),Object.defineProperty(exports,\"KameleoonCoreUtils\",{enumerable:!0,get:function get(){return _kameleoonUtils.KameleoonUtils}}),Object.defineProperty(exports,\"KameleoonData\",{enumerable:!0,get:function get(){return _kameleoonData.KameleoonData}}),Object.defineProperty(exports,\"KameleoonDataType\",{enumerable:!0,get:function get(){return _kameleoonData.KameleoonDataType}}),Object.defineProperty(exports,\"KameleoonError\",{enumerable:!0,get:function get(){return _kameleoonError.KameleoonError}}),Object.defineProperty(exports,\"KameleoonException\",{enumerable:!0,get:function get(){return _kameleoonError.KameleoonException}}),Object.defineProperty(exports,\"KameleoonStorageKey\",{enumerable:!0,get:function get(){return _storage.KameleoonStorageKey}}),Object.defineProperty(exports,\"Milliseconds\",{enumerable:!0,get:function get(){return _types.Milliseconds}}),Object.defineProperty(exports,\"MobileGetVisitorCodeParametersType\",{enumerable:!0,get:function get(){return _types.MobileGetVisitorCodeParametersType}}),Object.defineProperty(exports,\"Ok\",{enumerable:!0,get:function get(){return _tsRes.Ok}}),Object.defineProperty(exports,\"PageView\",{enumerable:!0,get:function get(){return _kameleoonData.PageView}}),Object.defineProperty(exports,\"PageViewParametersType\",{enumerable:!0,get:function get(){return _kameleoonData.PageViewParametersType}}),Object.defineProperty(exports,\"RealTimeEventType\",{enumerable:!0,get:function get(){return _eventSource.RealTimeEventType}}),Object.defineProperty(exports,\"Result\",{enumerable:!0,get:function get(){return _tsRes.Result}}),Object.defineProperty(exports,\"SDKConfigurationType\",{enumerable:!0,get:function get(){return _types.SDKConfigurationType}}),Object.defineProperty(exports,\"SDKCoreParameters\",{enumerable:!0,get:function get(){return _types.SDKCoreParameters}}),Object.defineProperty(exports,\"SdkLanguageType\",{enumerable:!0,get:function get(){return _constants.SdkLanguageType}}),Object.defineProperty(exports,\"ServerGetVisitorCodeParametersType\",{enumerable:!0,get:function get(){return _types.ServerGetVisitorCodeParametersType}}),Object.defineProperty(exports,\"TrackConversionParamsType\",{enumerable:!0,get:function get(){return _types.TrackConversionParamsType}}),Object.defineProperty(exports,\"TrackParametersType\",{enumerable:!0,get:function get(){return _requester.TrackParametersType}}),Object.defineProperty(exports,\"UserAgent\",{enumerable:!0,get:function get(){return _kameleoonData.UserAgent}}),Object.defineProperty(exports,\"VISITOR_CODE_LENGTH\",{enumerable:!0,get:function get(){return _constants.VISITOR_CODE_LENGTH}}),Object.defineProperty(exports,\"VariableType\",{enumerable:!0,get:function get(){return _types.VariableType}});var _tsRes=require(\"ts-res\"),_kameleoonClient=require(\"./kameleoonClient\"),_kameleoonUtils=require(\"./kameleoonUtils\"),_kameleoonError=require(\"./kameleoonError\"),_storage=require(\"./storage\"),_constants=require(\"./constants\"),_campaignConfiguration=require(\"./campaignConfiguration\"),_types=require(\"./types\"),_kameleoonData=require(\"./kameleoonData\"),_eventSource=require(\"./eventSource\"),_requester=require(\"./requester\");\n//# sourceMappingURL=index.js.map", "import {\n  Cookie,\n  KameleoonCoreUtils,\n  VISITOR_CODE_LENGTH,\n  ClientGetVisitorCodeParametersType,\n} from '@kameleoon/javascript-sdk-core';\n\n// --- Note ---\n// Extra class is created:\n// - To enforce abstract `getVisitorCode` method\n// - To use extended methods while `KameleoonUtils` itself only operates on static methods\n// - To keep similar parameters object on inner implementation and disperse it for proprietary implementations\nclass KameleoonUtilsConstructor extends KameleoonCoreUtils {\n  public getVisitorCode({\n    domain,\n    defaultVisitorCode,\n  }: ClientGetVisitorCodeParametersType): string {\n    const cookie = document.cookie;\n\n    const visitorCodeResult = this.getCookieVisitorCode(cookie);\n\n    if (visitorCodeResult.ok && visitorCodeResult.data) {\n      return visitorCodeResult.data;\n    }\n\n    const visitorCode =\n      defaultVisitorCode || this.generateRandomString(VISITOR_CODE_LENGTH);\n\n    const resultCookie = this.getResultCookie({ domain, visitorCode });\n\n    // --- Note ---\n    // - Browser automatically adds new cookie in the end (without overwrite)\n    // - Only one key-value pair can be added at a time\n    resultCookie.split(Cookie.PairsDelimiter).forEach((item) => {\n      document.cookie = item;\n    });\n\n    return visitorCode;\n  }\n}\n\n/**\n * @class\n * KameleoonUtils - a class with containing a number of static helper methods\n * */\nexport class KameleoonUtils {\n  /**\n   * @method getVisitorCode obtains visitor code from the browser cookie, if the visitor code doesn't yet exist generates a random visitor code (or uses a provided default) and sets a new visitor code to cookie\n   * @param {string} domain domain which cookie belongs to\n   * @param {string | undefined} defaultVisitorCode visitor code to be used in case there is no visitor code in cookies Note: if not passed visitor code will be randomly generated\n   * @returns {string} result visitor code\n   * */\n  static getVisitorCode(domain: string, defaultVisitorCode?: string): string {\n    const kameleoonUtilsConstructor = new KameleoonUtilsConstructor();\n\n    return kameleoonUtilsConstructor.getVisitorCode({\n      domain,\n      defaultVisitorCode,\n    });\n  }\n}\n", "import {\n  Ok,\n  Err,\n  Result,\n  KameleoonError,\n  IExternalStorage,\n  KameleoonException,\n  KameleoonStorageKey,\n  IExternalStorageConstructor,\n} from '@kameleoon/javascript-sdk-core';\n\nexport class StorageConstructor implements IExternalStorageConstructor {\n  public initialize(key: KameleoonStorageKey): IExternalStorage {\n    const storage = new Storage(key);\n\n    return storage;\n  }\n}\n\nclass Storage implements IExternalStorage {\n  private storageKey: KameleoonStorageKey;\n\n  constructor(key: KameleoonStorageKey) {\n    this.storageKey = key;\n  }\n\n  get key(): KameleoonStorageKey {\n    return this.storageKey;\n  }\n\n  public read(): Result<string, KameleoonError> {\n    const data = localStorage.getItem(this.storageKey);\n\n    if (!data) {\n      return Err(\n        new KameleoonError(KameleoonException.StorageRead, this.storageKey),\n      );\n    }\n\n    return Ok(data);\n  }\n\n  public write(data: string): Result<void, KameleoonError> {\n    try {\n      localStorage.setItem(this.storageKey, data);\n\n      return Ok();\n    } catch (err) {\n      return Err(new KameleoonError(KameleoonException.StorageWrite, err));\n    }\n  }\n}\n", "export const DELAY_MILLISECONDS = 2000;\nexport const NUMBER_OF_RETRIES = 3;\n", "import {\n  JSONType,\n  HttpMethod,\n  TrackParametersType,\n  IExternalRequestDispatcher,\n  KameleoonError,\n  KameleoonException,\n} from '@kameleoon/javascript-sdk-core';\nimport { DELAY_MILLISECONDS, NUMBER_OF_RETRIES } from './constants';\n\nexport class RequestDispatcher implements IExternalRequestDispatcher {\n  public async track({\n    url,\n    headers,\n    body,\n  }: TrackParametersType): Promise<boolean> {\n    const response = await fetch(url, {\n      method: HttpMethod.Post,\n      headers,\n      body,\n    });\n\n    return response.ok;\n  }\n\n  public async getClientConfiguration(url: string): Promise<JSONType> {\n    for (let i = 1; i <= NUMBER_OF_RETRIES; i++) {\n      try {\n        const response = await fetch(url, {\n          method: HttpMethod.Get,\n        });\n\n        if (response.ok) {\n          return response.json();\n        }\n\n        if (response.status !== 504) {\n          throw new KameleoonError(KameleoonException.ClientConfiguration);\n        }\n      } catch (err) {\n        throw new KameleoonError(KameleoonException.ClientConfiguration);\n      }\n\n      if (i < NUMBER_OF_RETRIES) {\n        await new Promise((resolve) => setTimeout(resolve, DELAY_MILLISECONDS));\n      }\n    }\n\n    throw new KameleoonError(KameleoonException.MaximumRetriesReached);\n  }\n\n  public async getRemoteData(url: string): Promise<JSONType> {\n    const response = await fetch(url, {\n      method: HttpMethod.Get,\n    });\n\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new KameleoonError(KameleoonException.RemoteData);\n  }\n}\n", "import {\n  RealTimeEventType,\n  IExternalEventSource,\n  EventSourceOpenParametersType,\n  IExternalEventSourceConstructor,\n} from '@kameleoon/javascript-sdk-core';\n\nexport class EventSourceConstructor implements IExternalEventSourceConstructor {\n  public initialize(url: string): IExternalEventSource {\n    return new ExternalEventSource(url);\n  }\n}\n\n// --- Note ---\n// - `EventSource` has no dedicated tests because same browser instance\n// is tested thoroughly inside core and would just duplicate tests\n// - Moreover we would have to import some unexposed details like constructed url\n// or the `eventType` from the core\nclass ExternalEventSource implements IExternalEventSource {\n  private eventSource: EventSource;\n\n  constructor(url: string) {\n    const eventSource = new EventSource(url);\n\n    this.eventSource = eventSource;\n  }\n\n  public open({\n    siteCode,\n    eventType,\n    onEvent,\n  }: EventSourceOpenParametersType): void {\n    this.eventSource.addEventListener(eventType, (message) => {\n      const event: RealTimeEventType = JSON.parse(message.data);\n      const { siteCode: eventSiteCode, ts } = event;\n\n      if (siteCode === eventSiteCode) {\n        onEvent(ts);\n      }\n    });\n  }\n\n  public close() {\n    this.eventSource.close();\n  }\n}\n", "import {\n  SDKConfigurationType,\n  SdkLanguageType,\n  KameleoonCore,\n} from '@kameleoon/javascript-sdk-core';\nimport { StorageConstructor } from './storage';\nimport { RequestDispatcher } from './requester';\nimport { EventSourceConstructor } from './eventSource';\n\n/**\n * @class\n * KameleoonClient - a class for creating kameleoon client instance\n * */\nexport class KameleoonClient extends KameleoonCore {\n  constructor(siteCode: string, configuration?: Partial<SDKConfigurationType>) {\n    const storage = new StorageConstructor();\n    const eventSource = new EventSourceConstructor();\n    const requestDispatcher = new RequestDispatcher();\n\n    super({\n      siteCode,\n      configuration,\n      internalConfiguration: {\n        externalStorage: storage,\n        externalEventSource: eventSource,\n        externalRequestDispatcher: requestDispatcher,\n        externalPackageInfo: {\n          type: SdkLanguageType.JAVASCRIPT,\n          version: process.env.npm_package_version as string,\n        },\n      },\n    });\n  }\n\n  /**\n   * @method initialize - an asynchronous method for KameleoonClient initialization by fetching Kameleoon SDK related data from server or by retrieving data from local source if data is up-to-date or update interval has not been reached\n   * @param {boolean | undefined} useCache - optional parameter for activating SDK offline mode, if `true` is passed failed polls will not return error and will use cached data if such data is available, default value is `false`. Note: if offline mode is on, SDK will still try to retrieve the latest data.\n   * @returns {Promise<boolean>} Promise resolved into boolean field indicating success or fail\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.StorageWrite` Couldn't update storage data\n   * - `KameleoonException.ClientConfiguration` Couldn't retrieve client configuration from Kameleoon Api\n   * - `KameleoonException.MaximumRetriesReached` Maximum retries reached, request failed\n   */\n  public async initialize(useCache?: boolean): Promise<boolean> {\n    return super.initialize(useCache);\n  }\n}\n", "export * from '@kameleoon/javascript-sdk-core';\nexport { KameleoonUtils } from './kameleoonUtils';\nexport { KameleoonClient } from './kameleoonClient';\n"],
  "mappings": "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",
  "names": ["Environment", "Production", "Staging", "Development", "exports", "VariableType", "BOOLEAN", "NUMBER", "STRING", "JSON", "Milliseconds", "Second", "Minute", "Hour", "_types", "require", "Object", "defineProperty", "exports", "value", "CacheManager", "_typeof", "a", "Symbol", "iterator", "constructor", "prototype", "_slicedToArray", "b", "_arrayWithHoles", "_iterableToArrayLimit", "_unsupportedIterableToArray", "_nonIterableRest", "TypeError", "c", "d", "e", "f", "g", "h", "i", "j", "call", "next", "done", "push", "length", "return", "Array", "isArray", "_createForOfIteratorHelper", "s", "n", "_arrayLikeToArray", "toString", "slice", "name", "from", "test", "_classCallCheck", "_defineProperties", "enumerable", "configurable", "writable", "_toPropertyKey", "key", "_createClass", "_defineProperty", "_toPrimitive", "toPrimitive", "String", "Number", "cleanupTimeout", "Map", "Milliseconds", "Second", "add", "data", "lifetime", "intervalId", "activate", "expirationTime", "cacheItem", "Date", "now", "cacheMap", "set", "getAliveItem", "get", "delete", "setInterval", "item", "size", "cleanupInterval", "clearInterval", "require_types", "require_cacheManager", "UpdateType", "Polling", "RealTime", "Idle", "exports", "ExperimentType", "CLASSIC", "SERVER_SIDE", "DEVELOPER", "MVT", "HYBRID", "RuleType", "PROGRESSIVE_DELIVERY", "TARGETED_DELIVERY", "EXPERIMENTATION", "FeatureFlagSdkLanguageType", "ANDROID", "SWIFT", "JAVA", "CSHARP", "NODEJS", "PHP", "RUBY", "GO", "FLUTTER", "REACTJS", "FeatureStatus", "ACTIVATED", "DEACTIVATED", "SCHEDULED", "CustomDataScope", "Visit", "Visitor", "Page", "ExperimentStatus", "DRAFT", "ACTIVE", "PAUSED", "STOPPED", "USED_AS_PERSONALIZATION", "DEVIATED", "KameleoonException", "ExperimentConfigurationNotFound", "EventSourceInitialization", "VariationNotFound", "FeatureFlagConfigurationNotFound", "FeatureFlagVariableNotFound", "NotTargeted", "NotAllocated", "VisitorCodeMaxLength", "VisitorCodeEmpty", "StorageInitialization", "StorageWrite", "StorageRead", "StorageParse", "ClientConfiguration", "TargetingCondition", "AmongValuesCheck", "Initialization", "JSONParse", "NumberParse", "VersionParse", "SemanticVersionParse", "RemoteData", "MaximumRetriesReached", "exports", "ERROR_MESSAGES", "_ERROR_MESSAGES", "_defineProperty", "KameleoonException", "JSONParse", "err", "concat", "NumberParse", "value", "VersionParse", "SemanticVersionParse", "Initialization", "StorageInitialization", "EventSourceInitialization", "VariationNotFound", "FeatureFlagConfigurationNotFound", "featureKey", "visitorCode", "FeatureFlagVariableNotFound", "variableKey", "ExperimentConfigurationNotFound", "experimentId", "NotTargeted", "NotAllocated", "VisitorCodeMaxLength", "VisitorCodeEmpty", "StorageWrite", "StorageRead", "key", "StorageParse", "ClientConfiguration", "TargetingCondition", "targetingType", "AmongValuesCheck", "RemoteData", "MaximumRetriesReached", "exports", "exhaustCheck", "option", "Error", "concat", "KameleoonError", "a", "b", "type", "secondParam", "thirdParam", "f", "_classCallCheck", "c", "call", "concat", "_defineProperty", "_assertThisInitialized", "name", "errorType", "KameleoonException", "Initialization", "ClientConfiguration", "VisitorCodeMaxLength", "VisitorCodeEmpty", "StorageInitialization", "VariationNotFound", "EventSourceInitialization", "RemoteData", "MaximumRetriesReached", "message", "ERROR_MESSAGES", "NotAllocated", "NotTargeted", "ExperimentConfigurationNotFound", "FeatureFlagVariableNotFound", "FeatureFlagConfigurationNotFound", "StorageWrite", "JSONParse", "StorageRead", "StorageParse", "TargetingCondition", "NumberParse", "VersionParse", "SemanticVersionParse", "AmongValuesCheck", "exhaustCheck", "_inherits", "_createSuper", "_createClass", "key", "get", "_wrapNativeSuper", "Error", "exports", "require_kameleoonError", "exports", "UNALLOCATED_VARIATION_ID", "OFF_VARIATION_KEY", "KAMELEOON_COOKIE_KEY", "VISITOR_CODE_LENGTH", "CACHE_CLEANUP_TIMEOUT", "CACHE_ITEM_LIFETIME", "Cookie", "PairsDelimiter", "KeyValueDelimiter", "MaxAge", "Path", "Domain", "SdkLanguageType", "ANDROID", "IOS", "JAVA", "CSHARP", "NODEJS", "PHP", "RUBY", "GO", "FLUTTER", "REACT", "PYTHON", "JAVASCRIPT", "RUST", "exports", "VISITOR_CODE_MAX_LENGTH", "HEX_CHARACTERS", "a", "b", "c", "Object", "defineProperty", "value", "enumerable", "configurable", "writable", "e", "f", "prototype", "d", "g", "create", "h", "m", "s", "i", "type", "arg", "call", "forEach", "_invoke", "j", "k", "_typeof", "r", "resolve", "__await", "then", "Error", "o", "method", "delegate", "x", "sent", "_sent", "dispatchException", "abrupt", "done", "iterator", "return", "TypeError", "resultName", "next", "nextLoc", "tryLoc", "catchLoc", "finallyLoc", "afterLoc", "tryEntries", "push", "l", "completion", "reset", "n", "u", "isNaN", "length", "_regeneratorRuntime", "p", "q", "hasOwnProperty", "t", "Symbol", "v", "asyncIterator", "w", "toStringTag", "wrap", "y", "z", "getPrototypeOf", "A", "B", "displayName", "isGeneratorFunction", "constructor", "name", "mark", "setPrototypeOf", "__proto__", "awrap", "AsyncIterator", "async", "Promise", "keys", "reverse", "pop", "values", "prev", "charAt", "slice", "stop", "rval", "complete", "finish", "catch", "_catch", "delegateYield", "asyncGeneratorStep", "_asyncToGenerator", "arguments", "apply", "_createForOfIteratorHelper", "Array", "isArray", "_unsupportedIterableToArray", "_arrayLikeToArray", "toString", "from", "test", "_classCallCheck", "_defineProperties", "_toPropertyKey", "key", "_createClass", "_toPrimitive", "toPrimitive", "String", "Number", "Utilities", "checkTargeting", "segment", "visitorCode", "targetingData", "experimentId", "variationConfiguration", "campaignConfiguration", "packageInfo", "conditionsData", "firstLevel", "Ok", "Err", "KameleoonError", "KameleoonException", "Initialization", "variations", "assignedVariationsResult", "getAssignedVariations", "ok", "data", "targetingTree", "getTargetingTree", "result", "evaluate", "variationData", "sdkInfo", "validateVisitorCode", "VisitorCodeEmpty", "VISITOR_CODE_MAX_LENGTH", "VisitorCodeMaxLength", "getDataUrl", "unsentData", "getUnsentData", "resultUrl", "size", "item", "url", "featureFlagVariation", "requester", "isOfflineModeOn", "offlineTrackingStorage", "variationId", "rule", "userAgent", "getUserAgent", "dataUrl", "resultVariationId", "isUnallocated", "parameters", "body", "trackExperiment", "clearUnsentData", "addItemToOfflineTracking", "storage", "isExperiment", "parseFeatureVariable", "variable", "VariableType", "BOOLEAN", "STRING", "NUMBER", "numberValue", "NumberParse", "JSON", "jsonValue", "parse", "err", "JSONParse", "exhaustCheck", "parseVisitorData", "visits", "currentVisit", "previousVisits", "indexMap", "Map", "resultData", "customDataEvents", "_toConsumableArray", "sort", "time", "customDataEvent", "customDataIndex", "index", "has", "set", "valuesCountMap", "_construct", "CustomData", "concat", "parseRegExp", "split", "_slicedToArray", "_", "expression", "flags", "RegExp", "storedTargetingData", "userAgentData", "KameleoonData", "UserAgent", "isCustomData", "dataItem", "updateCache", "cacheManager", "cacheData", "getAliveItem", "newCacheData", "_objectSpread", "expirationTime", "Date", "now", "CACHE_ITEM_LIFETIME", "Milliseconds", "Second", "add", "lifetime", "getTrackingCode", "trackingCache", "resultString", "updatedCacheData", "entries", "sendOfflineTracking", "trackData", "cleanup", "onSuccess", "getNonce", "randomNumber", "hexLength", "HEX_CHARACTERS", "nonce", "Math", "floor", "random", "substring", "readResult", "read", "requestParameters", "successfulTimestamps", "timestamp", "params", "_objectWithoutProperties", "_excluded", "t0", "deleteFromOfflineTracking", "timestamps", "newItem", "getTime", "newRequestParameters", "writeResult", "write", "newParameters", "filter", "includes", "exports", "require_utilities", "Header", "UserAgent", "ContentType", "Authorization", "exports", "dataTopLevelDomain", "UrlEventType", "CustomData", "StaticData", "Page", "Conversion", "Activity", "Experiment", "UrlParameter", "Title", "ReferrersIndices", "Negative", "Revenue", "Overwrite", "Index", "BrowserIndex", "BrowserVersion", "Href", "DeviceType", "SiteCode", "GoalId", "VisitorCode", "Environment", "VariationId", "Ts", "Key", "SdkName", "SdkVersion", "ValuesCountMap", "Nonce", "Id", "CurrentVisit", "MaxNumberPreviousVisits", "UrlQuery", "Sse", "Mobile", "Map", "Events", "Visitor", "UrlTracking", "Visit", "URL_DATA_API", "concat", "URL", "SERVER_SENT_EVENTS", "CLIENT_CONFIGURATION", "VISIT_EVENT", "VISIT_DATA", "DATA_MAP", "a", "b", "c", "Object", "defineProperty", "value", "enumerable", "configurable", "writable", "e", "f", "prototype", "d", "g", "create", "h", "m", "s", "i", "type", "arg", "call", "forEach", "_invoke", "j", "k", "_typeof", "r", "resolve", "__await", "then", "Error", "o", "method", "delegate", "x", "sent", "_sent", "dispatchException", "abrupt", "done", "iterator", "return", "TypeError", "resultName", "next", "nextLoc", "tryLoc", "catchLoc", "finallyLoc", "afterLoc", "tryEntries", "push", "l", "completion", "reset", "n", "u", "isNaN", "length", "_regeneratorRuntime", "p", "q", "hasOwnProperty", "t", "Symbol", "v", "asyncIterator", "w", "toStringTag", "wrap", "y", "z", "getPrototypeOf", "A", "B", "displayName", "isGeneratorFunction", "constructor", "name", "mark", "setPrototypeOf", "__proto__", "awrap", "AsyncIterator", "async", "Promise", "keys", "reverse", "pop", "values", "prev", "charAt", "slice", "stop", "rval", "complete", "finish", "catch", "_catch", "delegateYield", "asyncGeneratorStep", "_asyncToGenerator", "arguments", "apply", "_classCallCheck", "_defineProperties", "_toPropertyKey", "key", "_createClass", "_defineProperty", "_toPrimitive", "toPrimitive", "String", "Number", "Requester", "siteCode", "environment", "packageInfo", "requestDispatcher", "timeStamp", "environmentParam", "UrlParameter", "Environment", "timeStampParam", "Ts", "requestUrl", "URL", "CLIENT_CONFIGURATION", "UrlQuery", "Mobile", "getClientConfiguration", "response", "Ok", "t0", "Err", "DATA_MAP", "Key", "encodeURI", "getRemoteData", "visitorCode", "VISIT_DATA", "VisitorCode", "MaxNumberPreviousVisits", "CustomData", "CurrentVisit", "variationId", "experimentId", "isUnallocated", "body", "userAgent", "url", "getTrackingUrl", "unallocatedAddition", "UrlEventType", "Activity", "Nonce", "Utilities", "getNonce", "bodyAddition", "Experiment", "Id", "VariationId", "extendedBody", "headers", "Header", "UserAgent", "track", "requestBody", "version", "VISIT_EVENT", "SdkName", "toLowerCase", "SdkVersion", "exports", "HttpMethod", "Get", "Post", "exports", "require_requester", "KameleoonData", "CustomData", "PageView", "Browser", "Conversion", "Device", "UserAgent", "exports", "DeviceType", "Phone", "Tablet", "Desktop", "BrowserType", "Chrome", "InternetExplorer", "Firefox", "Safari", "Opera", "Other", "BrowserIndexMap", "_BrowserIndexMap", "_defineProperty", "CustomData", "a", "index", "_classCallCheck", "_defineProperty", "c", "arguments", "length", "value", "Array", "e", "nonce", "Utilities", "getNonce", "_createClass", "key", "get", "uniqueValues", "_toConsumableArray", "Set", "resultValue", "forEach", "Object", "keys", "UrlEventType", "UrlParameter", "Index", "ValuesCountMap", "encodeURIComponent", "JSON", "stringify", "Overwrite", "Nonce", "type", "KameleoonData", "exports", "Conversion", "a", "b", "goalId", "d", "revenue", "f", "negative", "_classCallCheck", "_defineProperty", "nonce", "Utilities", "getNonce", "_createClass", "key", "get", "UrlEventType", "UrlParameter", "GoalId", "Revenue", "Negative", "Nonce", "type", "KameleoonData", "exports", "Device", "a", "device", "_classCallCheck", "_defineProperty", "nonce", "Utilities", "getNonce", "_createClass", "key", "get", "UrlEventType", "StaticData", "UrlParameter", "DeviceType", "Nonce", "type", "KameleoonData", "exports", "Browser", "a", "browser", "version", "_classCallCheck", "_defineProperty", "nonce", "Utilities", "getNonce", "_createClass", "key", "get", "browserVersion", "UrlParameter", "BrowserVersion", "UrlEventType", "StaticData", "BrowserIndex", "BrowserIndexMap", "Nonce", "type", "KameleoonData", "exports", "PageView", "a", "b", "urlAddress", "title", "referrers", "_classCallCheck", "_defineProperty", "nonce", "Utilities", "getNonce", "_createClass", "key", "get", "titleParameter", "UrlParameter", "Title", "encodeURIComponent", "referrersParameter", "length", "ReferrersIndices", "JSON", "stringify", "UrlEventType", "Page", "Href", "Nonce", "type", "KameleoonData", "exports", "UserAgent", "a", "value", "_classCallCheck", "_defineProperty", "nonce", "Utilities", "getNonce", "_createClass", "key", "get", "type", "KameleoonData", "exports", "DeviceCondition", "a", "b", "device", "_classCallCheck", "_defineProperty", "_createClass", "key", "value", "evaluate", "targetingData", "deviceData", "KameleoonData", "Device", "Ok", "exports", "Operator", "And", "Or", "exports", "MatchTypeCustomData", "TRUE", "FALSE", "EXACT", "CONTAINS", "REGULAR_EXPRESSION", "EQUAL", "LOWER", "GREATER", "UNDEFINED", "AMONG_VALUES", "MatchTypeVariation", "ANY", "MatchTypeTest", "ALL", "TEST", "PERSO", "MatchType", "VersionMatchType", "TargetingType", "PAGE_URL", "PAGE_TITLE", "LANDING_PAGE", "ORIGIN", "ORIGIN_TYPE", "REFERRERS", "NEW_VISITORS", "INTERESTS", "BROWSER_LANGUAGE", "GEOLOCATION", "DEVICE_TYPE", "SCREEN_DIMENSION", "VISITOR_IP", "AD_BLOCKER", "PREVIOUS_PAGE", "KEY_PAGES", "PAGE_VIEWS", "FIRST_VISIT", "LAST_VISIT", "ACTIVE_SESSION", "TIME_SINCE_PAGE_LOAD", "SAME_DAY_VISITS", "VISITS", "VISITS_BY_PAGE", "VISITOR_CODE", "SDK_LANGUAGE", "INTERNAL_SEARCH_KEYWORDS", "TABS_ON_SITE", "CONVERSION_PROBABILITY", "HEAT_SLICE", "SKY_STATUS", "TEMPERATURE", "DAY_NIGHT", "FORECAST_SKY_STATUS", "FORECAST_TEMPERATURE", "DAY_OF_WEEK", "TIME_RANGE", "HOUR_MINUTE_RANGE", "JS_CODE", "COOKIE", "EVENT", "BROWSER", "OPERATING_SYSTEM", "DOM_ELEMENT", "MOUSE_OUT", "TARGET_EXPERIMENT", "TARGET_PERSONALIZATION", "EXCLUSIVE_EXPERIMENT", "CONVERSIONS", "CUSTOM_DATUM", "YSANCE_SEGMENT", "YSANCE_ATTRIBUT", "TEALIUM_BADGE", "TEALIUM_AUDIENCE", "PRICE_OF_DISPLAYED_PAGE", "NUMBER_OF_VISITED_PAGES", "VISITED_PAGES", "CUSTOM", "EXPLICIT_TRIGGER", "BrowserCondition", "a", "b", "browser", "version", "versionMatchType", "_classCallCheck", "_defineProperty", "_createClass", "key", "value", "evaluate", "targetingData", "browserData", "KameleoonData", "Browser", "result", "checkCondition", "error", "Err", "Ok", "parsedVersion", "parseFloat", "isNaN", "KameleoonError", "KameleoonException", "VersionParse", "VersionMatchType", "EQUAL", "GREATER", "LOWER", "exhaustCheck", "exports", "ConversionCondition", "a", "b", "goalId", "_classCallCheck", "_defineProperty", "conditionValue", "_createClass", "key", "value", "evaluate", "targetingData", "conversionData", "KameleoonData", "Conversion", "Ok", "checkCondition", "exports", "CustomDataCondition", "a", "b", "customDataIndex", "valueMatchType", "value", "_classCallCheck", "_defineProperty", "matchType", "conditionValue", "_createClass", "key", "evaluate", "targetingData", "c", "customData", "KameleoonData", "CustomData", "customDataValue", "result", "checkCondition", "error", "Err", "Ok", "MatchTypeCustomData", "UNDEFINED", "TRUE", "FALSE", "AMONG_VALUES", "parseArray", "ok", "resultData", "Set", "data", "Array", "isArray", "some", "has", "includes", "CONTAINS", "EXACT", "REGULAR_EXPRESSION", "Utilities", "parseRegExp", "test", "LOWER", "EQUAL", "GREATER", "toLowerCase", "JSON", "parse", "err", "KameleoonError", "KameleoonException", "AmongValuesCheck", "exports", "_tsRes", "require", "Object", "defineProperty", "exports", "value", "ExclusiveExperimentCondition", "_typeof", "a", "Symbol", "iterator", "constructor", "prototype", "_classCallCheck", "b", "TypeError", "_defineProperties", "c", "d", "length", "enumerable", "configurable", "writable", "_toPropertyKey", "key", "_createClass", "_toPrimitive", "toPrimitive", "call", "String", "Number", "evaluate", "experimentId", "variationData", "keys", "isEmpty", "isExclusive", "Ok", "PageTitleCondition", "a", "b", "matchType", "title", "_classCallCheck", "_defineProperty", "conditionValue", "_createClass", "key", "value", "evaluate", "targetingData", "pageViewData", "KameleoonData", "PageView", "Ok", "checkCondition", "MatchType", "CONTAINS", "includes", "EXACT", "REGULAR_EXPRESSION", "Utilities", "parseRegExp", "test", "exhaustCheck", "exports", "PageUrlCondition", "a", "b", "matchType", "url", "_classCallCheck", "_defineProperty", "conditionValue", "_createClass", "key", "value", "evaluate", "targetingData", "pageViewData", "KameleoonData", "PageView", "urlAddress", "Ok", "checkCondition", "MatchType", "CONTAINS", "includes", "EXACT", "REGULAR_EXPRESSION", "Utilities", "parseRegExp", "test", "exhaustCheck", "exports", "SdkLanguageCondition", "a", "b", "sdkLanguage", "version", "versionMatchType", "_classCallCheck", "_defineProperty", "conditionValue", "_createClass", "key", "value", "evaluate", "sdkInfo", "result", "checkCondition", "error", "Err", "Ok", "sdkType", "type", "compareSemVer", "compareVersion", "operator", "e", "validateVersion", "f", "_slicedToArray", "major", "minor", "patch", "j", "k", "compareMajor", "compareMinor", "comparePatch", "isMajorEqual", "isMinorEqual", "VersionMatchType", "EQUAL", "GREATER", "LOWER", "exhaustCheck", "versionSplit", "split", "some", "isBadVersion", "item", "isNaN", "parseInt", "length", "KameleoonError", "KameleoonException", "SemanticVersionParse", "map", "exports", "TargetExperimentCondition", "a", "b", "variation", "experiment", "variationMatchType", "_classCallCheck", "_defineProperty", "experimentId", "variationId", "matchType", "_createClass", "key", "value", "evaluate", "variationData", "Ok", "MatchTypeVariation", "EXACT", "result", "checkCondition", "ANY", "exports", "VisitorCodeCondition", "a", "b", "visitorCode", "matchType", "_classCallCheck", "_defineProperty", "conditionValue", "_createClass", "key", "value", "evaluate", "Ok", "checkCondition", "MatchType", "CONTAINS", "includes", "EXACT", "REGULAR_EXPRESSION", "Utilities", "parseRegExp", "test", "exhaustCheck", "exports", "ConditionFactory", "a", "_classCallCheck", "_createClass", "key", "value", "createCondition", "data", "targetingType", "TargetingType", "CUSTOM_DATUM", "Ok", "CustomDataCondition", "EXCLUSIVE_EXPERIMENT", "ExclusiveExperimentCondition", "TARGET_EXPERIMENT", "TargetExperimentCondition", "DEVICE_TYPE", "DeviceCondition", "BROWSER", "BrowserCondition", "PAGE_URL", "PageUrlCondition", "PAGE_TITLE", "PageTitleCondition", "CONVERSIONS", "ConversionCondition", "VISITOR_CODE", "VisitorCodeCondition", "SDK_LANGUAGE", "SdkLanguageCondition", "Err", "KameleoonError", "KameleoonException", "TargetingCondition", "exports", "require_types", "TargetingNode", "a", "value", "left", "right", "_classCallCheck", "_defineProperty", "isOperator", "nodeValue", "e", "result", "ConditionFactory", "createCondition", "inverseResult", "isInclude", "ok", "data", "nodeError", "error", "leftChild", "rightChild", "_createClass", "key", "get", "Operator", "And", "Or", "exports", "TargetingTree", "a", "segment", "c", "_classCallCheck", "_defineProperty", "d", "flattenSegment", "nestedConditions", "topLevelOperators", "nestedNodes", "map", "conditions", "operators", "nodes", "condition", "TargetingNode", "buildTree", "tree", "_createClass", "key", "value", "evaluate", "data", "result", "evaluateNode", "error", "Err", "Ok", "node", "isLeafNode", "type", "KameleoonException", "TargetingCondition", "ok", "inverse", "isNonLeafNode", "Operator", "And", "left", "right", "Or", "length", "_createForOfIteratorHelper", "s", "n", "done", "operator", "shift", "newNode", "unshift", "e", "f", "b", "conditionsData", "firstLevel", "firstLevelOrOperators", "forEach", "conditionList", "orOperators", "group", "convertOperators", "push", "exports", "require_types", "exports", "REAL_TIME_EVENT", "ExternalEventSource", "a", "siteCode", "externalEventSource", "_classCallCheck", "_defineProperty", "url", "URL", "SERVER_SENT_EVENTS", "UrlQuery", "Sse", "eventSource", "initialize", "_createClass", "key", "value", "open", "onEvent", "eventType", "REAL_TIME_EVENT", "close", "exports", "exports", "CLEANUP_TARGETING_DATA_INTERVAL", "DEFAULT_CONFIGURATION_DATA", "experiments", "featureFlags", "customData", "configuration", "realTimeUpdate", "a", "b", "c", "Object", "defineProperty", "value", "enumerable", "configurable", "writable", "e", "f", "prototype", "d", "g", "create", "h", "m", "s", "i", "type", "arg", "call", "forEach", "_invoke", "j", "k", "_typeof", "r", "resolve", "__await", "then", "Error", "o", "method", "delegate", "x", "sent", "_sent", "dispatchException", "abrupt", "done", "iterator", "return", "TypeError", "resultName", "next", "nextLoc", "tryLoc", "catchLoc", "finallyLoc", "afterLoc", "tryEntries", "push", "l", "completion", "reset", "n", "u", "isNaN", "length", "_regeneratorRuntime", "p", "q", "hasOwnProperty", "t", "Symbol", "v", "asyncIterator", "w", "toStringTag", "wrap", "y", "z", "getPrototypeOf", "A", "B", "displayName", "isGeneratorFunction", "constructor", "name", "mark", "setPrototypeOf", "__proto__", "awrap", "AsyncIterator", "async", "Promise", "keys", "reverse", "pop", "values", "prev", "charAt", "slice", "stop", "rval", "complete", "finish", "catch", "_catch", "delegateYield", "asyncGeneratorStep", "_asyncToGenerator", "arguments", "apply", "_classCallCheck", "_defineProperties", "_toPropertyKey", "key", "_createClass", "_defineProperty", "_toPrimitive", "toPrimitive", "String", "Number", "CampaignConfiguration", "settings", "storage", "requester", "externalClientConfiguration", "targetingCleanupInterval", "offlineTrackingStorage", "externalEventSource", "UpdateType", "Idle", "Map", "DEFAULT_CONFIGURATION_DATA", "CLEANUP_TARGETING_DATA_INTERVAL", "Milliseconds", "Minute", "Set", "lastUpdate", "Date", "readStorageData", "targetingDataLifetime", "cleanupIntervalMinutes", "targetingDataIntervalId", "setInterval", "cleanupOutdatedTargetingData", "bind", "err", "clearInterval", "useCache", "isExternalConfiguration", "shouldUpdate", "checkShouldUpdate", "updateClientConfiguration", "updateResult", "ok", "isUpdateTypeToggled", "data", "Ok", "handleExternalUpdates", "updateType", "RealTime", "eventSource", "handleRealTimeUpdates", "Polling", "handlePollingUpdates", "cleanupHandlers", "close", "updateConfigurationIntervalId", "configuration", "customData", "experiments", "featureFlagConfigurations", "configurationData", "featureFlags", "ExternalEventSource", "siteCode", "updateEventCallback", "timeStamp", "configurationUpdateCallback", "open", "updateInterval", "addTargetingData", "visitorCode", "targetingData", "Array", "dataItem", "Utilities", "isCustomData", "_objectSpread", "lastActivityTime", "now", "hasCustomDataKey", "KameleoonData", "CustomData", "index", "hasDataKey", "result", "updateStorageData", "unsentTargetingData", "localCustomDataIndexes", "has", "set", "getUnsentData", "clearUnsentData", "dataItems", "persistentCustomDataIndexes", "size", "persistentCustomData", "_createForOfIteratorHelper", "isPersistentCustomData", "getTargetingTree", "segment", "targetingTrees", "id", "targetingTree", "TargetingTree", "get", "onConfigurationUpdate", "callback", "skipChecks", "realTimeUpdate", "lastUpdateTime", "getTime", "updateWindowEdge", "currentTime", "entries", "_slicedToArray", "kameleoonVisitorData", "rest", "_objectWithoutProperties", "_excluded", "isDataExpired", "existingData", "throw", "read", "kameleoonTargetingData", "kameleoonConfiguration", "parse", "clearTargetingTrees", "clear", "getClientConfiguration", "clientConfigurationResult", "sendOfflineTracking", "customDataLocalOnlyIndexes", "localOnly", "scope", "CustomDataScope", "Visitor", "toggleUpdateType", "initialize", "toString", "write", "exports", "require_campaignConfiguration", "_types", "require", "Object", "defineProperty", "exports", "value", "ClientSettings", "_typeof", "a", "Symbol", "iterator", "constructor", "prototype", "_classCallCheck", "b", "TypeError", "_defineProperties", "c", "d", "length", "enumerable", "configurable", "writable", "_toPropertyKey", "key", "_createClass", "_defineProperty", "_toPrimitive", "toPrimitive", "call", "String", "Number", "siteCode", "configuration", "Milliseconds", "Minute", "environment", "updateInterval", "get", "require_types", "require_clientSettings", "KameleoonStorageKey", "ClientData", "VariationData", "VisitorCode", "OfflineTracking", "exports", "ExternalStorage", "a", "externalStorage", "_classCallCheck", "_defineProperty", "key", "storage", "_createClass", "value", "read", "result", "ok", "parse", "data", "write", "JSON", "stringify", "Ok", "err", "KameleoonError", "KameleoonException", "StorageParse", "exports", "require_types", "Math", "Math", "n", "H", "_sha", "_interopRequireDefault", "require", "Object", "defineProperty", "exports", "value", "Hasher", "a", "__esModule", "default", "_typeof", "Symbol", "iterator", "constructor", "prototype", "_classCallCheck", "b", "TypeError", "_defineProperties", "c", "d", "length", "enumerable", "configurable", "writable", "_toPropertyKey", "key", "_createClass", "_toPrimitive", "toPrimitive", "call", "String", "Number", "obtainExperimentHashDouble", "visitorCode", "campaignId", "respoolTime", "respoolTimeString", "forEach", "respoolObject", "calculateHash", "obtainFeatureFlagHashDouble", "suffix", "seed", "hashDigest", "sha256", "toString", "parseInt", "Math", "pow", "_hasher", "require", "Object", "defineProperty", "exports", "value", "enumerable", "get", "Hasher", "VariationConfiguration", "a", "experiments", "externalStorage", "d", "_classCallCheck", "_defineProperty", "visitorCode", "experimentId", "experiment", "find", "id", "assignVariation", "Err", "KameleoonError", "KameleoonException", "ExperimentConfigurationNotFound", "storage", "_createClass", "key", "value", "getAssignedVariations", "result", "read", "ok", "data", "Ok", "StorageRead", "getFeatureFlagVariation", "featureFlag", "targetingData", "packageInfo", "campaignConfiguration", "g", "withAssignment", "validateResult", "Utilities", "validateVisitorCode", "error", "i", "rules", "featureKey", "featureFlagId", "defaultVariationKey", "n", "_createForOfIteratorHelper", "s", "done", "rule", "segment", "exposition", "respoolTime", "variationByExposition", "targetingResult", "checkTargeting", "variationConfiguration", "ruleHash", "Hasher", "obtainFeatureFlagHashDouble", "campaignId", "x", "totalDeviation", "variationHash", "A", "variation", "type", "RuleType", "EXPERIMENTATION", "updateStorageData", "variationId", "restParameters", "_objectWithoutProperties", "_excluded", "_objectSpread", "e", "f", "TARGETED_DELIVERY", "variationKey", "getExperimentVariation", "c", "deviations", "hashDouble", "obtainExperimentHashDouble", "isUnallocated", "resultVariationId", "k", "deviation", "NotAllocated", "variationResult", "StorageParse", "updatedVariationData", "updatedVariation", "assignmentDate", "Date", "toString", "write", "exports", "require_types", "require_variationConfiguration", "a", "b", "c", "Object", "defineProperty", "value", "enumerable", "configurable", "writable", "e", "f", "prototype", "d", "g", "create", "h", "m", "s", "i", "type", "arg", "call", "forEach", "_invoke", "j", "k", "_typeof", "r", "resolve", "__await", "then", "Error", "o", "method", "delegate", "x", "sent", "_sent", "dispatchException", "abrupt", "done", "iterator", "return", "TypeError", "resultName", "next", "nextLoc", "tryLoc", "catchLoc", "finallyLoc", "afterLoc", "tryEntries", "push", "l", "completion", "reset", "n", "u", "isNaN", "length", "_regeneratorRuntime", "p", "q", "hasOwnProperty", "t", "Symbol", "v", "asyncIterator", "w", "toStringTag", "wrap", "y", "z", "getPrototypeOf", "A", "B", "displayName", "isGeneratorFunction", "constructor", "name", "mark", "setPrototypeOf", "__proto__", "awrap", "AsyncIterator", "async", "Promise", "keys", "reverse", "pop", "values", "prev", "charAt", "slice", "stop", "rval", "complete", "finish", "catch", "_catch", "delegateYield", "asyncGeneratorStep", "_asyncToGenerator", "arguments", "apply", "_classCallCheck", "_defineProperties", "_toPropertyKey", "key", "_createClass", "_defineProperty", "_toPrimitive", "toPrimitive", "String", "Number", "KameleoonClient", "siteCode", "configuration", "internalConfiguration", "ClientSettings", "clientSettings", "settings", "externalStorage", "externalEventSource", "externalPackageInfo", "externalRequestDispatcher", "externalClientConfiguration", "requester", "Requester", "environment", "packageInfo", "requestDispatcher", "trackingCache", "CacheManager", "CACHE_CLEANUP_TIMEOUT", "clientDataStorage", "ExternalStorage", "initialize", "KameleoonStorageKey", "ClientData", "variationDataStorage", "VariationData", "offlineTrackingStorage", "OfflineTracking", "campaignConfiguration", "CampaignConfiguration", "storage", "targetingCleanupInterval", "targetingDataCleanupInterval", "useCache", "result", "throw", "variationConfiguration", "VariationConfiguration", "experiments", "isOfflineModeOn", "ok", "addData", "visitorCode", "Utilities", "validateVisitorCode", "KameleoonError", "KameleoonException", "Initialization", "data", "Array", "addTargetingData", "concat", "shouldAddData", "getVisitorData", "visitorData", "parseVisitorData", "_createForOfIteratorHelper", "dataItem", "isPersistentCustomData", "triggerExperiment", "experimentId", "experiment", "find", "item", "id", "ExperimentConfigurationNotFound", "targetingData", "storedTargetingData", "variationId", "UNALLOCATED_VARIATION_ID", "targetingResult", "checkTargeting", "segment", "getAssociatedVariationId", "else", "error", "NotAllocated", "trackExperiment", "isUnallocated", "NotTargeted", "updateCache", "cacheManager", "trackConversion", "goalId", "revenue", "Conversion", "flush", "trackData", "unsentDataVisitors", "sendOfflineTracking", "visitorCodeKey", "flushData", "getExperiments", "map", "getVisitorExperiments", "isActive", "experimentVariations", "getAssignedVariations", "experimentVariation", "variationResult", "getExperimentVariation", "getExperimentVariationData", "variation", "variations", "JSON", "parse", "customJson", "err", "JSONParse", "VariationNotFound", "getFeatureFlags", "featureFlags", "featureKey", "getVisitorFeatureFlags", "resultFeatureFlags", "featureFlag", "variationData", "getFeatureFlagVariation", "variationKey", "OFF_VARIATION_KEY", "featureFlagId", "getFeatureFlagVariationKey", "_getFeatureFlagVariation", "getFeatureFlagVariable", "variableKey", "FeatureFlagConfigurationNotFound", "variable", "variables", "FeatureFlagVariableNotFound", "featureVariable", "parseFeatureVariable", "isFeatureFlagActive", "getRemoteData", "remoteData", "onConfigurationUpdate", "callback", "getEngineTrackingCode", "getTrackingCode", "Err", "withAssignment", "trackRule", "featureFlagVariation", "Ok", "exports", "KameleoonUtils", "a", "_classCallCheck", "_createClass", "key", "value", "generateRandomString", "length", "randomString", "i", "Math", "floor", "random", "getCookieVisitorCode", "cookie", "pairs", "split", "Cookie", "PairsDelimiter", "pair", "find", "b", "KeyValueDelimiter", "c", "_slicedToArray", "_", "KAMELEOON_COOKIE_KEY", "d", "e", "Ok", "Err", "getResultCookie", "domain", "visitorCode", "cookieArray", "MaxAge", "Path", "Domain", "join", "exports", "_javascriptSdkCore", "require", "_typeof", "a", "Symbol", "iterator", "constructor", "prototype", "Object", "defineProperty", "exports", "value", "KameleoonUtils", "_classCallCheck", "b", "TypeError", "_defineProperties", "c", "d", "length", "enumerable", "configurable", "writable", "_toPropertyKey", "key", "_createClass", "_toPrimitive", "toPrimitive", "call", "String", "Number", "_inherits", "create", "_setPrototypeOf", "setPrototypeOf", "bind", "__proto__", "_createSuper", "_isNativeReflectConstruct", "_getPrototypeOf", "e", "Reflect", "construct", "arguments", "apply", "_possibleConstructorReturn", "_assertThisInitialized", "ReferenceError", "sham", "Proxy", "Boolean", "valueOf", "getPrototypeOf", "KameleoonUtilsConstructor", "getVisitorCode", "domain", "defaultVisitorCode", "cookie", "document", "visitorCodeResult", "getCookieVisitorCode", "ok", "data", "visitorCode", "generateRandomString", "VISITOR_CODE_LENGTH", "resultCookie", "getResultCookie", "split", "Cookie", "PairsDelimiter", "forEach", "item", "KameleoonCoreUtils", "kameleoonUtilsConstructor", "_javascriptSdkCore", "require", "Object", "defineProperty", "exports", "value", "StorageConstructor", "_typeof", "a", "Symbol", "iterator", "constructor", "prototype", "_defineProperty", "b", "c", "_toPropertyKey", "enumerable", "configurable", "writable", "_classCallCheck", "TypeError", "_defineProperties", "d", "length", "key", "_createClass", "_toPrimitive", "toPrimitive", "call", "String", "Number", "initialize", "storage", "Storage", "storageKey", "get", "read", "data", "localStorage", "getItem", "Ok", "Err", "KameleoonError", "KameleoonException", "StorageRead", "write", "setItem", "err", "StorageWrite", "exports", "DELAY_MILLISECONDS", "NUMBER_OF_RETRIES", "a", "b", "c", "Object", "defineProperty", "value", "enumerable", "configurable", "writable", "e", "f", "prototype", "d", "g", "create", "h", "m", "s", "i", "type", "arg", "call", "forEach", "_invoke", "j", "k", "_typeof", "r", "resolve", "__await", "then", "Error", "o", "method", "delegate", "x", "sent", "_sent", "dispatchException", "abrupt", "done", "iterator", "return", "TypeError", "resultName", "next", "nextLoc", "tryLoc", "catchLoc", "finallyLoc", "afterLoc", "tryEntries", "push", "l", "completion", "reset", "n", "u", "isNaN", "length", "_regeneratorRuntime", "p", "q", "hasOwnProperty", "t", "Symbol", "v", "asyncIterator", "w", "toStringTag", "wrap", "y", "z", "getPrototypeOf", "A", "B", "displayName", "isGeneratorFunction", "constructor", "name", "mark", "setPrototypeOf", "__proto__", "awrap", "AsyncIterator", "async", "Promise", "keys", "reverse", "pop", "values", "prev", "charAt", "slice", "stop", "rval", "complete", "finish", "catch", "_catch", "delegateYield", "asyncGeneratorStep", "_asyncToGenerator", "arguments", "apply", "_classCallCheck", "_defineProperties", "_toPropertyKey", "key", "_createClass", "_toPrimitive", "toPrimitive", "String", "Number", "RequestDispatcher", "url", "headers", "body", "fetch", "HttpMethod", "Post", "response", "ok", "NUMBER_OF_RETRIES", "Get", "json", "status", "KameleoonError", "KameleoonException", "ClientConfiguration", "t0", "setTimeout", "DELAY_MILLISECONDS", "MaximumRetriesReached", "RemoteData", "exports", "EventSourceConstructor", "a", "_classCallCheck", "_createClass", "key", "value", "initialize", "url", "ExternalEventSource", "exports", "_defineProperty", "eventSource", "EventSource", "open", "siteCode", "eventType", "onEvent", "addEventListener", "message", "event", "JSON", "parse", "data", "eventSiteCode", "ts", "close", "a", "b", "c", "Object", "defineProperty", "value", "enumerable", "configurable", "writable", "e", "f", "prototype", "d", "g", "create", "h", "m", "s", "i", "type", "arg", "call", "forEach", "_invoke", "j", "k", "_typeof", "r", "resolve", "__await", "then", "Error", "o", "method", "delegate", "x", "sent", "_sent", "dispatchException", "abrupt", "done", "iterator", "return", "TypeError", "resultName", "next", "nextLoc", "tryLoc", "catchLoc", "finallyLoc", "afterLoc", "tryEntries", "push", "l", "completion", "reset", "n", "u", "isNaN", "length", "_regeneratorRuntime", "p", "q", "hasOwnProperty", "t", "Symbol", "v", "asyncIterator", "w", "toStringTag", "wrap", "y", "z", "getPrototypeOf", "A", "B", "displayName", "isGeneratorFunction", "constructor", "name", "mark", "setPrototypeOf", "__proto__", "awrap", "AsyncIterator", "async", "Promise", "keys", "reverse", "pop", "values", "prev", "charAt", "slice", "stop", "rval", "complete", "finish", "catch", "_catch", "delegateYield", "asyncGeneratorStep", "_asyncToGenerator", "arguments", "apply", "_classCallCheck", "_defineProperties", "_toPropertyKey", "key", "_createClass", "_toPrimitive", "toPrimitive", "String", "Number", "_get", "Reflect", "get", "bind", "_superPropBase", "getOwnPropertyDescriptor", "_getPrototypeOf", "_inherits", "_setPrototypeOf", "_createSuper", "_isNativeReflectConstruct", "construct", "_possibleConstructorReturn", "_assertThisInitialized", "ReferenceError", "sham", "Proxy", "Boolean", "valueOf", "KameleoonClient", "siteCode", "configuration", "storage", "StorageConstructor", "eventSource", "EventSourceConstructor", "requestDispatcher", "RequestDispatcher", "internalConfiguration", "externalStorage", "externalEventSource", "externalRequestDispatcher", "externalPackageInfo", "SdkLanguageType", "JAVASCRIPT", "version", "useCache", "KameleoonCore", "exports", "_javascriptSdkCore", "require", "Object", "defineProperty", "exports", "value", "enumerable", "get", "_kameleoonClient", "KameleoonClient", "_kameleoonUtils", "KameleoonUtils", "keys", "forEach", "a", "prototype", "hasOwnProperty", "call", "_exportNames"]
}
