import { SDKConfigurationType, KameleoonCore } from '@kameleoon/javascript-sdk-core';
/**
 * @class
 * KameleoonClient - a class for creating kameleoon client instance
 * */
export declare class KameleoonClient extends KameleoonCore {
    constructor(siteCode: string, configuration?: Partial<SDKConfigurationType>);
    /**
     * @method initialize - an asynchronous method for KameleoonClient initialization by fetching Kameleoon SDK related data from server or by retrieving data from local source if data is up-to-date or update interval has not been reached
     * @param {boolean | undefined} useCache - optional parameter for activating SDK offline mode, if `true` is passed failed polls will not return error and will use cached data if such data is available, default value is `false`. Note: if offline mode is on, SDK will still try to retrieve the latest data.
     * @returns {Promise<boolean>} Promise resolved into boolean field indicating success or fail
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.StorageWrite` Couldn't update storage data
     * - `KameleoonException.ClientConfiguration` Couldn't retrieve client configuration from Kameleoon Api
     * - `KameleoonException.MaximumRetriesReached` Maximum retries reached, request failed
     */
    initialize(useCache?: boolean): Promise<boolean>;
}
