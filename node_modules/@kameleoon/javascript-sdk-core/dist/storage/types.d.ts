import { Result } from 'ts-res';
import { ConfigurationDataType } from '../campaignConfiguration';
import { KameleoonError } from '../kameleoonError';
import { VariationType } from '../variationConfiguration';
import { KameleoonStorageKey } from './constants';
import { TargetingDataType } from '../targeting';
import { TrackDataParamsType, TrackExperimentParamsType } from '../requester/types';
export type ClientDataType = {
    kameleoonTargetingData: TargetingDataType;
    kameleoonConfiguration: ConfigurationDataType;
    lastUpdate: string;
};
export type ExperimentVariationsType = {
    [experimentId: string]: VariationType;
};
export type VariationDataType = {
    [visitorCode: string]: ExperimentVariationsType;
};
type OfflineTrackingParameters = TrackDataParamsType | TrackExperimentParamsType;
export type OfflineTracking = {
    requestParameters?: Array<OfflineTrackingParameters & {
        timestamp: number;
        isExperiment: boolean;
    }>;
};
export type StorageDataType = ClientDataType | VariationDataType | OfflineTracking;
export interface IStorage<T> {
    read: () => Result<T, KameleoonError>;
    write: (data: T) => Result<void, KameleoonError>;
}
/**
 * @interface an interface of External Constructor for Storage which must be implemented by the wrapper constructor to initialize new `IExternalStorage` in order to be able to pass necessary initialization parameters
 * */
export interface IExternalStorageConstructor {
    /**
     * @method initialize - creates and instance of `IExternalStorage` and returns it
     * @param {KameleoonStorageKey} key - an enum variant containing keys for Kameleoon SDK related data stored on storage
     * @returns {IExternalEventSource} an initialized instance of `IExternalEventSource`
     * */
    initialize: (key: KameleoonStorageKey) => IExternalStorage;
}
/**
 * @interface an interface of External Storage which must be implemented to be used as external storage for initialized JS SDK Core.
 * Note: Only React Native SDK supports external storage for the moment
 * */
export interface IExternalStorage {
    /**
     * @property key - an Enum `KameleoonStorageKey` variant containing  a key for Kameleoon SDK related data stored on storage
     * */
    readonly key: KameleoonStorageKey;
    /**
     * @method read - reads data from the storage
     * @returns {Result<string, KameleoonError>} result with an `ok` boolean field indicated success or error. If result is ok contains `data` field with a type `string`, if not contains `error` field with a type of `KameleoonError`
     * */
    read: () => Result<string, KameleoonError>;
    /**
     * @method write - writes data to storage
     * @param {string} data - string representation of data
     * @returns {Result<void, KameleoonError>} result with an `ok` boolean field indicated success or error. If result is ok contains an empty `data`, if not contains `error` field with a type of `KameleoonError`
     * */
    write: (data: string) => Result<void, KameleoonError>;
}
export {};
