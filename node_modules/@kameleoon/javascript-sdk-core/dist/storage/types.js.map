{"version":3,"file":"types.js","names":[],"sources":["../../src/storage/types.ts"],"sourcesContent":["import { Result } from 'ts-res';\nimport { ConfigurationDataType } from 'src/campaignConfiguration';\nimport { KameleoonError } from 'src/kameleoonError';\nimport { VariationType } from 'src/variationConfiguration';\nimport { KameleoonStorageKey } from './constants';\nimport { TargetingDataType } from 'src/targeting';\nimport {\n  TrackDataParamsType,\n  TrackExperimentParamsType,\n} from 'src/requester/types';\n\nexport type ClientDataType = {\n  kameleoonTargetingData: TargetingDataType;\n  kameleoonConfiguration: ConfigurationDataType;\n  lastUpdate: string;\n};\n\nexport type ExperimentVariationsType = {\n  [experimentId: string]: VariationType;\n};\n\nexport type VariationDataType = {\n  [visitorCode: string]: ExperimentVariationsType;\n};\n\ntype OfflineTrackingParameters =\n  | TrackDataParamsType\n  | TrackExperimentParamsType;\n\nexport type OfflineTracking = {\n  requestParameters?: Array<\n    OfflineTrackingParameters & { timestamp: number; isExperiment: boolean }\n  >;\n};\n\nexport type StorageDataType =\n  | ClientDataType\n  | VariationDataType\n  | OfflineTracking;\n\nexport interface IStorage<T> {\n  read: () => Result<T, KameleoonError>;\n  write: (data: T) => Result<void, KameleoonError>;\n}\n\n/**\n * @interface an interface of External Constructor for Storage which must be implemented by the wrapper constructor to initialize new `IExternalStorage` in order to be able to pass necessary initialization parameters\n * */\nexport interface IExternalStorageConstructor {\n  /**\n   * @method initialize - creates and instance of `IExternalStorage` and returns it\n   * @param {KameleoonStorageKey} key - an enum variant containing keys for Kameleoon SDK related data stored on storage\n   * @returns {IExternalEventSource} an initialized instance of `IExternalEventSource`\n   * */\n  initialize: (key: KameleoonStorageKey) => IExternalStorage;\n}\n\n/**\n * @interface an interface of External Storage which must be implemented to be used as external storage for initialized JS SDK Core.\n * Note: Only React Native SDK supports external storage for the moment\n * */\nexport interface IExternalStorage {\n  /**\n   * @property key - an Enum `KameleoonStorageKey` variant containing  a key for Kameleoon SDK related data stored on storage\n   * */\n  readonly key: KameleoonStorageKey;\n  /**\n   * @method read - reads data from the storage\n   * @returns {Result<string, KameleoonError>} result with an `ok` boolean field indicated success or error. If result is ok contains `data` field with a type `string`, if not contains `error` field with a type of `KameleoonError`\n   * */\n  read: () => Result<string, KameleoonError>;\n  /**\n   * @method write - writes data to storage\n   * @param {string} data - string representation of data\n   * @returns {Result<void, KameleoonError>} result with an `ok` boolean field indicated success or error. If result is ok contains an empty `data`, if not contains `error` field with a type of `KameleoonError`\n   * */\n  write: (data: string) => Result<void, KameleoonError>;\n}\n"],"mappings":""}