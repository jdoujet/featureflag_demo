import { CacheManager } from '../cacheManager';
import { CampaignConfiguration } from '../campaignConfiguration';
import { KameleoonVisitorDataType } from '../kameleoonData/types';
import { Requester } from '../requester';
import { TrackDataParamsType, TrackExperimentParamsType } from '../requester/types';
import { IStorage, OfflineTracking } from '../storage/types';
import { SegmentType } from '../targeting';
import { ExternalPackageInfoType, TrackingCacheItemType } from '../types';
import { VariationConfiguration, FeatureFlagVariationType } from '../variationConfiguration';
export type CheckTargetingParametersType = {
    segment: SegmentType | null;
    experimentId: number | null;
    visitorCode: string;
    packageInfo: ExternalPackageInfoType;
    targetingData: KameleoonVisitorDataType;
    campaignConfiguration: CampaignConfiguration;
    variationConfiguration?: VariationConfiguration;
};
export type TrackRuleParametersType = {
    featureFlagVariation: FeatureFlagVariationType;
    campaignConfiguration: CampaignConfiguration;
    visitorCode: string;
    requester: Requester;
    userAgent?: string;
    isOfflineModeOn?: boolean;
    offlineTrackingStorage: IStorage<OfflineTracking>;
};
export type ManageCacheParametersType = {
    cacheManager: CacheManager<TrackingCacheItemType>;
    visitorCode: string;
    experimentId: number;
    variationId: number;
};
export type TrackDataParametersType = {
    visitorCode: string;
    campaignConfiguration: CampaignConfiguration;
    requester: Requester;
    isOfflineModeOn?: boolean;
    offlineTrackingStorage: IStorage<OfflineTracking>;
};
export type TrackExperimentParametersType = {
    campaignConfiguration: CampaignConfiguration;
    visitorCode: string;
    requester: Requester;
    variationId: number;
    experimentId: number;
    isUnallocated: boolean;
    isOfflineModeOn?: boolean;
    offlineTrackingStorage: IStorage<OfflineTracking>;
};
export type AddToOfflineTrackingParametersType = {
    item: TrackExperimentParamsType | TrackDataParamsType;
    isExperiment: boolean;
    storage: IStorage<OfflineTracking>;
    onSuccess?: () => void;
};
export type SendOfflineTrackingParametersType = {
    storage: IStorage<OfflineTracking>;
    requester: Requester;
};
export type DeleteFromOfflineTrackingParametersType = {
    timestamps: number[];
    storage: IStorage<OfflineTracking>;
};
