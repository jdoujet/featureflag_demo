import { Result } from 'ts-res';
import { KameleoonError } from '../kameleoonError';
import { FeatureVariableResultType, TrackingCacheItemType } from '../types';
import { CampaignConfiguration, FeatureVariableType } from '../campaignConfiguration';
import { CustomData, KameleoonDataType } from '../kameleoonData';
import { CacheManager } from '../cacheManager';
import { GetVisitorDataResultType } from '../requester';
import { CheckTargetingParametersType, ManageCacheParametersType, TrackDataParametersType, TrackRuleParametersType, SendOfflineTrackingParametersType, TrackExperimentParametersType } from './types';
export declare class Utilities {
    static checkTargeting({ segment, visitorCode, targetingData, experimentId, variationConfiguration, campaignConfiguration, packageInfo, }: CheckTargetingParametersType): Result<boolean, KameleoonError>;
    static validateVisitorCode(visitorCode: string): Result<void, KameleoonError>;
    static getDataUrl(visitorCode: string, campaignConfiguration: CampaignConfiguration): string;
    static trackRule({ featureFlagVariation, campaignConfiguration, visitorCode, requester, isOfflineModeOn, offlineTrackingStorage, }: TrackRuleParametersType): Promise<void>;
    static parseFeatureVariable(variable: FeatureVariableType): Result<FeatureVariableResultType, KameleoonError>;
    static parseVisitorData(data: GetVisitorDataResultType): KameleoonDataType[];
    static parseRegExp(value: string): RegExp;
    static getUserAgent(visitorCode: string, campaignConfiguration: CampaignConfiguration): string | undefined;
    static isCustomData(dataItem: KameleoonDataType): dataItem is CustomData;
    static updateCache({ cacheManager, visitorCode, experimentId, variationId, }: ManageCacheParametersType): void;
    static getTrackingCode(trackingCache: CacheManager<TrackingCacheItemType>, visitorCode: string): string;
    static trackData({ visitorCode, campaignConfiguration, requester, isOfflineModeOn, offlineTrackingStorage, }: TrackDataParametersType): Promise<void>;
    static trackExperiment({ variationId, experimentId, isUnallocated, visitorCode, campaignConfiguration, requester, isOfflineModeOn, offlineTrackingStorage, }: TrackExperimentParametersType): Promise<void>;
    static getNonce(): string;
    static sendOfflineTracking({ requester, storage, }: SendOfflineTrackingParametersType): Promise<void>;
    private static addItemToOfflineTracking;
    private static deleteFromOfflineTracking;
}
