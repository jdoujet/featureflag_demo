import { Browser, Conversion, CustomData, Device, PageView, UserAgent } from './';
export type KameleoonDataItemType = BrowserDataType | ConversionDataType | CustomDataType | DeviceDataType | PageViewDataType | UserAgentDataType;
/**
 * @interface an interface of KameleoonData
 * each class instance will have url getter method
 * for handling url of different data types
 * */
export interface IKameleoonData {
    readonly url: string;
    readonly data: KameleoonDataItemType;
}
/**
 * @type a tuple of each possible type of data for `addData` method
 * of KameleoonClient
 * */
export type KameleoonDataType = Browser | Conversion | CustomData | Device | PageView | UserAgent;
export type ActivityTimePropertyType = {
    lastActivityTime: number;
};
export type ExistingCustomDataType = NonNullable<KameleoonVisitorDataType[KameleoonData.CustomData]>;
export type ExistingDataType<T extends KameleoonData> = NonNullable<KameleoonVisitorDataType[T]>;
export type KameleoonVisitorDataType<T = ActivityTimePropertyType> = {
    [KameleoonData.CustomData]?: {
        [index: number]: (CustomDataType & T) | undefined;
    };
    [KameleoonData.Conversion]?: ConversionDataType & T;
    [KameleoonData.UserAgent]?: UserAgentDataType & T;
    [KameleoonData.PageView]?: PageViewDataType & T;
    [KameleoonData.Browser]?: BrowserDataType & T;
    [KameleoonData.Device]?: DeviceDataType & T;
};
export declare enum KameleoonData {
    CustomData = "customData",
    PageView = "pageView",
    Browser = "browser",
    Conversion = "conversion",
    Device = "device",
    UserAgent = "userAgent"
}
type SharedDataPropertiesType = {
    type: KameleoonData;
    nonce: string;
};
export type BrowserDataType = {
    browser: BrowserType;
    version?: number;
} & SharedDataPropertiesType;
export type ConversionDataType = {
    goalId: number;
    revenue: number;
    negative: boolean;
} & SharedDataPropertiesType;
export type CustomDataType = {
    index: number;
    value: string | string[];
} & SharedDataPropertiesType;
export type DeviceDataType = {
    device: DeviceType;
} & SharedDataPropertiesType;
export type PageViewDataType = {
    urlAddress: string;
    title: string;
    referrers?: number[];
} & SharedDataPropertiesType;
export type UserAgentDataType = {
    value: string;
} & SharedDataPropertiesType;
/**
 * @param {number} goalId - an id of a goal to track
 * @param {number | undefined} revenue - an optional parameter for revenue, default value is `0`
 * @param {boolean | undefined} negative - an optional parameter identifying whether the conversion should be removed, default value is `false`
 * */
export type ConversionParametersType = {
    goalId: number;
    revenue?: number;
    negative?: boolean;
};
/**
 * @param {string} urlAddress - url address of the page to track
 * @param {string} title - title of the web page
 * @param {number[] | undefined} referrers - an optional parameter containing a list of referrersIndices, has no default value
 * */
export type PageViewParametersType = {
    urlAddress: string;
    title: string;
    referrers?: number[];
};
/**
 * @readonly
 * @enum {string} an Enum containing all possible variants for device type
 * */
export declare enum DeviceType {
    Phone = "PHONE",
    Tablet = "TABLET",
    Desktop = "DESKTOP"
}
/**
 * @readonly
 * @enum {string} an Enum containing all possible variants for browser type
 * */
export declare enum BrowserType {
    Chrome = "CHROME",
    InternetExplorer = "IE",
    Firefox = "FIREFOX",
    Safari = "SAFARI",
    Opera = "OPERA",
    Other = "OTHER"
}
export declare const BrowserIndexMap: {
    readonly CHROME: 0;
    readonly IE: 1;
    readonly FIREFOX: 2;
    readonly SAFARI: 3;
    readonly OPERA: 4;
    readonly OTHER: 5;
};
export {};
