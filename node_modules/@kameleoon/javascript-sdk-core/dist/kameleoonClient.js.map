{"version":3,"file":"kameleoonClient.js","names":["a","b","c","Object","defineProperty","value","enumerable","configurable","writable","e","f","prototype","d","g","create","h","m","s","i","type","arg","call","forEach","_invoke","j","k","_typeof","r","resolve","__await","then","Error","o","method","delegate","x","sent","_sent","dispatchException","abrupt","done","iterator","return","TypeError","resultName","next","nextLoc","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","l","completion","reset","n","u","isNaN","length","_regeneratorRuntime","p","q","hasOwnProperty","t","Symbol","v","asyncIterator","w","toStringTag","wrap","y","z","getPrototypeOf","A","B","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","AsyncIterator","async","Promise","keys","reverse","pop","values","prev","charAt","slice","stop","rval","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","KameleoonClient","siteCode","configuration","internalConfiguration","ClientSettings","clientSettings","settings","externalStorage","externalEventSource","externalPackageInfo","externalRequestDispatcher","externalClientConfiguration","requester","Requester","environment","packageInfo","requestDispatcher","trackingCache","CacheManager","CACHE_CLEANUP_TIMEOUT","clientDataStorage","ExternalStorage","initialize","KameleoonStorageKey","ClientData","variationDataStorage","VariationData","offlineTrackingStorage","OfflineTracking","campaignConfiguration","CampaignConfiguration","storage","targetingCleanupInterval","targetingDataCleanupInterval","useCache","result","throw","variationConfiguration","VariationConfiguration","experiments","isOfflineModeOn","ok","addData","visitorCode","Utilities","validateVisitorCode","KameleoonError","KameleoonException","Initialization","data","Array","addTargetingData","concat","shouldAddData","getVisitorData","visitorData","parseVisitorData","_createForOfIteratorHelper","dataItem","isPersistentCustomData","triggerExperiment","experimentId","experiment","find","item","id","ExperimentConfigurationNotFound","targetingData","storedTargetingData","variationId","UNALLOCATED_VARIATION_ID","targetingResult","checkTargeting","segment","getAssociatedVariationId","else","error","NotAllocated","trackExperiment","isUnallocated","NotTargeted","updateCache","cacheManager","trackConversion","goalId","revenue","Conversion","flush","trackData","unsentDataVisitors","sendOfflineTracking","visitorCodeKey","flushData","getExperiments","map","getVisitorExperiments","isActive","experimentVariations","getAssignedVariations","experimentVariation","variationResult","getExperimentVariation","getExperimentVariationData","variation","variations","JSON","parse","customJson","err","JSONParse","VariationNotFound","getFeatureFlags","featureFlags","featureKey","getVisitorFeatureFlags","resultFeatureFlags","featureFlag","variationData","getFeatureFlagVariation","variationKey","OFF_VARIATION_KEY","featureFlagId","getFeatureFlagVariationKey","_getFeatureFlagVariation","getFeatureFlagVariable","variableKey","FeatureFlagConfigurationNotFound","variable","variables","FeatureFlagVariableNotFound","featureVariable","parseFeatureVariable","isFeatureFlagActive","getRemoteData","remoteData","onConfigurationUpdate","callback","getEngineTrackingCode","getTrackingCode","Err","withAssignment","trackRule","featureFlagVariation","Ok","exports"],"sources":["../src/kameleoonClient.ts"],"sourcesContent":["import { Err, Ok, Result } from 'ts-res';\nimport { CacheManager } from './cacheManager';\nimport { CampaignConfiguration, JSONType } from './campaignConfiguration';\nimport { ClientSettings } from './clientSettings';\nimport {\n  CACHE_CLEANUP_TIMEOUT,\n  OFF_VARIATION_KEY,\n  UNALLOCATED_VARIATION_ID,\n} from './constants';\nimport { Conversion, KameleoonDataType } from './kameleoonData';\nimport { KameleoonError, KameleoonException } from './kameleoonError';\nimport { Requester } from './requester';\nimport {\n  ClientDataType,\n  KameleoonStorageKey,\n  VariationDataType,\n} from './storage';\nimport { ExternalStorage } from './storage/externalStorage';\nimport {\n  TrackConversionParamsType,\n  ExperimentType,\n  FeatureFlagType,\n  GetFeatureFlagVariableParamsType,\n  FeatureVariableResultType,\n  SDKCoreParameters,\n  TrackingCacheItemType,\n  ExternalPackageInfoType,\n} from './types';\nimport { Utilities } from './utilities';\nimport {\n  FeatureFlagVariationType,\n  VariationConfiguration,\n} from './variationConfiguration';\nimport { OfflineTracking } from './storage/types';\n\n/**\n * @interface an interface of KameleoonClient instance\n */\nexport interface IKameleoonClient {\n  /**\n   * @method initialize - an asynchronous method for KameleoonClient initialization by fetching Kameleoon SDK related data from server or by retrieving data from local source if data is up-to-date or update interval has not been reached\n   * @param {boolean | undefined} useCache - optional parameter for activating SDK offline mode, if `true` is passed failed polls will not return error and will use cached data if such data is available, default value is `false`. Note: if offline mode is on, SDK will still try to retrieve the latest data.\n   * @returns {Promise<boolean>} Promise resolved into boolean field indicating success or fail\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.StorageWrite` Couldn't update storage data\n   * - `KameleoonException.ClientConfiguration` Couldn't retrieve client configuration from Kameleoon Api\n   * - `KameleoonException.MaximumRetriesReached` Maximum retries reached, request failed\n   */\n  initialize(useCache?: boolean): Promise<boolean>;\n  initialize(): Promise<boolean>;\n  /**\n   * @method addData - method for adding targeting data to the storage so that other methods could decide whether the current visitor is targeted or not. Note: userAgent data will not be stored in storage like other data, and it will be sent with every tracking request for bot filtration.\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {KameleoonDataType[]} kameleoonData - number of instances of any type of `KameleoonData`, can be added solely in array or as a sequential arguments\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.StorageWrite` Couldn't update storage data\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  addData: (visitorCode: string, ...data: KameleoonDataType[]) => void;\n  /**\n   * @method getRemoteVisitorData - an asynchronous method for retrieving custom data for the latest visit of `visitorCode` from Kameleoon Data API and optionally adding it to the storage so that other methods could decide whether the current visitor is targeted or not.\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {boolean | undefined} shouldAddData - optional parameter for adding retrieved data to the storage like `addData` method does, default value is `true`\n   * @returns {KameleoonDataType[]} promise resolved to an array of `KameleoonData` instances, only includes custom data\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.RemoteData` - Couldn't retrieve data from Kameleoon server\n   */\n  getRemoteVisitorData: (\n    visitorCode: string,\n    shouldAddData?: boolean,\n  ) => Promise<KameleoonDataType[]>;\n  /**\n   * @method triggerExperiment - triggers experiment by assigning the variation to the user with `visitorCode`, if the variation is already assigned just returns it's id. Note: returned id `0` indicates default variation.  At the same time sends tracking request.\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {number} experimentId - id of experiment running for the current visitor\n   * @returns {number} associated variationId which is successfully searched/assigned\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.ExperimentConfigurationNotFound` No configuration found for provided `experimentId`\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.StorageRead` Couldn't find associated experiment by provided `experimentId` and `visitorCode` inside the storage\n   * - `KameleoonException.NotTargeted` Current visitor is not targeted\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  triggerExperiment: (visitorCode: string, experimentId: number) => number;\n  /**\n   * @method trackConversion - creates and adds `Conversion` data to the visitor with specified parameters and executes `flush`. Note: it's a helper method for the quick and convenient conversion tracking, however creating and adding `Conversion` manually allows more flexible `Conversion` with `negative` parameter\n   * @param {TrackConversionParamsType} conversionParameters - `visitorCode`, `goalId` and `revenue` parameters for data tracking\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.StorageWrite` Couldn't update storage data\n   */\n  trackConversion: ({\n    visitorCode,\n    goalId,\n    revenue,\n  }: TrackConversionParamsType) => void;\n  /**\n   * @method flush - takes visitor associated kameleoon data and sends the data tracking request with collected data,\n   * sent data is removed from `KameleoonClient` instance but not from the storage for correct targeting checks. If no visitor is passed,\n   * then data for all visitors is sent and removed from `KameleoonClient` instance. Moreover, regardless of visitor code input\n   * the method first attemps to send all previously failed tracking requests which were stored locally during the offline mode.\n   * @param {string | undefined} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  flush: (visitorCode: string) => void;\n  /**\n   * @deprecated Use flush method instead.\n   */\n  flushData: (visitorCode: string) => void;\n  /**\n   * @method getExperiments - returns a list of experiments stored in the client configuration\n   * @returns {ExperimentType[]} a list of all experiments items with `id` and `name` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  getExperiments: () => ExperimentType[];\n  /**\n   * @method getVisitorExperiments - returns a list of experiments that the visitor with `visitorCode` is targeted by and that are *active* for the visitor (visitor will have one of the variations allocated if the experiment will be triggered).\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {boolean | undefined} isAllocated - boolean value indicating that only experiments *allocated* for visitor will be returned. Default value is `true`\n   * @returns {ExperimentType[]} a list of all experiments items with `id` and `name` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  getVisitorExperiments: (\n    visitorCode: string,\n    isAllocated?: boolean,\n  ) => ExperimentType[];\n  /**\n   * @method getExperimentVariationData - returns variation data in JSON format for the variation with `variationId`\n   * @param {number} variationId - id of variation\n   * @returns {JSONType} variation data in JSON format\n   * @throws `KameleoonError` with one of the following `type` s:\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.JSONParse` - Couldn't pass JSON value\n   * - `KameleoonException.VariationNotFound` - No variation found for provided `variationId`\n   */\n  getExperimentVariationData: (variationId: number) => JSONType | null;\n  /**\n   * @method getFeatureFlags - returns a list of feature flags stored in the client configuration\n   * @returns {FeatureFlagType[]} a list of all feature flags items with `id` and `key` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  getFeatureFlags: () => FeatureFlagType[];\n  /**\n   * @method getVisitorFeatureFlags - returns a list of feature flags that the visitor with `visitorCode` that is targeted by and that are *active* for the visitor (visitor will have one of the variations allocated).\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @returns {FeatureFlagType[]} a list of all feature flags items with `id` and `key` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   */\n  getVisitorFeatureFlags: (visitorCode: string) => FeatureFlagType[];\n  /**\n   * @method isFeatureFlagActive - returns a boolean indicating whether the visitor with `visitorCode` has `featureKey` active for him, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {string} featureKey - a unique key for feature flag\n   * @returns {boolean} a boolean indicator of whether the feature flag with `featureKey` is active for visitor with `visitorCode`\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`\n   * - `KameleoonException.DataInconsistency` - Allocated variation was found but there is no feature flag with according `featureKey`.\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   */\n  isFeatureFlagActive: (visitorCode: string, featureKey: string) => boolean;\n  /**\n   * @method getFeatureFlagVariationKey - returns variation key for the visitor under `visitorCode` in the found feature flag, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {string} featureKey - a unique key for feature flag\n   * @returns {string} a string containing variable key for the allocated feature flag variation for the provided visitor\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   */\n  getFeatureFlagVariationKey: (\n    visitorCode: string,\n    featureKey: string,\n  ) => string;\n  /**\n   * @method getFeatureFlagVariable - returns a variable for the visitor under `visitorCode` in the found feature flag, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request\n   * @param {GetFeatureFlagVariableParamsType} parameters - an object with parameters of a type `GetFeatureFlagVariableParamsType`, see the type for details.\n   * @returns {FeatureVariableResultType} a variable object containing `type` and `value` fields, `type` can be checked against `FeatureVariableType` enum, if the `type` is `FeatureVariableType.BOOLEAN` then the `value` type will be `boolean` and so on.\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`\n   * - `KameleoonException.FeatureFlagVariableNotFound` - No feature variable was found for provided `visitorCode` and `variableKey`\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   * - `KameleoonException.JSONParse` - Couldn't pass JSON value\n   * - `KameleoonException.NumberParse` - Couldn't pass Number value\n   */\n  getFeatureFlagVariable: ({\n    visitorCode,\n    featureKey,\n    variableKey,\n  }: GetFeatureFlagVariableParamsType) => FeatureVariableResultType;\n  /**\n   * @method getRemoteData - returns a data which is stored for specified siteCode on a remote Kameleoon server.\n   * @param {string} key - unique key that the data you try to get is associated with.\n   * @returns {JSONType} - promise with retrieving data for specific key.\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.RemoteData` - Couldn't retrieve data from Kameleoon server\n   */\n  getRemoteData: (key: string) => Promise<JSONType>;\n  /**\n   * @method getEngineTrackingCode - returns Kameleoon tracking code for the current visitor. Tracking code is built of the experiments that were triggered and feature flag variations that were assigned during the last 5 seconds\n   * See [Kameleoon Automation API](https://developers.kameleoon.com/apis/activation-api-js/api-reference#trigger-1) for the details\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @returns {string} Kameleoon tracking code\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty\n   */\n  getEngineTrackingCode: (visitorCode: string) => string;\n  /**\n   * @method onConfigurationUpdate - fires a callback on client configuration update. Note: this method only works for server sent events of real time update.\n   * @param {() => void} callback - callback function with no parameters that will be called upon configuration update\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  onConfigurationUpdate: (callback: () => void) => void;\n}\n\n/**\n * @class\n * KameleoonClient - a class for creating kameleoon client instance\n * for communicating with Kameleoon JavaScript SDK Core, when new instance is created\n */\nexport class KameleoonClient implements IKameleoonClient {\n  private variationConfiguration?: VariationConfiguration;\n  private campaignConfiguration: CampaignConfiguration;\n  private variationDataStorage: ExternalStorage<VariationDataType>;\n  private offlineTrackingStorage: ExternalStorage<OfflineTracking>;\n  private trackingCache: CacheManager<TrackingCacheItemType>;\n  private requester: Requester;\n  private externalPackageInfo: ExternalPackageInfoType;\n  private isOfflineModeOn?: boolean;\n\n  /**\n   * @param {SDKCoreParameters} sdkCoreParameters - parameters for initializing sdk core\n   */\n  constructor({\n    siteCode,\n    configuration,\n    internalConfiguration,\n  }: SDKCoreParameters) {\n    const { settings: clientSettings } = new ClientSettings(\n      siteCode,\n      configuration,\n    );\n    const {\n      externalStorage,\n      externalEventSource,\n      externalPackageInfo,\n      externalRequestDispatcher,\n      externalClientConfiguration,\n    } = internalConfiguration;\n    const requester = new Requester({\n      siteCode,\n      environment: clientSettings.environment,\n      packageInfo: externalPackageInfo,\n      requestDispatcher: externalRequestDispatcher,\n    });\n    const trackingCache = new CacheManager<TrackingCacheItemType>(\n      CACHE_CLEANUP_TIMEOUT,\n    );\n    const clientDataStorage = new ExternalStorage<ClientDataType>(\n      externalStorage.initialize(KameleoonStorageKey.ClientData),\n    );\n    const variationDataStorage = new ExternalStorage<VariationDataType>(\n      externalStorage.initialize(KameleoonStorageKey.VariationData),\n    );\n    const offlineTrackingStorage = new ExternalStorage<OfflineTracking>(\n      externalStorage.initialize(KameleoonStorageKey.OfflineTracking),\n    );\n    const campaignConfiguration = new CampaignConfiguration({\n      settings: clientSettings,\n      storage: clientDataStorage,\n      requester,\n      externalClientConfiguration,\n      targetingCleanupInterval: configuration?.targetingDataCleanupInterval,\n      offlineTrackingStorage,\n      externalEventSource,\n    });\n\n    this.requester = requester;\n    this.trackingCache = trackingCache;\n    this.campaignConfiguration = campaignConfiguration;\n    this.variationDataStorage = variationDataStorage;\n    this.externalPackageInfo = externalPackageInfo;\n    this.offlineTrackingStorage = offlineTrackingStorage;\n  }\n\n  public async initialize(useCache?: boolean): Promise<boolean> {\n    const result = await this.campaignConfiguration.initialize(useCache);\n    result.throw();\n\n    const variationConfiguration = new VariationConfiguration(\n      this.campaignConfiguration.experiments,\n      this.variationDataStorage,\n    );\n\n    this.variationConfiguration = variationConfiguration;\n\n    this.isOfflineModeOn = useCache;\n\n    return result.ok;\n  }\n\n  public addData(visitorCode: string, ...data: KameleoonDataType[]): void {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    this.campaignConfiguration.addTargetingData(visitorCode, ...data).throw();\n  }\n\n  public async getRemoteVisitorData(\n    visitorCode: string,\n    shouldAddData = true,\n  ): Promise<KameleoonDataType[]> {\n    const result = await this.requester.getVisitorData(visitorCode);\n    const data = result.throw();\n\n    const visitorData = Utilities.parseVisitorData(data);\n\n    for (const dataItem of visitorData) {\n      if (\n        shouldAddData ||\n        this.campaignConfiguration.isPersistentCustomData(dataItem)\n      ) {\n        this.addData(visitorCode, dataItem);\n      }\n    }\n\n    return visitorData;\n  }\n\n  public triggerExperiment(visitorCode: string, experimentId: number): number {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    if (!this.campaignConfiguration || !this.variationConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    const experiment = this.campaignConfiguration.experiments.find(\n      (item) => item.id === String(experimentId),\n    );\n\n    if (!experiment) {\n      throw new KameleoonError(\n        KameleoonException.ExperimentConfigurationNotFound,\n        experimentId,\n        visitorCode,\n      );\n    }\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    let variationId = UNALLOCATED_VARIATION_ID;\n\n    const targetingResult = Utilities.checkTargeting({\n      visitorCode,\n      experimentId,\n      targetingData,\n      segment: experiment.segment,\n      campaignConfiguration: this.campaignConfiguration,\n      variationConfiguration: this.variationConfiguration,\n      packageInfo: this.externalPackageInfo,\n    }).throw();\n\n    variationId = this.variationConfiguration\n      .getAssociatedVariationId(visitorCode, experimentId)\n      .else((error) => {\n        if (error.type === KameleoonException.NotAllocated) {\n          Utilities.trackExperiment({\n            requester: this.requester,\n            campaignConfiguration: this.campaignConfiguration,\n            isUnallocated: true,\n            variationId,\n            visitorCode,\n            experimentId,\n            isOfflineModeOn: this.isOfflineModeOn,\n            offlineTrackingStorage: this.offlineTrackingStorage,\n          });\n\n          return UNALLOCATED_VARIATION_ID;\n        }\n\n        throw error;\n      });\n\n    Utilities.trackExperiment({\n      requester: this.requester,\n      campaignConfiguration: this.campaignConfiguration,\n      isUnallocated: false,\n      variationId,\n      visitorCode,\n      experimentId,\n      isOfflineModeOn: this.isOfflineModeOn,\n      offlineTrackingStorage: this.offlineTrackingStorage,\n    });\n\n    if (!targetingResult) {\n      throw new KameleoonError(KameleoonException.NotTargeted, visitorCode);\n    }\n\n    Utilities.updateCache({\n      cacheManager: this.trackingCache,\n      visitorCode,\n      experimentId,\n      variationId,\n    });\n\n    return variationId;\n  }\n\n  public trackConversion({\n    visitorCode,\n    goalId,\n    revenue,\n  }: TrackConversionParamsType): void {\n    this.addData(visitorCode, new Conversion({ goalId, revenue }));\n    this.flush(visitorCode);\n  }\n\n  public flush(visitorCode?: string): void {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    if (typeof visitorCode === 'string') {\n      Utilities.validateVisitorCode(visitorCode).throw();\n    }\n\n    if (visitorCode) {\n      Utilities.trackData({\n        visitorCode,\n        campaignConfiguration: this.campaignConfiguration,\n        requester: this.requester,\n        isOfflineModeOn: this.isOfflineModeOn,\n        offlineTrackingStorage: this.offlineTrackingStorage,\n      });\n      return;\n    }\n\n    // --- Note ---\n    // `Utilities.trackData` executes `Utilities.sendOfflineTracking` asynchronously at first, but\n    // we need to execute `Utilities.sendOfflineTracking` even if calling `Utilities.trackData` is skipped\n    // due to lack of unsent data\n    if (!this.campaignConfiguration.unsentDataVisitors.length) {\n      Utilities.sendOfflineTracking({\n        requester: this.requester,\n        storage: this.offlineTrackingStorage,\n      });\n      return;\n    }\n\n    for (const visitorCodeKey of this.campaignConfiguration\n      .unsentDataVisitors) {\n      Utilities.trackData({\n        visitorCode: visitorCodeKey,\n        campaignConfiguration: this.campaignConfiguration,\n        requester: this.requester,\n        isOfflineModeOn: this.isOfflineModeOn,\n        offlineTrackingStorage: this.offlineTrackingStorage,\n      });\n    }\n  }\n\n  public flushData(visitorCode?: string): void {\n    this.flush(visitorCode);\n  }\n\n  public getExperiments(): ExperimentType[] {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    return this.campaignConfiguration.experiments.map(({ id, name }) => ({\n      id: Number(id),\n      name,\n    }));\n  }\n\n  public getVisitorExperiments(\n    visitorCode: string,\n    isActive = true,\n  ): ExperimentType[] {\n    if (!this.variationConfiguration || !this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    const experiments = this.campaignConfiguration.experiments;\n    const result: ExperimentType[] = [];\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    for (const experiment of experiments) {\n      const { id, name, segment } = experiment;\n\n      const targetingResult = Utilities.checkTargeting({\n        targetingData,\n        visitorCode,\n        segment,\n        variationConfiguration: this.variationConfiguration,\n        campaignConfiguration: this.campaignConfiguration,\n        experimentId: Number(id),\n        packageInfo: this.externalPackageInfo,\n      }).throw();\n\n      if (!targetingResult) {\n        continue;\n      }\n\n      // -- If `isActive=false` then return every experiment\n      if (!isActive) {\n        result.push({ id: Number(id), name });\n        continue;\n      }\n\n      // -- Else first check if there are saved variations for the experiment\n      // if there is at least one than it's active\n      const experimentVariations =\n        this.variationConfiguration.getAssignedVariations(visitorCode);\n\n      if (experimentVariations.ok) {\n        const experimentVariation = experimentVariations.data[experiment.id];\n\n        if (experimentVariation) {\n          result.push({ id: Number(id), name });\n          continue;\n        }\n      }\n\n      // -- Second check if the experiment will have an allocated variation upon triggering\n      // if yes than it's active\n      const variationResult =\n        this.variationConfiguration.getExperimentVariation(\n          visitorCode,\n          experiment,\n        );\n\n      if (variationResult.ok) {\n        result.push({ id: Number(id), name });\n      }\n    }\n\n    return result;\n  }\n\n  public getExperimentVariationData(variationId: number): JSONType {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    const experiments = this.campaignConfiguration.experiments;\n\n    for (const experiment of experiments) {\n      const variation = experiment.variations.find(\n        (item) => item.id === String(variationId),\n      );\n\n      if (variation) {\n        try {\n          return JSON.parse(variation.customJson);\n        } catch (err) {\n          throw new KameleoonError(KameleoonException.JSONParse, err);\n        }\n      }\n    }\n\n    throw new KameleoonError(KameleoonException.VariationNotFound);\n  }\n\n  public getFeatureFlags(): FeatureFlagType[] {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    return this.campaignConfiguration.featureFlags.map(\n      ({ id, featureKey }) => ({ id, key: featureKey }),\n    );\n  }\n\n  public getVisitorFeatureFlags(visitorCode: string): FeatureFlagType[] {\n    if (!this.variationConfiguration || !this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    const featureFlags = this.campaignConfiguration.featureFlags;\n    const resultFeatureFlags: FeatureFlagType[] = [];\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    for (const featureFlag of featureFlags) {\n      const variationData = this.variationConfiguration\n        .getFeatureFlagVariation({\n          visitorCode,\n          targetingData,\n          featureFlag,\n          campaignConfiguration: this.campaignConfiguration,\n          packageInfo: this.externalPackageInfo,\n        })\n        .throw();\n\n      if (variationData.variationKey !== OFF_VARIATION_KEY) {\n        const { featureFlagId, featureKey } = variationData;\n\n        resultFeatureFlags.push({ id: featureFlagId, key: featureKey });\n      }\n    }\n\n    return resultFeatureFlags;\n  }\n\n  public getFeatureFlagVariationKey(\n    visitorCode: string,\n    featureKey: string,\n  ): string {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    const { variationKey } = this._getFeatureFlagVariation(\n      visitorCode,\n      featureKey,\n    ).throw();\n\n    return variationKey;\n  }\n\n  public getFeatureFlagVariable({\n    visitorCode,\n    featureKey,\n    variableKey,\n  }: GetFeatureFlagVariableParamsType): FeatureVariableResultType {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    const { variationKey } = this._getFeatureFlagVariation(\n      visitorCode,\n      featureKey,\n    ).throw();\n\n    // --- Note ---\n    // `_getFeatureFlagVariation` already checks `campaignConfiguration` initialization\n    const featureFlags = (this.campaignConfiguration as CampaignConfiguration)\n      .featureFlags;\n\n    const featureFlag = featureFlags.find(\n      (item) => item.featureKey === featureKey,\n    );\n\n    if (!featureFlag) {\n      throw new KameleoonError(\n        KameleoonException.FeatureFlagConfigurationNotFound,\n        featureKey,\n        visitorCode,\n      );\n    }\n\n    const variable = featureFlag.variations\n      .find((item) => item.key === variationKey)\n      ?.variables.find((item) => item.key === variableKey);\n\n    if (!variable) {\n      throw new KameleoonError(\n        KameleoonException.FeatureFlagVariableNotFound,\n        variableKey,\n        visitorCode,\n      );\n    }\n\n    const featureVariable = Utilities.parseFeatureVariable(variable).throw();\n\n    return featureVariable;\n  }\n\n  public isFeatureFlagActive(visitorCode: string, featureKey: string): boolean {\n    const variationKey = this.getFeatureFlagVariationKey(\n      visitorCode,\n      featureKey,\n    );\n\n    return variationKey !== OFF_VARIATION_KEY;\n  }\n\n  public async getRemoteData(key: string): Promise<JSONType> {\n    const remoteData = await this.requester.getRemoteData(key);\n\n    return remoteData.throw();\n  }\n\n  public onConfigurationUpdate(callback: () => void): void {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    this.campaignConfiguration.onConfigurationUpdate(callback);\n  }\n\n  public getEngineTrackingCode(visitorCode: string): string {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    return Utilities.getTrackingCode(this.trackingCache, visitorCode);\n  }\n\n  private _getFeatureFlagVariation(\n    visitorCode: string,\n    featureKey: string,\n  ): Result<FeatureFlagVariationType, KameleoonError> {\n    if (!this.variationConfiguration || !this.campaignConfiguration) {\n      return Err(new KameleoonError(KameleoonException.Initialization));\n    }\n\n    const featureFlags = this.campaignConfiguration.featureFlags;\n    const featureFlag = featureFlags.find(\n      (item) => item.featureKey === featureKey,\n    );\n\n    if (!featureFlag) {\n      return Err(\n        new KameleoonError(\n          KameleoonException.FeatureFlagConfigurationNotFound,\n          featureKey,\n          visitorCode,\n        ),\n      );\n    }\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    const variationData = this.variationConfiguration\n      .getFeatureFlagVariation({\n        visitorCode,\n        featureFlag,\n        targetingData,\n        withAssignment: true,\n        campaignConfiguration: this.campaignConfiguration,\n        packageInfo: this.externalPackageInfo,\n      })\n      .throw();\n\n    const { experimentId, variationId } = variationData;\n\n    if (typeof variationId === 'number' && typeof experimentId === 'number') {\n      Utilities.updateCache({\n        cacheManager: this.trackingCache,\n        visitorCode,\n        experimentId,\n        variationId,\n      });\n    }\n\n    Utilities.trackRule({\n      visitorCode,\n      requester: this.requester,\n      featureFlagVariation: variationData,\n      campaignConfiguration: this.campaignConfiguration,\n      isOfflineModeOn: this.isOfflineModeOn,\n      offlineTrackingStorage: this.offlineTrackingStorage,\n    });\n\n    return Ok(variationData);\n  }\n}\n"],"mappings":"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"}