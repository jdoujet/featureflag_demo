/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import { JSONType } from './campaignConfiguration/types';
import { SdkLanguageType } from './constants';
import { IExternalEventSourceConstructor } from './eventSource';
import { IExternalStorageConstructor } from './storage';
import { IExternalRequestDispatcher, GetClientConfigurationResultType } from './requester';
/**
 * @param {number} updateInterval - update interval in _minutes_ for sdk configuration, minimum value is 1 minute
 * @defaultvalue 60
 *
 * @param {Environment} environment - feature flag environment
 * @defaultvalue Environment.Production
 *
 * @param {number | undefined} targetingDataCleanupInterval - interval in _minutes_ for cleaning up targeting data, minimum value is 1 minute
 * Note: if not specified, default value will be used
 * @defaultvalue
 * - JavaScript SDK: `undefined` (no cleanup)
 * - React/React Native SDK: `undefined` (no cleanup)
 * - NodeJS SDK: `30`
 * */
export type SDKConfigurationType = {
    updateInterval?: number;
    environment?: Environment;
    targetingDataCleanupInterval?: number;
};
/**
 * @param {string} siteCode - client's siteCode defined on Kameleoon platform
 * @param {Partial<SDKConfigurationType>} configuration - client's configuration
 * @param {InternalSDKConfigurationType} internalConfiguration - internal configuration for sdk core to be initialized with certain parameters to certain type of JavaScript SDK
 * */
export type SDKCoreParameters = {
    siteCode: string;
    configuration?: Partial<SDKConfigurationType>;
    internalConfiguration: InternalSDKConfigurationType;
};
/**
 * @param {SdkLanguageType} type - type of the SDK
 * @param {string} version - version of the package
 * */
export type ExternalPackageInfoType = {
    type: SdkLanguageType;
    version: string;
};
/**
 * @param {IExternalStorage | undefined} externalStorage - external file system storage implemented outside client initialization
 * @param {IExternalEventSourceConstructor | undefined} externalEventSource - constructor for building external event source implementation
 * @param {ExternalPackageInfoType} externalPackageInfo - external package info, used to get package version and name
 * @param {GetClientConfigurationResultType} externalClientConfiguration - external fetched client configuration
 * @param {IExternalRequestDispatcher} externalRequestDispatcher - external request dispatcher, used to track data or get data
 * @param {number} targetingDataCleanupInterval - interval in *minutes* for cleaning up targeting data, minimum value is 1 minute
 * */
export type InternalSDKConfigurationType = {
    externalStorage: IExternalStorageConstructor;
    externalEventSource: IExternalEventSourceConstructor;
    externalPackageInfo: ExternalPackageInfoType;
    externalRequestDispatcher: IExternalRequestDispatcher;
    externalClientConfiguration?: GetClientConfigurationResultType;
};
/**
 * @readonly
 * @enum {string} an Enum containing all possible variants of environment, passed as an argument to KameleoonClient `configuration`s `environment` field
 * */
export declare enum Environment {
    Production = "production",
    Staging = "staging",
    Development = "development"
}
/**
 * @readonly
 * @enum {string} an Enum containing all possible variants of feature variable types
 * */
export declare enum VariableType {
    BOOLEAN = "BOOLEAN",
    NUMBER = "NUMBER",
    STRING = "STRING",
    JSON = "JSON"
}
export type BooleanVariableType = {
    type: VariableType.BOOLEAN;
    value: boolean;
};
export type NumberVariableType = {
    type: VariableType.NUMBER;
    value: number;
};
export type StringVariableType = {
    type: VariableType.STRING;
    value: string;
};
export type JSONVariableType = {
    type: VariableType.JSON;
    value: JSONType;
};
/**
 * @type FeatureVariableResultType - tuple of possible feature variable result types, each possible variation is an object containing `type` and `value` fields, `type` can be checked against `FeatureVariableType` enum, if the `type` is `FeatureVariableType.BOOLEAN` then the `value` type will be `boolean` and so on.
 * */
export type FeatureVariableResultType = BooleanVariableType | NumberVariableType | StringVariableType | JSONVariableType;
/**
 * @readonly
 * @enum {number} a helper Enum for getting milliseconds for a second, a minute and an hour.
 * */
export declare enum Milliseconds {
    Second = 1000,
    Minute = 60000,
    Hour = 3600000
}
/**
 * @param {string} visitorCode - unique visitor identifier, shouldn't exceed 255 characters
 * @param {number} goalId - an id of a goal to track
 * @param {number | undefined} revenue - an optional parameter for revenue, default value is `0`
 * */
export type TrackConversionParamsType = {
    visitorCode: string;
    goalId: number;
    revenue?: number;
};
export type ExperimentType = {
    id: number;
    name: string;
};
export type FeatureFlagType = {
    id: number;
    key: string;
};
/**
 * @param {string} visitorCode - unique visitor identifier, shouldn't exceed 255 characters
 * @param {string} featureKey - key of the feature flag to look for, can be found on Kameleoon Platform
 * @param {string} variableKey - key of the variable to be found for a feature flag with provided `featureKey`, can be found on Kameleoon Platform
 * */
export type GetFeatureFlagVariableParamsType = {
    visitorCode: string;
    featureKey: string;
    variableKey: string;
};
/**
 * @param {string} domain - domain which cookie belongs to
 * @param {string} visitorCode - unique visitor identifier, shouldn't exceed 255 characters
 * */
export type GetResultCookieParametersType = {
    domain: string;
    visitorCode: string;
};
/**
 * @param {Request} request - request object to get the cookie from
 * @param {Response} response - response object to write the updated cookie to
 * @param {string} domain - domain which cookie belongs to
 * @param {string | undefined} defaultVisitorCode - visitor code to be used in case there is no visitor code in cookies *Note*: if not passed visitor code will be randomly generated
 * */
export type ServerGetVisitorCodeParametersType = {
    request: IncomingMessage;
    response: ServerResponse;
    domain: string;
    defaultVisitorCode?: string;
};
/**
 * @param {string} domain - domain which cookie belongs to
 * @param {string | undefined} defaultVisitorCode - visitor code to be used in case there is no visitor code in cookies *Note*: if not passed visitor code will be randomly generated
 * */
export type ClientGetVisitorCodeParametersType = {
    domain: string;
    defaultVisitorCode?: string;
};
/**
 * @param {string | undefined} defaultVisitorCode - visitor code to be used in case there is no visitor code in cookies *Note*: if not passed visitor code will be randomly generated
 * */
export type MobileGetVisitorCodeParametersType = {
    defaultVisitorCode?: string;
};
export type TrackingCacheItemType = {
    [experimentId: number]: {
        variationId: number;
        expirationTime: number;
    };
};
