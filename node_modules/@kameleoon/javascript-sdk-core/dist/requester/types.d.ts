import { JSONType, FeatureFlagType, ConfigurationDataType } from '../campaignConfiguration';
import { Environment, ExternalPackageInfoType } from '../types';
import { Header } from './constants';
export type RequesterParamsType = {
    siteCode: string;
    environment?: Environment;
    packageInfo: ExternalPackageInfoType;
    requestDispatcher: IExternalRequestDispatcher;
};
export type TrackExperimentParamsType = {
    body: string;
    variationId: number;
    visitorCode: string;
    experimentId: number;
    isUnallocated: boolean;
    userAgent?: string;
};
export type TrackDataParamsType = {
    visitorCode: string;
    body: string;
    userAgent?: string;
};
type CustomDataEventType = {
    sdk: {
        name: string;
        version: string;
    };
    itp: boolean;
    time: number;
    data: {
        index: number;
        valuesCountMap: {
            [value: string]: number;
        };
        overwrite: boolean;
        mappingIdentifier: boolean;
    };
};
export type VisitType = {
    siteCode: string;
    visitorCode: string;
    customDataEvents: CustomDataEventType[];
};
export type GetVisitorDataResultType = {
    previousVisits?: [VisitType];
    currentVisit?: VisitType;
};
export type GetClientConfigurationResultType = Omit<ConfigurationDataType, 'featureFlags'> & {
    featureFlagConfigurations: FeatureFlagType[];
};
export declare enum HttpMethod {
    Get = "GET",
    Post = "POST"
}
declare const EVENT_TYPE_KEYS: readonly ["customData", "staticData", "page", "conversion", "activity", "experiment"];
declare const PARAMETER_KEYS: readonly ["valuesCountMap", "id", "nonce", "sdkName", "sdkVersion", "browserIndex", "browserVersion", "siteCode", "environment", "visitorCode", "currentVisit", "maxNumberPreviousVisits", "customData", "negative", "revenue", "title", "referrersIndices", "overwrite", "index", "href", "variationId", "deviceType", "goalId", "ts", "key"];
declare const TRACKING_KEYS: readonly ["visit", "map"];
declare const QUERY_KEYS: readonly ["sse", "visitor", "mobile", "map", "events"];
export type TrackingType = Record<Capitalize<(typeof TRACKING_KEYS)[number]>, string>;
export type QueryType = Record<Capitalize<(typeof QUERY_KEYS)[number]>, string>;
export type ParameterType = Record<Capitalize<(typeof PARAMETER_KEYS)[number]>, string>;
export type EventType = Record<Capitalize<(typeof EVENT_TYPE_KEYS)[number]>, string>;
export type StrictTrackingRecord<T> = {
    [K in keyof T]: `${Uncapitalize<K & string>}/`;
};
export type StrictQueryRecord<T> = {
    [K in keyof T]: `${Uncapitalize<K & string>}?siteCode=`;
};
export type StrictEventTypeRecord<T> = {
    [K in keyof T]: `eventType=${Uncapitalize<K & string>}`;
};
export type StrictParameterRecord<T> = {
    [K in keyof T]: `&${Uncapitalize<K & string>}=`;
};
export type TrackParametersType = {
    url: string;
    headers?: Partial<Record<Header, string>>;
    body: string;
};
/**
 * @interface an interface of External Request Dispatcher which will be used to perform requests.
 * */
export interface IExternalRequestDispatcher {
    /**
     * @method track - send a track request
     * @param {TrackParametersType} parameters - track parameters
     * */
    track: (params: TrackParametersType) => Promise<boolean>;
    /**
     * @method getClientConfiguration - get client configuration
     * @param {string} url - url address
     * */
    getClientConfiguration: (url: string) => Promise<JSONType>;
    /**
     * @method getRemoteData - get data from remote server of Kameleoon
     * @param {string} url - url address
     * */
    getRemoteData: (url: string) => Promise<JSONType>;
}
export {};
