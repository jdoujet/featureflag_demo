import { Result } from 'ts-res';
import { KameleoonError } from '../kameleoonError';
import { JSONType } from '../campaignConfiguration';
import { GetClientConfigurationResultType, RequesterParamsType, TrackDataParamsType, TrackExperimentParamsType, GetVisitorDataResultType } from './types';
export interface IRequester {
    getClientConfiguration: () => Promise<Result<GetClientConfigurationResultType, KameleoonError>>;
    getRemoteData: (key: string) => Promise<Result<JSONType, KameleoonError>>;
    trackExperiment: ({ variationId, visitorCode, experimentId, isUnallocated, body, }: TrackExperimentParamsType) => Promise<Result<boolean, KameleoonError>>;
    trackData: ({ visitorCode, body, }: TrackDataParamsType) => Promise<Result<boolean, KameleoonError>>;
}
export declare class Requester implements IRequester {
    private siteCode;
    private environment?;
    private requestDispatcher;
    private packageInfo;
    constructor({ siteCode, environment, packageInfo, requestDispatcher, }: RequesterParamsType);
    getClientConfiguration(timeStamp?: number): Promise<Result<GetClientConfigurationResultType, KameleoonError>>;
    getRemoteData(key: string): Promise<Result<JSONType, KameleoonError>>;
    getVisitorData(visitorCode: string): Promise<Result<GetVisitorDataResultType, KameleoonError>>;
    trackExperiment({ variationId, visitorCode, experimentId, isUnallocated, body, userAgent, }: TrackExperimentParamsType): Promise<Result<boolean, KameleoonError>>;
    trackData({ visitorCode, body, userAgent, }: TrackDataParamsType): Promise<Result<boolean, KameleoonError>>;
    private getTrackingUrl;
}
