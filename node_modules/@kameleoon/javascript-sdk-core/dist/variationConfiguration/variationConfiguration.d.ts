import { Result } from 'ts-res';
import { ExperimentItemType } from '../campaignConfiguration';
import { KameleoonError } from '../kameleoonError';
import { IStorage, VariationDataType, ExperimentVariationsType } from '../storage';
import { FeatureFlagVariationType, GetFeatureFlagVariationParametersType } from './types';
interface IVariationConfiguration {
    /**
     * @method getAssociatedVariationId - gets the id of a variation assigned to a visitor with `visitorCode` from the storage. If the visitor doesn't have associated variation yet, assigns a new one, stores it and returns it's id.
     */
    getAssociatedVariationId: (visitorCode: string, experimentId: number) => Result<number, KameleoonError>;
    /**
     * @method getAssignedVariations - obtains experiments with according variations that are *already assigned* and *stored* in the `variationStorage`. If `getAssociatedVariationId` had not been called before, there will be no variations to get.
     */
    getAssignedVariations(visitorCode: string): Result<ExperimentVariationsType, KameleoonError>;
    /**
     * @method getFeatureFlagVariation - obtains variation for the rule of the feature flag which is both targeted and has a variation, if no such rule was found, returns empty rule with default `variationKey`, given an option `withAssignment` of `true` will also assign a new variation and save it in the storage
     */
    getFeatureFlagVariation: (params: GetFeatureFlagVariationParametersType) => Result<FeatureFlagVariationType, KameleoonError>;
    /**
     * @method getExperimentVariation - obtains variation for the experiment by calculating the variation for the visitor *without assigning* it to a visitor
     */
    getExperimentVariation: (visitorCode: string, experiment: ExperimentItemType) => Result<number, KameleoonError>;
}
export declare class VariationConfiguration implements IVariationConfiguration {
    private experiments;
    private storage;
    constructor(experiments: ExperimentItemType[], externalStorage: IStorage<VariationDataType>);
    getAssociatedVariationId: (visitorCode: string, experimentId: number) => Result<number, KameleoonError>;
    getAssignedVariations(visitorCode: string): Result<ExperimentVariationsType, KameleoonError>;
    getFeatureFlagVariation({ visitorCode, featureFlag, targetingData, packageInfo, campaignConfiguration, withAssignment, }: GetFeatureFlagVariationParametersType): Result<FeatureFlagVariationType, KameleoonError>;
    getExperimentVariation(visitorCode: string, experiment: ExperimentItemType): Result<number, KameleoonError>;
    private assignVariation;
    private updateStorageData;
}
export {};
