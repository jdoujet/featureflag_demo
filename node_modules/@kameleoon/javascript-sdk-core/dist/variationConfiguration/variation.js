"use strict";var _types=require("../types");Object.defineProperty(exports,"__esModule",{value:!0}),exports.Variation=void 0;function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,_toPropertyKey(c.key),c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),Object.defineProperty(a,"prototype",{writable:!1}),a}function _defineProperty(a,b,c){return b=_toPropertyKey(b),b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function _toPropertyKey(a){var b=_toPrimitive(a,"string");return"symbol"===_typeof(b)?b:b+""}function _toPrimitive(a,b){if("object"!==_typeof(a)||null===a)return a;var c=a[Symbol.toPrimitive];if(c!==void 0){var d=c.call(a,b||"default");if("object"!==_typeof(d))return d;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===b?String:Number)(a)}var Variation=/*#__PURE__*/function(){function a(b){_classCallCheck(this,a),_defineProperty(this,"variationData",void 0),this.variationData=b}return _createClass(a,[{key:"id",get:function get(){if(!this.variationData)throw new Error("Internal usage error: Check if the variation `isValid`, before getting it's `id`");return this.variationData.variationId}},{key:"isValid",value:function isValid(a){var b=this.variationData;if(!b)return!1;// --- Note ---
// - Respool is a kind of shuffle parameter
// it's presence indicates that variations assigned to
// user has changed at certain time (time is the value of `respoolTime` in seconds)
// - So the variation is valid unless it has been shuffled after it's assignment
if(null!==a&&void 0!==a&&a.length){var c=new Date(Date.parse(b.assignmentDate)).getTime()/_types.Milliseconds.Second,d=a.find(function(a){return a.variationId===b.variationId+""});return!d||c>d.value}return!0}}]),a}();exports.Variation=Variation;
//# sourceMappingURL=variation.js.map