/**
 * @interface an interface of External Constructor for External Event Source which must be implemented by the wrapper constructor to initialize new `IExternalEventSource` in order to pass the necessary `url` parameter
 * */
export interface IExternalEventSourceConstructor {
    /**
     * @method initialize - creates and instance of `IExternalEventSource` and returns it
     * @param {string} url - url of server sent event server which will be pasted by consumer
     * @returns {IExternalEventSource} an initialized instance of `IExternalEventSource`
     * */
    initialize: (url: string) => IExternalEventSource;
}
/**
 * @param {string} siteCode - site code from the event
 * @param {string} eventType - type of event to be listened for
 * @param {(timestamp: number) => void} onEvent  - callback to be executed upon event if the site code from event matches the site code of EvenetSource
 * */
export type EventSourceOpenParametersType = {
    siteCode: string;
    eventType: string;
    onEvent: (timestamp: number) => void;
};
/**
 * @interface an interface of External Event Source which will be used in server sent events operations
 * */
export interface IExternalEventSource {
    /**
     * @method open - opens event source live connection
     * @param {(timestamp: number) => void} callback - callback function that will be executed on each obtainment of server event
     * */
    open: ({ siteCode, eventType, onEvent, }: EventSourceOpenParametersType) => void;
    /**
     * @method close - closes event source live connection
     * */
    close: () => void;
}
/**
 * @param {string} siteCode - site code from the event
 * @param {number} ts - timestamp of when the event has happened
 * */
export type RealTimeEventType = {
    siteCode: string;
    ts: number;
};
export type CreateEventSourceParamsType = {
    siteCode: string;
    externalEventSource?: IExternalEventSourceConstructor;
};
