import { KameleoonError } from '../kameleoonError';
import { ConditionDataType } from './conditions';
import { NodeValueType, Operator } from './types';
export interface ITargetingNode {
    readonly value?: NodeValueType;
    readonly left?: ITargetingNode;
    readonly right?: ITargetingNode;
    readonly error?: KameleoonError;
}
export declare class TargetingNode implements ITargetingNode {
    private nodeValue?;
    private nodeError?;
    private leftChild?;
    private rightChild?;
    private inverseResult;
    constructor(value: ConditionDataType | Operator, left?: ITargetingNode, right?: ITargetingNode);
    get value(): NodeValueType | undefined;
    get error(): KameleoonError | undefined;
    get left(): ITargetingNode | undefined;
    get right(): ITargetingNode | undefined;
    get inverse(): boolean;
    private isOperator;
}
