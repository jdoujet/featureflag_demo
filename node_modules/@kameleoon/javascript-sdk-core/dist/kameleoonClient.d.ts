import { JSONType } from './campaignConfiguration';
import { KameleoonDataType } from './kameleoonData';
import { TrackConversionParamsType, ExperimentType, FeatureFlagType, GetFeatureFlagVariableParamsType, FeatureVariableResultType, SDKCoreParameters } from './types';
/**
 * @interface an interface of KameleoonClient instance
 */
export interface IKameleoonClient {
    /**
     * @method initialize - an asynchronous method for KameleoonClient initialization by fetching Kameleoon SDK related data from server or by retrieving data from local source if data is up-to-date or update interval has not been reached
     * @param {boolean | undefined} useCache - optional parameter for activating SDK offline mode, if `true` is passed failed polls will not return error and will use cached data if such data is available, default value is `false`. Note: if offline mode is on, SDK will still try to retrieve the latest data.
     * @returns {Promise<boolean>} Promise resolved into boolean field indicating success or fail
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.StorageWrite` Couldn't update storage data
     * - `KameleoonException.ClientConfiguration` Couldn't retrieve client configuration from Kameleoon Api
     * - `KameleoonException.MaximumRetriesReached` Maximum retries reached, request failed
     */
    initialize(useCache?: boolean): Promise<boolean>;
    initialize(): Promise<boolean>;
    /**
     * @method addData - method for adding targeting data to the storage so that other methods could decide whether the current visitor is targeted or not. Note: userAgent data will not be stored in storage like other data, and it will be sent with every tracking request for bot filtration.
     * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length
     * @param {KameleoonDataType[]} kameleoonData - number of instances of any type of `KameleoonData`, can be added solely in array or as a sequential arguments
     * @returns {void}
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.StorageWrite` Couldn't update storage data
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     */
    addData: (visitorCode: string, ...data: KameleoonDataType[]) => void;
    /**
     * @method getRemoteVisitorData - an asynchronous method for retrieving custom data for the latest visit of `visitorCode` from Kameleoon Data API and optionally adding it to the storage so that other methods could decide whether the current visitor is targeted or not.
     * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length
     * @param {boolean | undefined} shouldAddData - optional parameter for adding retrieved data to the storage like `addData` method does, default value is `true`
     * @returns {KameleoonDataType[]} promise resolved to an array of `KameleoonData` instances, only includes custom data
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.RemoteData` - Couldn't retrieve data from Kameleoon server
     */
    getRemoteVisitorData: (visitorCode: string, shouldAddData?: boolean) => Promise<KameleoonDataType[]>;
    /**
     * @method triggerExperiment - triggers experiment by assigning the variation to the user with `visitorCode`, if the variation is already assigned just returns it's id. Note: returned id `0` indicates default variation.  At the same time sends tracking request.
     * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length
     * @param {number} experimentId - id of experiment running for the current visitor
     * @returns {number} associated variationId which is successfully searched/assigned
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.ExperimentConfigurationNotFound` No configuration found for provided `experimentId`
     * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.StorageRead` Couldn't find associated experiment by provided `experimentId` and `visitorCode` inside the storage
     * - `KameleoonException.NotTargeted` Current visitor is not targeted
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     */
    triggerExperiment: (visitorCode: string, experimentId: number) => number;
    /**
     * @method trackConversion - creates and adds `Conversion` data to the visitor with specified parameters and executes `flush`. Note: it's a helper method for the quick and convenient conversion tracking, however creating and adding `Conversion` manually allows more flexible `Conversion` with `negative` parameter
     * @param {TrackConversionParamsType} conversionParameters - `visitorCode`, `goalId` and `revenue` parameters for data tracking
     * @returns {void}
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.StorageWrite` Couldn't update storage data
     */
    trackConversion: ({ visitorCode, goalId, revenue, }: TrackConversionParamsType) => void;
    /**
     * @method flush - takes visitor associated kameleoon data and sends the data tracking request with collected data,
     * sent data is removed from `KameleoonClient` instance but not from the storage for correct targeting checks. If no visitor is passed,
     * then data for all visitors is sent and removed from `KameleoonClient` instance. Moreover, regardless of visitor code input
     * the method first attemps to send all previously failed tracking requests which were stored locally during the offline mode.
     * @param {string | undefined} visitorCode - unique visitor identification string, can't exceed 255 characters length
     * @returns {void}
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     */
    flush: (visitorCode: string) => void;
    /**
     * @deprecated Use flush method instead.
     */
    flushData: (visitorCode: string) => void;
    /**
     * @method getExperiments - returns a list of experiments stored in the client configuration
     * @returns {ExperimentType[]} a list of all experiments items with `id` and `name` fields
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     */
    getExperiments: () => ExperimentType[];
    /**
     * @method getVisitorExperiments - returns a list of experiments that the visitor with `visitorCode` is targeted by and that are *active* for the visitor (visitor will have one of the variations allocated if the experiment will be triggered).
     * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length
     * @param {boolean | undefined} isAllocated - boolean value indicating that only experiments *allocated* for visitor will be returned. Default value is `true`
     * @returns {ExperimentType[]} a list of all experiments items with `id` and `name` fields
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     */
    getVisitorExperiments: (visitorCode: string, isAllocated?: boolean) => ExperimentType[];
    /**
     * @method getExperimentVariationData - returns variation data in JSON format for the variation with `variationId`
     * @param {number} variationId - id of variation
     * @returns {JSONType} variation data in JSON format
     * @throws `KameleoonError` with one of the following `type` s:
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     * - `KameleoonException.JSONParse` - Couldn't pass JSON value
     * - `KameleoonException.VariationNotFound` - No variation found for provided `variationId`
     */
    getExperimentVariationData: (variationId: number) => JSONType | null;
    /**
     * @method getFeatureFlags - returns a list of feature flags stored in the client configuration
     * @returns {FeatureFlagType[]} a list of all feature flags items with `id` and `key` fields
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     */
    getFeatureFlags: () => FeatureFlagType[];
    /**
     * @method getVisitorFeatureFlags - returns a list of feature flags that the visitor with `visitorCode` that is targeted by and that are *active* for the visitor (visitor will have one of the variations allocated).
     * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length
     * @returns {FeatureFlagType[]} a list of all feature flags items with `id` and `key` fields
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     * - `KameleoonException.NotTargeted` - Current visitor is not targeted
     */
    getVisitorFeatureFlags: (visitorCode: string) => FeatureFlagType[];
    /**
     * @method isFeatureFlagActive - returns a boolean indicating whether the visitor with `visitorCode` has `featureKey` active for him, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request
     * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length
     * @param {string} featureKey - a unique key for feature flag
     * @returns {boolean} a boolean indicator of whether the feature flag with `featureKey` is active for visitor with `visitorCode`
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`
     * - `KameleoonException.DataInconsistency` - Allocated variation was found but there is no feature flag with according `featureKey`.
     * - `KameleoonException.NotTargeted` - Current visitor is not targeted
     */
    isFeatureFlagActive: (visitorCode: string, featureKey: string) => boolean;
    /**
     * @method getFeatureFlagVariationKey - returns variation key for the visitor under `visitorCode` in the found feature flag, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request
     * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length
     * @param {string} featureKey - a unique key for feature flag
     * @returns {string} a string containing variable key for the allocated feature flag variation for the provided visitor
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`
     * - `KameleoonException.NotTargeted` - Current visitor is not targeted
     */
    getFeatureFlagVariationKey: (visitorCode: string, featureKey: string) => string;
    /**
     * @method getFeatureFlagVariable - returns a variable for the visitor under `visitorCode` in the found feature flag, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request
     * @param {GetFeatureFlagVariableParamsType} parameters - an object with parameters of a type `GetFeatureFlagVariableParamsType`, see the type for details.
     * @returns {FeatureVariableResultType} a variable object containing `type` and `value` fields, `type` can be checked against `FeatureVariableType` enum, if the `type` is `FeatureVariableType.BOOLEAN` then the `value` type will be `boolean` and so on.
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`
     * - `KameleoonException.FeatureFlagVariableNotFound` - No feature variable was found for provided `visitorCode` and `variableKey`
     * - `KameleoonException.NotTargeted` - Current visitor is not targeted
     * - `KameleoonException.JSONParse` - Couldn't pass JSON value
     * - `KameleoonException.NumberParse` - Couldn't pass Number value
     */
    getFeatureFlagVariable: ({ visitorCode, featureKey, variableKey, }: GetFeatureFlagVariableParamsType) => FeatureVariableResultType;
    /**
     * @method getRemoteData - returns a data which is stored for specified siteCode on a remote Kameleoon server.
     * @param {string} key - unique key that the data you try to get is associated with.
     * @returns {JSONType} - promise with retrieving data for specific key.
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.RemoteData` - Couldn't retrieve data from Kameleoon server
     */
    getRemoteData: (key: string) => Promise<JSONType>;
    /**
     * @method getEngineTrackingCode - returns Kameleoon tracking code for the current visitor. Tracking code is built of the experiments that were triggered and feature flag variations that were assigned during the last 5 seconds
     * See [Kameleoon Automation API](https://developers.kameleoon.com/apis/activation-api-js/api-reference#trigger-1) for the details
     * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length
     * @returns {string} Kameleoon tracking code
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded
     * - `KameleoonException.VisitorCodeEmpty` The visitor code is empty
     */
    getEngineTrackingCode: (visitorCode: string) => string;
    /**
     * @method onConfigurationUpdate - fires a callback on client configuration update. Note: this method only works for server sent events of real time update.
     * @param {() => void} callback - callback function with no parameters that will be called upon configuration update
     * @returns {void}
     * @throws `KameleoonError` with one of the following `type` s:
     *
     * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`
     */
    onConfigurationUpdate: (callback: () => void) => void;
}
/**
 * @class
 * KameleoonClient - a class for creating kameleoon client instance
 * for communicating with Kameleoon JavaScript SDK Core, when new instance is created
 */
export declare class KameleoonClient implements IKameleoonClient {
    private variationConfiguration?;
    private campaignConfiguration;
    private variationDataStorage;
    private offlineTrackingStorage;
    private trackingCache;
    private requester;
    private externalPackageInfo;
    private isOfflineModeOn?;
    /**
     * @param {SDKCoreParameters} sdkCoreParameters - parameters for initializing sdk core
     */
    constructor({ siteCode, configuration, internalConfiguration, }: SDKCoreParameters);
    initialize(useCache?: boolean): Promise<boolean>;
    addData(visitorCode: string, ...data: KameleoonDataType[]): void;
    getRemoteVisitorData(visitorCode: string, shouldAddData?: boolean): Promise<KameleoonDataType[]>;
    triggerExperiment(visitorCode: string, experimentId: number): number;
    trackConversion({ visitorCode, goalId, revenue, }: TrackConversionParamsType): void;
    flush(visitorCode?: string): void;
    flushData(visitorCode?: string): void;
    getExperiments(): ExperimentType[];
    getVisitorExperiments(visitorCode: string, isActive?: boolean): ExperimentType[];
    getExperimentVariationData(variationId: number): JSONType;
    getFeatureFlags(): FeatureFlagType[];
    getVisitorFeatureFlags(visitorCode: string): FeatureFlagType[];
    getFeatureFlagVariationKey(visitorCode: string, featureKey: string): string;
    getFeatureFlagVariable({ visitorCode, featureKey, variableKey, }: GetFeatureFlagVariableParamsType): FeatureVariableResultType;
    isFeatureFlagActive(visitorCode: string, featureKey: string): boolean;
    getRemoteData(key: string): Promise<JSONType>;
    onConfigurationUpdate(callback: () => void): void;
    getEngineTrackingCode(visitorCode: string): string;
    private _getFeatureFlagVariation;
}
