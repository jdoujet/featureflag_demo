import { ClientSettingsType } from '../clientSettings';
import { IExternalEventSourceConstructor } from '../eventSource';
import { KameleoonData, KameleoonDataType } from '../kameleoonData';
import { Requester, GetClientConfigurationResultType } from '../requester';
import { ClientDataType, ExternalStorage, IStorage } from '../storage';
import { OfflineTracking } from '../storage/types';
import { SegmentType, TargetingDataType } from '../targeting';
import { VariableType } from '../types';
export type UpdateClientConfigurationParameters = {
    timeStamp?: number;
    useCache?: boolean;
};
export type ScheduleType = {
    dateStart: string;
    dateEnd: string;
};
export declare enum UpdateType {
    Polling = 0,
    RealTime = 1,
    Idle = 2
}
export type JSONValue = string | number | boolean | {
    [x: string]: JSONValue;
} | JSONValue[];
export type JSONType = Record<string | number | symbol, JSONValue> | null;
export declare enum ExperimentType {
    CLASSIC = "CLASSIC",
    SERVER_SIDE = "SERVER_SIDE",
    DEVELOPER = "DEVELOPER",
    MVT = "MVT",
    HYBRID = "HYBRID"
}
export declare enum RuleType {
    PROGRESSIVE_DELIVERY = "PROGRESSIVE_DELIVERY",
    TARGETED_DELIVERY = "TARGETED_DELIVERY",
    EXPERIMENTATION = "EXPERIMENTATION"
}
export declare enum FeatureFlagSdkLanguageType {
    ANDROID = "ANDROID",
    SWIFT = "SWIFT",
    JAVA = "JAVA",
    CSHARP = "CSHARP",
    NODEJS = "NODEJS",
    PHP = "PHP",
    RUBY = "RUBY",
    GO = "GO",
    FLUTTER = "FLUTTER",
    REACTJS = "REACTJS"
}
export declare enum FeatureStatus {
    ACTIVATED = "ACTIVATED",
    DEACTIVATED = "DEACTIVATED",
    SCHEDULED = "SCHEDULED"
}
export declare enum CustomDataScope {
    Visit = "VISIT",
    Visitor = "VISITOR",
    Page = "Page"
}
export type ExperimentItemType = {
    id: string;
    name: string;
    type: ExperimentType;
    siteId: string;
    siteCode: string;
    status: ExperimentStatus;
    siteEnabled: boolean;
    variations: ExperimentVariationType[];
    deviations: DeviationType[];
    respoolTime: RespoolTimeType[];
    segment: SegmentType | null;
};
export type ExperimentVariationType = {
    id: string;
    customJson: string;
};
export type DeviationType = {
    variationId: string;
    value: number;
};
export type RespoolTimeType = {
    variationId: string;
    value: number;
};
export declare enum ExperimentStatus {
    DRAFT = "DRAFT",
    ACTIVE = "ACTIVE",
    PAUSED = "PAUSED",
    SCHEDULED = "SCHEDULED",
    STOPPED = "STOPPED",
    USED_AS_PERSONALIZATION = "USED_AS_PERSONALIZATION",
    DEVIATED = "DEVIATED"
}
export type FeatureFlagType = {
    id: number;
    featureKey: string;
    variations: FeatureVariationType[];
    defaultVariationKey: string;
    rules: RuleItemType[];
};
export type FeatureVariationType = {
    key: string;
    variables: FeatureVariableType[];
};
export type FeatureVariableType = {
    key: string;
    type: VariableType;
    value: string | number | boolean;
};
export type RuleItemType = {
    type: RuleType;
    id: number;
    respoolTime: number | null;
    order: number;
    exposition: number;
    experimentId: number;
    variationByExposition: VariationByExpositionType[];
    segment: SegmentType | null;
};
export type VariationByExpositionType = {
    variationKey: string;
    variationId: number | null;
    exposition: number;
};
export type ConfigurationDataType = {
    experiments: ExperimentItemType[];
    featureFlags: FeatureFlagType[];
    configuration: ConfigurationType;
    customData: CustomDataConfigurationType[];
};
export type CustomDataConfigurationType = {
    index: number;
    localOnly: boolean;
    scope: CustomDataScope;
};
export type ConfigurationType = {
    realTimeUpdate: boolean;
};
export type CampaignConfigurationType = {
    targetingData: TargetingDataType;
    configurationData: ConfigurationDataType;
};
export type UnsentVisitorTargetingDataType = Map<KameleoonData | number, KameleoonDataType>;
export type UnsentTargetingDataType = {
    [visitorCode: string]: UnsentVisitorTargetingDataType | undefined;
};
export type CampaignConfigurationParametersType = {
    settings: ClientSettingsType;
    storage: IStorage<ClientDataType>;
    requester: Requester;
    offlineTrackingStorage: ExternalStorage<OfflineTracking>;
    externalClientConfiguration?: GetClientConfigurationResultType;
    externalEventSource: IExternalEventSourceConstructor;
    targetingCleanupInterval?: number;
};
